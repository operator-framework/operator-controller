{
    "schema": "olm.package",
    "name": "rhpam-kogito-operator",
    "defaultChannel": "7.x",
    "icon": {
        "base64data": "PHN2ZyBpZD0iTGF5ZXJfMSIgZGF0YS1uYW1lPSJMYXllciAxIiB4bWxucz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmciIHZpZXdCb3g9IjAgMCAxMDI0IDEwMjQiPjxkZWZzPjxzdHlsZT4uY2xzLTF7ZmlsbDojMDg1ODcwO30uY2xzLTJ7ZmlsbDojZmZmO30uY2xzLTN7ZmlsbDojZjU4OTFmO30uY2xzLTR7ZmlsbDojOTdkNGU4O308L3N0eWxlPjwvZGVmcz48dGl0bGU+a29naXRvX2ljb25fcmdiX2NvbG9yX2RlZmF1bHQ8L3RpdGxlPjxwYXRoIGNsYXNzPSJjbHMtMSIgZD0iTTkyOS4zNywzMC41QTcwLjMxLDcwLjMxLDAsMCwwLDg3Mi4xOSwxQzg2OC4wOSwxLDczOCwyMy42Nyw3MzgsMjMuNjdhNzAuMTUsNzAuMTUsMCwwLDAtNDguMSwzMy4yNUw2NjgsOTMuNzdjLTQ4LjQxLTQyLjQ2LTEwMS43NC02NC43LTE1Ni02NC43UzQwNC40Myw1MS4zMSwzNTYsOTMuNzdMMzM0LjExLDU2LjkyQTcwLjEzLDcwLjEzLDAsMCwwLDI4NiwyMy42N1MxNTUuOSwxLDE1MS44MSwxQTcwLjE5LDcwLjE5LDAsMCwwLDkwLjU0LDEwNS40MWw1MC4yNCw5MGExMTUuMTIsMTE1LjEyLDAsMCwwLDYwLjMsMTY5LjlMMTA4LjMsNzk0LjYsNTEyLDEwMjMsOTE1LjcsNzk0LjYsODIyLjkyLDM2NS4yN2ExMTUuMTIsMTE1LjEyLDAsMCwwLDYwLjMtMTY5LjlsNTAuMjQtOTBBNzAuNDksNzAuNDksMCwwLDAsOTI5LjM3LDMwLjVaIi8+PHBhdGggY2xhc3M9ImNscy0yIiBkPSJNNDgwLjA5LDI3OC4zbDguNTctLjA5TDUxMiwzMDEuNGwyMy4xOS0yMy4xOSw4LjYuMDhjNjMuMjMuNjMsMTIzLjgyLDMuMTQsMTc2LjI4LDcuMjctNDUuOTQtOTkuNDktMTIyLTE4Ni4zLTIwOC0xODYuM1MzNDkuOSwxODYuMDcsMzA0LDI4NS41N0MzNTYuMzksMjgxLjQ0LDQxNi45NCwyNzguOTIsNDgwLjA5LDI3OC4zWiIvPjxwYXRoIGNsYXNzPSJjbHMtMyIgZD0iTTQ0OC43LDY5Ni4xNmExMTYuMzYsMTE2LjM2LDAsMCwwLDEzMS4xNy41MSw1ODEuNDcsNTgxLjQ3LDAsMCwwLTEzMS4xNy0uNTFaIi8+PHBhdGggY2xhc3M9ImNscy00IiBkPSJNNjkxLjU3LDY3OS43M2ExODUuNDQsMTg1LjQ0LDAsMCwwLTE3LjI3LTQxLjQ3Yy0xLjIxLTIuMTItMi41LTQuMTgtMy43OC02LjI0LS43My0xLjE5LTEuNDMtMi40MS0yLjE5LTMuNTgtMS4yLTEuODUtMi40OS0zLjYzLTMuNzUtNS40My0uOTQtMS4zNC0xLjg1LTIuNzEtMi44Mi00LTEuMTItMS41MS0yLjMyLTMtMy40OC00LjQzcy0yLjM4LTMuMDgtMy42NC00LjU3Yy0xLTEuMTgtMi0yLjI5LTMtMy40NEExODYuNjksMTg2LjY5LDAsMCwwLDU3MC43Myw1NTNjLTE3LjI1LDExLjU2LTM5LDIyLjY5LTU4LjczLDIyLjY5UzQ3MC41Miw1NjQuNTcsNDUzLjI3LDU1M2ExODYuNTksMTg2LjU5LDAsMCwwLTgwLjkxLDUzLjZjLTEsMS4xMy0yLDIuMjItMywzLjM3LTEuMjYsMS41LTIuNDQsMy4wNi0zLjY2LDQuNnMtMi4zNCwyLjkxLTMuNDYsNC40MWMtMSwxLjMyLTEuODgsMi42OS0yLjgzLDQtMS4yNiwxLjc5LTIuNTQsMy41Ni0zLjczLDUuNC0uNzcsMS4xOS0xLjQ4LDIuNDItMi4yMiwzLjYyLTEuMjcsMi4wNS0yLjU2LDQuMS0zLjc1LDYuMjFhMTg1LDE4NSwwLDAsMC0xNy4yOCw0MS40N2MxMi44NC00LjQsMjYuNDMtOC4yMyw0MC40Ni0xMS42NywwLDAtLjA1LS4wOS0uMDctLjE0LDEuNDUtLjM1LDIuOTUtLjY2LDQuNDEtMWwxNi45NS00Ny4yNnY0My41MWMxLS4yLDItLjM0LDMtLjU0cTkuNDQtMS44NSwxOS4xNC0zLjM5Yy43OS0uMTMsMS41Ny0uMjcsMi4zNi0uMzlxMTEuNzQtMS44MywyMy44Ni0zLjJsMTMuODctNTUuNTF2NTQuMDljOC41Ni0uNzcsMTcuMjYtMS4zMSwyNi0xLjcybDMuOTItLjE3YzMuMjctLjEzLDYuNTMtLjI3LDkuODMtLjM1LDUuMjMtLjE0LDEwLjUtLjIzLDE1LjgtLjIzLDUuNDksMCwxMC45My4xLDE2LjM0LjI1LDIuOS4wOCw1Ljc5LjE5LDguNjcuMzFsNS43NS4yNmM4LjM2LjQxLDE2LjY2Ljk0LDI0LjgyLDEuNjhWNjAwLjEzbDEzLjg4LDU1LjUzYy41NS4wNiwxLjA5LjE1LDEuNjUuMjIsNy4zLjg1LDE0LjU0LDEuNzksMjEuNjUsMi44OSwyLjczLjQxLDUuMzguOTIsOC4wOCwxLjM3LDMuOTUuNjgsNy45LDEuMzUsMTEuNzgsMi4xLDEuNzIuMzIsMy41LjU4LDUuMi45MlY2MTkuNjVsMTcsNDcuMjljMS4yMy4yOSwyLjQuNjQsMy42Mi45NCwxLjg0LjQ1LDMuNzIuODYsNS41NCwxLjMybC0uMDYuMUM2NjguMTksNjcyLjQ0LDY4MC4yMSw2NzUuODMsNjkxLjU3LDY3OS43M1oiLz48cGF0aCBjbGFzcz0iY2xzLTMiIGQ9Ik03MzcuNTcsMzI4LjA3bC0xMC0uODRjLTUxLjU2LTQuMzgtMTEyLjEzLTcuMS0xNzUuNjctNy45TDUxMiwzNTkuMjRsLTQwLjA5LTM5LjkxYy02My40OC44MS0xMjQsMy41My0xNzUuNTQsNy45bC0xMCwuODVDMjY4LjI3LDM3Ny44MiwyNTgsNDI4LjExLDI1OCw0NzAuMjRjMCw2OS45NCwyOC4zMSwxMDQuMTYsNzQsMTIwLjkzQTIyOS40OCwyMjkuNDgsMCwwLDEsNDE4LjI4LDUyM2EyMC40MywyMC40MywwLDAsMSwzMi4xNi0yNC4xNmMxNi4xMiwxNC45LDQ1Ljg5LDM1LjkxLDYxLjU2LDM1LjkxczQ1Ljk0LTIxLjQzLDYxLjU1LTM1LjkxQTIwLjQzLDIwLjQzLDAsMCwxLDYwNS43Miw1MjMsMjI5LjY1LDIyOS42NSwwLDAsMSw2OTIsNTkxLjE3YzQ1Ljc0LTE2Ljc3LDc0LTUxLDc0LTEyMC45M0M3NjYsNDI4LjExLDc1NS43MywzNzcuODIsNzM3LjU3LDMyOC4wN1pNNDAzLjUsNDYyLjc3Yy0yOS4zMS42Ni01Ni0xNi4yLTc0LjgyLTQzLjUxLDE3LjUzLTI4LjEzLDQzLjQ3LTQ2LjE3LDcyLjc4LTQ2LjgzczU2LDE2LjE5LDc0LjgyLDQzLjUxQzQ1OC43NSw0NDQuMDcsNDMyLjgxLDQ2Mi4xMSw0MDMuNSw0NjIuNzdabTI5MS44Mi0xMy4xOC0zMiwzMi0zMi0zMi0zMiwzMi0zMi0zMiwzMi0zMi0zMi0zMiwzMi0zMiwzMiwzMiwzMi0zMiwzMiwzMi0zMiwzMloiLz48cGF0aCBjbGFzcz0iY2xzLTQiIGQ9Ik02MDguMjMsNzk3bDE5LjkxLDc5LjY3LDc2LjMyLTQzLjE4Vjc0NWwxOS4zOCw3Ny41MywxMTIuMzUtNjMuNTZMNzkxLjUyLDU1Mi4yN2MtMTQuOTQsMzMuOTItNDAuNjgsNTguNzctNzcuMiw3NC4xMkEyMjUuMTQsMjI1LjE0LDAsMCwxLDczMSw2NjguNzFhNDAuOTQsNDAuOTQsMCwwLDEtNTIuNzIsNDkuNzUsNDM4LjI3LDQzOC4yNywwLDAsMC00Ni43My0xMywxNTcuMDcsMTU3LjA3LDAsMCwxLTIzNC42LTEsNDQzLjg2LDQ0My44NiwwLDAsMC01MS4yMywxNEE0MC45NCw0MC45NCwwLDAsMSwyOTMsNjY4LjcxYTIyNC44NiwyMjQuODYsMCwwLDEsMTYuNjktNDIuMzNjLTM2LjUzLTE1LjM0LTYyLjI3LTQwLjItNzcuMjEtNzQuMTFMMTg3LjgxLDc1OC45NCwzMDAuMTYsODIyLjUsMzE5LjU0LDc0NXY4OC41bDc2LjMyLDQzLjE4TDQxNS43Nyw3OTd2OTAuOTNMNTEyLDk0Mi4zNmw5Ni4yMy01NC40NVoiLz48cGF0aCBjbGFzcz0iY2xzLTIiIGQ9Ik0yNTMuOTEsMjk4LjQzYTU4MC4wNiw1ODAuMDYsMCwwLDEsNDMuNTUtODcuNjRxMTEuOTMtMTkuNTEsMjQuNjktMzYuNjRMMjczLjc4LDkyLjc5bC0xMjItMjEuNiw3OC43NiwxNDEsLjA2LjA3YTQ0LjgxLDQ0LjgxLDAsMSwwLDIzLjI3LDg2LjEzWiIvPjxwYXRoIGNsYXNzPSJjbHMtMiIgZD0iTTc5My4zNSwyMTIuM2wuMDctLjA3LDc4Ljc2LTE0MS0xMjIsMjEuNi00OC4zNyw4MS4zNnExMi43MiwxNy4xNywyNC42OSwzNi42NGE1ODAuMDYsNTgwLjA2LDAsMCwxLDQzLjU1LDg3LjY0LDQ0LjgsNDQuOCwwLDEsMCwyMy4yNi04Ni4xM1oiLz48L3N2Zz4=",
        "mediatype": "image/svg+xml"
    }
}
{
    "schema": "olm.channel",
    "name": "7.x",
    "package": "rhpam-kogito-operator",
    "entries": [
        {
            "name": "rhpam-kogito-operator.7.13.0-1",
            "replaces": "rhpam-kogito-operator.v7.12.0-4"
        },
        {
            "name": "rhpam-kogito-operator.7.13.1-1",
            "replaces": "rhpam-kogito-operator.7.13.0-1"
        },
        {
            "name": "rhpam-kogito-operator.7.13.1-2",
            "replaces": "rhpam-kogito-operator.7.13.1-1"
        },
        {
            "name": "rhpam-kogito-operator.7.13.2-1",
            "replaces": "rhpam-kogito-operator.7.13.1-2"
        },
        {
            "name": "rhpam-kogito-operator.7.13.2-2",
            "replaces": "rhpam-kogito-operator.7.13.2-1"
        },
        {
            "name": "rhpam-kogito-operator.7.13.2-3",
            "replaces": "rhpam-kogito-operator.7.13.2-2"
        },
        {
            "name": "rhpam-kogito-operator.7.13.3-1",
            "replaces": "rhpam-kogito-operator.7.13.2-3"
        },
        {
            "name": "rhpam-kogito-operator.7.13.4-1",
            "replaces": "rhpam-kogito-operator.7.13.3-1"
        },
        {
            "name": "rhpam-kogito-operator.7.13.4-2",
            "replaces": "rhpam-kogito-operator.7.13.4-1"
        },
        {
            "name": "rhpam-kogito-operator.7.13.4-3",
            "replaces": "rhpam-kogito-operator.7.13.4-2"
        },
        {
            "name": "rhpam-kogito-operator.7.13.5-1",
            "replaces": "rhpam-kogito-operator.7.13.4-3"
        },
        {
            "name": "rhpam-kogito-operator.7.13.5-2",
            "replaces": "rhpam-kogito-operator.7.13.5-1"
        },
        {
            "name": "rhpam-kogito-operator.7.13.5-3",
            "replaces": "rhpam-kogito-operator.7.13.5-2"
        },
        {
            "name": "rhpam-kogito-operator.7.13.5-4",
            "replaces": "rhpam-kogito-operator.7.13.5-3"
        },
        {
            "name": "rhpam-kogito-operator.v7.12.0-2",
            "replaces": "rhpam-kogito-operator.v7.12.0"
        },
        {
            "name": "rhpam-kogito-operator.v7.12.0-3",
            "replaces": "rhpam-kogito-operator.v7.12.0-2"
        },
        {
            "name": "rhpam-kogito-operator.v7.12.0-4",
            "replaces": "rhpam-kogito-operator.v7.12.0-3"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.0-1",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:8a08f6e2c928d75cb2170ebf11b0f70da301a686417c4f6b97eb433ddc675cf1",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.0-1"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:f04ea2a266e966eed66c13fe8c9f284d0e868a2d53c8b6a2affc086b9b23b112",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.10.0+git",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://kogito.kie.org/"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://github.com/kiegroup/kogito-operator/blob/main/README.md"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/rhpam-kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:011909289ad5a6e6dd012fafaab83117777073febb15536ee7e66a4d5830f303"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:8a08f6e2c928d75cb2170ebf11b0f70da301a686417c4f6b97eb433ddc675cf1"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-f04ea2a266e966eed66c13fe8c9f284d0e868a2d53c8b6a2affc086b9b23b112-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:f04ea2a266e966eed66c13fe8c9f284d0e868a2d53c8b6a2affc086b9b23b112"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:f04ea2a266e966eed66c13fe8c9f284d0e868a2d53c8b6a2affc086b9b23b112"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.1-1",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:d92764f02ab93c1f9e7dcb4e521deb9f5b5d5ea2df254183ad2bcd7db247e305",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.1-1"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:8433ff87295d11a58e541fdcaf9e9b8fdd72c0cca9014bd21b888ae4a5b137d2",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.10.0+git",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://kogito.kie.org/"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://github.com/kiegroup/kogito-operator/blob/main/README.md"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/rhpam-kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:37a16a1baf121356bb1de376f75d2b616f505d398cea4b31457d2c7190c23d69"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:d92764f02ab93c1f9e7dcb4e521deb9f5b5d5ea2df254183ad2bcd7db247e305"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-8433ff87295d11a58e541fdcaf9e9b8fdd72c0cca9014bd21b888ae4a5b137d2-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:8433ff87295d11a58e541fdcaf9e9b8fdd72c0cca9014bd21b888ae4a5b137d2"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:8433ff87295d11a58e541fdcaf9e9b8fdd72c0cca9014bd21b888ae4a5b137d2"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.1-2",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:88fcb05f7ce2ea8466fd7cb08481f4844b89e3ab7377eda4331a0b5348e43903",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.1-2"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:a8d1c3769af997049db0e3efd6057daeb12d3645eaedc4145346c60169799585",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://kogito.kie.org/"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://github.com/kiegroup/kogito-operator/blob/main/README.md"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/rhpam-kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:f83757d41e87b2b689f35589902d04cef90b221b5f863656651a67291b6ed744"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:88fcb05f7ce2ea8466fd7cb08481f4844b89e3ab7377eda4331a0b5348e43903"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-a8d1c3769af997049db0e3efd6057daeb12d3645eaedc4145346c60169799585-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:a8d1c3769af997049db0e3efd6057daeb12d3645eaedc4145346c60169799585"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:a8d1c3769af997049db0e3efd6057daeb12d3645eaedc4145346c60169799585"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.2-1",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:e0d045d14d4a8ab13b27f0aca44ca0c84a7bffb0959fe0251cef698df6ad7a53",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.2-1"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:dc27927b937cb6b8550c2cad0002bc080415acf25b81005779cc7ec5c77dc375",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:ac54cb8ff880a935ea3b4b1efc96d35bbf973342c450400d6417d06e59050027"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:e0d045d14d4a8ab13b27f0aca44ca0c84a7bffb0959fe0251cef698df6ad7a53"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-dc27927b937cb6b8550c2cad0002bc080415acf25b81005779cc7ec5c77dc375-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:dc27927b937cb6b8550c2cad0002bc080415acf25b81005779cc7ec5c77dc375"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:dc27927b937cb6b8550c2cad0002bc080415acf25b81005779cc7ec5c77dc375"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.2-2",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:189d10663529febfc3c090befccac306e0ade44f532752d990880b5d605c528c",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.2-2"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:7d62a0efc363c303d211794430e3a30bed7684c55e8488583d8ec116ec28663e",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:5bd6245bb0270aaf436e629dc301bc6f7925361883f765413cf426a9f00b8152"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:189d10663529febfc3c090befccac306e0ade44f532752d990880b5d605c528c"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-7d62a0efc363c303d211794430e3a30bed7684c55e8488583d8ec116ec28663e-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:7d62a0efc363c303d211794430e3a30bed7684c55e8488583d8ec116ec28663e"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:7d62a0efc363c303d211794430e3a30bed7684c55e8488583d8ec116ec28663e"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.2-3",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:9fad9fb9acf170c809bfd14da518a45fec3605851cf852a59be93fdcd8348c6e",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.2-3"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:cce98efe6d84cc8f2e6a08af66aeab31870947a1fae413810944f4a26687a8b3",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:acb74b8d940c86acc90c77a0acefc1da627f2242f26f3ec2d043722bea3da4ad"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:9fad9fb9acf170c809bfd14da518a45fec3605851cf852a59be93fdcd8348c6e"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-cce98efe6d84cc8f2e6a08af66aeab31870947a1fae413810944f4a26687a8b3-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:cce98efe6d84cc8f2e6a08af66aeab31870947a1fae413810944f4a26687a8b3"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:cce98efe6d84cc8f2e6a08af66aeab31870947a1fae413810944f4a26687a8b3"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.3-1",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:2bdac0334b59f7b3c962dd36958ca4b725ce10a2382b5e00dfe820fac84618bb",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.3-1"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:a521bf6d16387be39e4972f2f726a05b78f5fcf75046f5dea44bc1d51e9de28d",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:e491bf48aa985bdc7410ace4184c8e9d8fad3e7f403fe1e14d9603013f9ed400"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:2bdac0334b59f7b3c962dd36958ca4b725ce10a2382b5e00dfe820fac84618bb"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-a521bf6d16387be39e4972f2f726a05b78f5fcf75046f5dea44bc1d51e9de28d-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:a521bf6d16387be39e4972f2f726a05b78f5fcf75046f5dea44bc1d51e9de28d"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:a521bf6d16387be39e4972f2f726a05b78f5fcf75046f5dea44bc1d51e9de28d"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.4-1",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:2896282fd2a38c0a6b9d0b41d9091d76466208a9b1a6c68a3f76e91959c2d834",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.4-1"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:842ce3fa17c525094a88ef005d132df6681715ae70d0dc6d66055796cc12ffc7",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:978b5c38eab15c0d79f9ab56bf795357b76fe1d7e6747ef454d06f7db5cb509e"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:2896282fd2a38c0a6b9d0b41d9091d76466208a9b1a6c68a3f76e91959c2d834"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-842ce3fa17c525094a88ef005d132df6681715ae70d0dc6d66055796cc12ffc7-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:842ce3fa17c525094a88ef005d132df6681715ae70d0dc6d66055796cc12ffc7"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:842ce3fa17c525094a88ef005d132df6681715ae70d0dc6d66055796cc12ffc7"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.4-2",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:65f4db25e0fa2348279061a29f8f137494918362d152a42946dfc9d8dcb4f343",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.4-2"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:cc8d169c0d1349dae86f6ca983e8191d5af97041cfe1de11d3380f7c79a27a72",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:cbba78b82051e4ba81a5abb883716743f09ef323566fd469f8ab95d24cb2e25f"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:65f4db25e0fa2348279061a29f8f137494918362d152a42946dfc9d8dcb4f343"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-cc8d169c0d1349dae86f6ca983e8191d5af97041cfe1de11d3380f7c79a27a72-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:cc8d169c0d1349dae86f6ca983e8191d5af97041cfe1de11d3380f7c79a27a72"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:cc8d169c0d1349dae86f6ca983e8191d5af97041cfe1de11d3380f7c79a27a72"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.4-3",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:4553c12fa6f1a41b098efb333ce15d062eeea289b2bed5b2fd3075f5d4bb8cc8",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.4-3"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:b9a3833bbf205237fa94bbae68d289ff55ef4890809dc4c17248b9f273e93f5a",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:1e6858e220aac7c3dd72720343387816ea057fd79c7d2f3a7b1f616268d154c5"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:4553c12fa6f1a41b098efb333ce15d062eeea289b2bed5b2fd3075f5d4bb8cc8"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-b9a3833bbf205237fa94bbae68d289ff55ef4890809dc4c17248b9f273e93f5a-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:b9a3833bbf205237fa94bbae68d289ff55ef4890809dc4c17248b9f273e93f5a"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:b9a3833bbf205237fa94bbae68d289ff55ef4890809dc4c17248b9f273e93f5a"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.5-1",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:c2e62c5ff345c59f88b556ad5d9c7bc2bceaebe33b4c1eaae29299d28b892acc",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.5-1"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:98b4f282de82759efe24c2d8ea29416bac1413fe9ba925aee3fda6a2301fdd90",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:75adbc384463d1fdde83c867c86bdb86a7275d18f3bdbcdc258577a723c0b46b"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:c2e62c5ff345c59f88b556ad5d9c7bc2bceaebe33b4c1eaae29299d28b892acc"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-98b4f282de82759efe24c2d8ea29416bac1413fe9ba925aee3fda6a2301fdd90-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:98b4f282de82759efe24c2d8ea29416bac1413fe9ba925aee3fda6a2301fdd90"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:98b4f282de82759efe24c2d8ea29416bac1413fe9ba925aee3fda6a2301fdd90"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.5-2",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:234431658d1bc7237b63b6c6d9c72284fc1cf2aa46f237723fb3b4cdc77e9c0c",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.5-2"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:2de42279c5f32a9c8f4dee352de035f80e520e40319fcd2072aef699ae4b9e33",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "features.operators.openshift.io/disconnected": "false",
                    "features.operators.openshift.io/fips-compliant": "false",
                    "features.operators.openshift.io/proxy-aware": "false",
                    "features.operators.openshift.io/tls-profiles": "false",
                    "features.operators.openshift.io/token-auth-aws": "false",
                    "features.operators.openshift.io/token-auth-azure": "false",
                    "features.operators.openshift.io/token-auth-gcp": "false",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:9492c67eaa7ab37df6f5fa623c4aac955b7d7ffaab9ae2e57dea745e82907e40"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:234431658d1bc7237b63b6c6d9c72284fc1cf2aa46f237723fb3b4cdc77e9c0c"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-2de42279c5f32a9c8f4dee352de035f80e520e40319fcd2072aef699ae4b9e33-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:2de42279c5f32a9c8f4dee352de035f80e520e40319fcd2072aef699ae4b9e33"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:2de42279c5f32a9c8f4dee352de035f80e520e40319fcd2072aef699ae4b9e33"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.5-3",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:6c9c57b1a65161a322589282bf8eabe740235616e5246590b0c640a33cc6697d",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.5-3"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:5e2813ab7a033523291daea70d4bf75275861f92ed38bd2efff950d51c7cf02e",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "features.operators.openshift.io/disconnected": "false",
                    "features.operators.openshift.io/fips-compliant": "false",
                    "features.operators.openshift.io/proxy-aware": "false",
                    "features.operators.openshift.io/tls-profiles": "false",
                    "features.operators.openshift.io/token-auth-aws": "false",
                    "features.operators.openshift.io/token-auth-azure": "false",
                    "features.operators.openshift.io/token-auth-gcp": "false",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:9492c67eaa7ab37df6f5fa623c4aac955b7d7ffaab9ae2e57dea745e82907e40"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:6c9c57b1a65161a322589282bf8eabe740235616e5246590b0c640a33cc6697d"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-5e2813ab7a033523291daea70d4bf75275861f92ed38bd2efff950d51c7cf02e-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:5e2813ab7a033523291daea70d4bf75275861f92ed38bd2efff950d51c7cf02e"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:5e2813ab7a033523291daea70d4bf75275861f92ed38bd2efff950d51c7cf02e"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.7.13.5-4",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:0192000a2994a62a904ce4aabfc1ff04caf2fa9d779d27c016922b9121877fac",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoSupportingService",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.13.5-4"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoSupportingService\",\n    \"metadata\": {\n      \"name\": \"kogito-jobs-service\"\n    },\n    \"spec\": {\n      \"replicas\": 1,\n      \"serviceType\": \"JobsService\"\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:19497d4aff0ea3ea114dccb0d0e265458bb14ba6d325353eb82b554547dbd2e4",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "features.operators.openshift.io/disconnected": "false",
                    "features.operators.openshift.io/fips-compliant": "false",
                    "features.operators.openshift.io/proxy-aware": "false",
                    "features.operators.openshift.io/tls-profiles": "false",
                    "features.operators.openshift.io/token-auth-aws": "false",
                    "features.operators.openshift.io/token-auth-azure": "false",
                    "features.operators.openshift.io/token-auth-gcp": "false",
                    "operators.openshift.io/valid-subscription": "[\"Red Hat Process Automation Manager\", \"Red Hat Decision Manager\"]",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.21.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster.",
                            "resources": [
                                {
                                    "name": "A Openshift Build Config",
                                    "kind": "BuildConfig",
                                    "version": "build.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Image Stream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "builds",
                                    "displayName": "Builds",
                                    "description": "History of builds"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "latestBuild",
                                    "displayName": "Latest Build"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "artifact",
                                    "displayName": "Final Artifact",
                                    "description": "Artifact contains override information for building the Maven artifact (used for Local Source builds). \n You might want to override this information when building from decisions, rules or process files. In this scenario the Kogito Images will generate a new Java project for you underneath. This information will be used to generate this project."
                                },
                                {
                                    "path": "buildImage",
                                    "displayName": "Build Image",
                                    "description": "Image used to build the Kogito Service from source (Local and Remote). \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "disableIncremental",
                                    "displayName": "Disable Incremental Builds",
                                    "description": "DisableIncremental indicates that source to image builds should NOT be incremental. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "enableMavenDownloadOutput",
                                    "displayName": "Enable Maven Download Output",
                                    "description": "If set to true will print the logs for downloading/uploading of maven dependencies. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Build Env Variables",
                                    "description": "Environment variables used during build time."
                                },
                                {
                                    "path": "gitSource",
                                    "displayName": "Kogito Git Source",
                                    "description": "Information about the git repository where the Kogito Service source code resides. \n Ignored for binary builds."
                                },
                                {
                                    "path": "gitSource.contextDir",
                                    "displayName": "Git Context",
                                    "description": "Context/subdirectory where the code is located, relative to the repo root."
                                },
                                {
                                    "path": "gitSource.reference",
                                    "displayName": "Git Reference",
                                    "description": "Branch to use in the Git repository."
                                },
                                {
                                    "path": "gitSource.uri",
                                    "displayName": "Git URI",
                                    "description": "Git URI for the s2i source."
                                },
                                {
                                    "path": "mavenMirrorURL",
                                    "displayName": "Maven Mirror URL",
                                    "description": "Maven Mirror URL to be used during source-to-image builds (Local and Remote) to considerably increase build speed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "native",
                                    "displayName": "Native Build",
                                    "description": "Native indicates if the Kogito Service built should be compiled to run on native mode when Runtime is Quarkus (Source to Image build only). \n For more information, see https://www.graalvm.org/docs/reference-manual/aot-compilation/.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Resources Requirements for builder pods.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "Which runtime Kogito service base image to use when building the Kogito service. If \"BuildImage\" is set, this value is ignored by the operator. Default value: quarkus."
                                },
                                {
                                    "path": "runtimeImage",
                                    "displayName": "Base Image",
                                    "description": "Image used as the base image for the final Kogito service. This image only has the required packages to run the application. \n For example: quarkus based services will have only JVM installed, native services only the packages required by the OS. \n If not defined the operator will use image provided by the Kogito Team based on the \"Runtime\" field. \n Example: \"quay.io/kiegroup/kogito-jvm-builder:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "targetKogitoRuntime",
                                    "displayName": "Target kogito Runtime",
                                    "description": "Set this field targeting the desired KogitoRuntime when this KogitoBuild instance has a different name than the KogitoRuntime. \n By default this KogitoBuild instance will generate a final image named after its own name (.metadata.name). \n On OpenShift, an ImageStream will be created causing a redeployment on any KogitoRuntime with the same name. On Kubernetes, the final image will be pushed to the KogitoRuntime deployment. \n If you have multiple KogitoBuild instances (let's say BinaryBuildType and Remote Source), you might need that both target the same KogitoRuntime. Both KogitoBuilds will update the same ImageStream or generate a final image to the same KogitoRuntime deployment."
                                },
                                {
                                    "path": "type",
                                    "displayName": "Build Type",
                                    "description": "Sets the type of build that this instance will handle: \n Binary - takes an uploaded binary file already compiled and creates a Kogito service image from it. \n RemoteSource - pulls the source code from a Git repository, builds the binary and then the final Kogito service image. \n LocalSource - takes an uploaded resource file such as DRL (rules), DMN (decision) or BPMN (process), builds the binary and the final Kogito service image."
                                }
                            ]
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. \n It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service (custom or supporting, such as Data Index). \n Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information.",
                            "resources": [
                                {
                                    "name": "A Infinispan instance",
                                    "kind": "Infinispan",
                                    "version": "infinispan.org/v1"
                                },
                                {
                                    "name": "A Kafka instance",
                                    "kind": "Kafka",
                                    "version": "kafka.strimzi.io/v1beta2"
                                },
                                {
                                    "name": "A Keycloak Instance",
                                    "kind": "Keycloak",
                                    "version": "keycloak.org/v1alpha1"
                                },
                                {
                                    "name": "A Kubernetes Secret",
                                    "kind": "Secret",
                                    "version": "v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of Configmap that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added as volume mount to this infra instance"
                                },
                                {
                                    "path": "env",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be added as volume mount to this infra instance"
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "configMapEnvFromReferences",
                                    "displayName": "Config Map Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "configMapVolumeReferences",
                                    "displayName": "Config Map Volume References",
                                    "description": "List of configmap that should be added to the services bound to this infra instance"
                                },
                                {
                                    "path": "envs",
                                    "displayName": "Envs",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "infraProperties",
                                    "displayName": "Infra Properties",
                                    "description": "Optional properties which would be needed to setup correct runtime/service configuration, based on the resource type. \n For example, MongoDB will require `username` and `database` as properties for a correct setup, else it will fail"
                                },
                                {
                                    "path": "resource",
                                    "displayName": "Resource",
                                    "description": "Resource for the service. Example: Infinispan/Kafka/Keycloak."
                                },
                                {
                                    "path": "resource.apiVersion",
                                    "displayName": "APIVersion",
                                    "description": "APIVersion describes the API Version of referred Kubernetes resource for example, infinispan.org/v1"
                                },
                                {
                                    "path": "resource.kind",
                                    "displayName": "Kind",
                                    "description": "Kind describes the kind of referred Kubernetes resource for example, Infinispan"
                                },
                                {
                                    "path": "resource.name",
                                    "displayName": "Name",
                                    "description": "Name of referred resource."
                                },
                                {
                                    "path": "resource.namespace",
                                    "displayName": "Namespace",
                                    "description": "Namespace where referred resource exists."
                                },
                                {
                                    "path": "secretEnvFromReferences",
                                    "displayName": "Secret Env From References",
                                    "description": "List of secret that should be mounted to the services as envs"
                                },
                                {
                                    "path": "secretVolumeReferences",
                                    "displayName": "Secret Volume References",
                                    "description": "List of secret that should be munted to the services bound to this infra instance"
                                }
                            ]
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service.",
                            "resources": [
                                {
                                    "name": "A Kubernetes ConfigMap",
                                    "kind": "ConfigMap",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "enableIstio",
                                    "displayName": "Enable Istio",
                                    "description": "Annotates the pods managed by the operator with the required metadata for Istio to setup its sidecars, enabling the mesh. Defaults to false.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "runtime",
                                    "displayName": "Runtime",
                                    "description": "The name of the runtime used, either Quarkus or SpringBoot. \n Default value: quarkus"
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        },
                        {
                            "name": "kogitosupportingservices.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoSupportingService",
                            "displayName": "Kogito Supporting Service",
                            "description": "KogitoSupportingService deploys the Supporting service in the given namespace.",
                            "resources": [
                                {
                                    "name": "A Kubernetes Deployment",
                                    "kind": "Deployment",
                                    "version": "apps/v1"
                                },
                                {
                                    "name": "A Kubernetes Service",
                                    "kind": "Service",
                                    "version": "v1"
                                },
                                {
                                    "name": "A Openshift ImageStream",
                                    "kind": "ImageStream",
                                    "version": "image.openshift.io/v1"
                                },
                                {
                                    "name": "A Openshift Route",
                                    "kind": "Route",
                                    "version": "route.openshift.io/v1"
                                }
                            ],
                            "statusDescriptors": [
                                {
                                    "path": "cloudEvents",
                                    "displayName": "Cloud Events",
                                    "description": "Describes the CloudEvents that this instance can consume or produce"
                                },
                                {
                                    "path": "cloudEvents.consumes",
                                    "displayName": "Consumes"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.consumes[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "cloudEvents.produces",
                                    "displayName": "Produces"
                                },
                                {
                                    "path": "cloudEvents.produces[0].source",
                                    "displayName": "Source"
                                },
                                {
                                    "path": "cloudEvents.produces[0].type",
                                    "displayName": "Type"
                                },
                                {
                                    "path": "conditions",
                                    "displayName": "Conditions",
                                    "description": "History of conditions for the resource",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "deploymentConditions",
                                    "displayName": "Deployment Conditions",
                                    "description": "General conditions for the Kogito Service deployment.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes.conditions"
                                    ]
                                },
                                {
                                    "path": "externalURI",
                                    "displayName": "External URI",
                                    "description": "URI is where the service is exposed.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:org.w3:link"
                                    ]
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image is the resolved image for this service."
                                }
                            ],
                            "specDescriptors": [
                                {
                                    "path": "config",
                                    "displayName": "Configs",
                                    "description": "Application properties that will be set to the service. For example 'MY_VAR: my_value'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "deploymentLabels",
                                    "displayName": "Additional Deployment Labels",
                                    "description": "Additional labels to be added to the Deployment and Pods managed by the operator."
                                },
                                {
                                    "path": "env",
                                    "displayName": "Env",
                                    "description": "Environment variables to be added to the runtime container. Keys must be a C_IDENTIFIER."
                                },
                                {
                                    "path": "image",
                                    "displayName": "Image",
                                    "description": "Image definition for the service. Example: \"quay.io/kiegroup/kogito-service:latest\". \n On OpenShift an ImageStream will be created in the current namespace pointing to the given image.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:text"
                                    ]
                                },
                                {
                                    "path": "insecureImageRegistry",
                                    "displayName": "Insecure Image Registry",
                                    "description": "A flag indicating that image streams created by Kogito Operator should be configured to allow pulling from insecure registries. Usable just on OpenShift. \n Defaults to 'false'.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                                    ]
                                },
                                {
                                    "path": "propertiesConfigMap",
                                    "displayName": "ConfigMap Properties",
                                    "description": "Custom ConfigMap with application.properties file to be mounted for the Kogito service. \n The ConfigMap must be created in the same namespace. \n Use this property if you need custom properties to be mounted before the application deployment. \n If left empty, one will be created for you. Later it can be updated to add any custom properties to apply to the service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:ConfigMap"
                                    ]
                                },
                                {
                                    "path": "replicas",
                                    "displayName": "Replicas",
                                    "description": "Number of replicas that the service will have deployed in the cluster. \n Default value: 1.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:podCount"
                                    ]
                                },
                                {
                                    "path": "resources",
                                    "displayName": "Resources",
                                    "description": "Defined compute resource requirements for the deployed service.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                                    ]
                                },
                                {
                                    "path": "serviceLabels",
                                    "displayName": "Additional Service Labels",
                                    "description": "Additional labels to be added to the Service managed by the operator."
                                },
                                {
                                    "path": "serviceType",
                                    "displayName": "Service Type",
                                    "description": "Defines the type for the supporting service, eg: DataIndex, JobsService Default value: JobsService"
                                },
                                {
                                    "path": "trustStoreSecret",
                                    "displayName": "Trust Store Secret",
                                    "description": "Custom JKS TrustStore that will be used by this service to make calls to TLS endpoints. \n It's expected that the secret has two keys: `keyStorePassword` containing the password for the KeyStore and `cacerts` containing the binary data of the given KeyStore.",
                                    "x-descriptors": [
                                        "urn:alm:descriptor:io.kubernetes:Secret"
                                    ]
                                }
                            ]
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_process_automation_manager/7.13/html/getting_started_with_red_hat_build_of_kogito_in_red_hat_process_automation_manager/assembly-deploying-kogito-microservices-on-openshift"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:9492c67eaa7ab37df6f5fa623c4aac955b7d7ffaab9ae2e57dea745e82907e40"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:0192000a2994a62a904ce4aabfc1ff04caf2fa9d779d27c016922b9121877fac"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-19497d4aff0ea3ea114dccb0d0e265458bb14ba6d325353eb82b554547dbd2e4-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:19497d4aff0ea3ea114dccb0d0e265458bb14ba6d325353eb82b554547dbd2e4"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:19497d4aff0ea3ea114dccb0d0e265458bb14ba6d325353eb82b554547dbd2e4"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.v7.12.0-2",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:ed8b2000b90cda466a92135fcdc610d53c3ce2d345fd93aa3b070789196d5fde",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.12.0-2"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:b1d965fa04ad0af764b9ba71bc686a6efadf9f6882cdbbe7bd48e8de2dce378c",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.2.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v2",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster."
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service. Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information."
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service."
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "labels": {
                    "operator-kogitocloud": "true",
                    "operatorframework.io/arch.amd64": "supported",
                    "operatorframework.io/arch.ppc64le": "supported"
                },
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.12/html/getting_started_with_red_hat_decision_manager/proc-kogito-microservices-deploying-on-openshift_getting-started-kogito-microservices"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/rhpam-kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:ba5426d9d97a3815c489649c782c44f29f9b21053936a6a5a80b221f3d36e4c2"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:ed8b2000b90cda466a92135fcdc610d53c3ce2d345fd93aa3b070789196d5fde"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-b1d965fa04ad0af764b9ba71bc686a6efadf9f6882cdbbe7bd48e8de2dce378c-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:b1d965fa04ad0af764b9ba71bc686a6efadf9f6882cdbbe7bd48e8de2dce378c"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:b1d965fa04ad0af764b9ba71bc686a6efadf9f6882cdbbe7bd48e8de2dce378c"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.v7.12.0-3",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:53f27bf3362240c4518460558b832922079a8d7620a128da81527c858aa4769b",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.12.0-3"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:bf2f6d39a8aea45b030b92ff03eabe4ba266906412b03234b8a2d56a16232cfc",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.2.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v2",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster."
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service. Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information."
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service."
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "labels": {
                    "operator-kogitocloud": "true",
                    "operatorframework.io/arch.amd64": "supported",
                    "operatorframework.io/arch.ppc64le": "supported"
                },
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.12/html/getting_started_with_red_hat_decision_manager/proc-kogito-microservices-deploying-on-openshift_getting-started-kogito-microservices"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/rhpam-kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:2a665bc4fba791f9d32e6920ef2623e47f451aabba4d1abafa0b9b409572f953"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:53f27bf3362240c4518460558b832922079a8d7620a128da81527c858aa4769b"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-bf2f6d39a8aea45b030b92ff03eabe4ba266906412b03234b8a2d56a16232cfc-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:bf2f6d39a8aea45b030b92ff03eabe4ba266906412b03234b8a2d56a16232cfc"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:bf2f6d39a8aea45b030b92ff03eabe4ba266906412b03234b8a2d56a16232cfc"
        }
    ]
}
{
    "schema": "olm.bundle",
    "name": "rhpam-kogito-operator.v7.12.0-4",
    "package": "rhpam-kogito-operator",
    "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:3c4755977ed2a86baa7ecb0dd691ce0d45800bed51e1ac984c36946d529f21df",
    "properties": [
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoBuild",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoInfra",
                "version": "v1"
            }
        },
        {
            "type": "olm.gvk",
            "value": {
                "group": "rhpam.kiegroup.org",
                "kind": "KogitoRuntime",
                "version": "v1"
            }
        },
        {
            "type": "olm.package",
            "value": {
                "packageName": "rhpam-kogito-operator",
                "version": "7.12.0-4"
            }
        },
        {
            "type": "olm.csv.metadata",
            "value": {
                "annotations": {
                    "alm-examples": "[\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoBuild\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"gitSource\": {\n        \"contextDir\": \"ruleunit-quarkus-example\",\n        \"uri\": \"https://github.com/kiegroup/kogito-examples\"\n      },\n      \"type\": \"RemoteSource\"\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoInfra\",\n    \"metadata\": {\n      \"name\": \"kogitoinfra-sample\"\n    },\n    \"spec\": {\n      \"resource\": {\n        \"apiVersion\": \"kafka.strimzi.io/v1beta2\",\n        \"kind\": \"Kafka\",\n        \"name\": \"kogito-kafka\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"rhpam.kiegroup.org/v1\",\n    \"kind\": \"KogitoRuntime\",\n    \"metadata\": {\n      \"name\": \"ruleunit-quarkus-example\"\n    },\n    \"spec\": {\n      \"replicas\": 1\n    }\n  }\n]",
                    "capabilities": "Basic Install",
                    "categories": "Integration & Delivery",
                    "certified": "true",
                    "containerImage": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:d6aa216fe31a766eaf58c2cfcf81ff1c9e2b56884ded539bee6a4107a32d3117",
                    "description": "RHPAM Kogito Operator for deployment and management of Kogito services.",
                    "operators.operatorframework.io/builder": "operator-sdk-v1.2.0",
                    "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v2",
                    "repository": "https://github.com/kiegroup/rhpam-kogito-operator",
                    "support": "Red Hat",
                    "tectonic-visibility": "ocs"
                },
                "apiServiceDefinitions": {},
                "crdDescriptions": {
                    "owned": [
                        {
                            "name": "kogitobuilds.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoBuild",
                            "displayName": "Kogito Build",
                            "description": "KogitoBuild handles how to build a custom Kogito service in a Kubernetes/OpenShift cluster."
                        },
                        {
                            "name": "kogitoinfras.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoInfra",
                            "displayName": "Kogito Infra",
                            "description": "KogitoInfra is the resource to bind a Custom Resource (CR) not managed by Kogito Operator to a given deployed Kogito service. It holds the reference of a CR managed by another operator such as Strimzi. For example: one can create a Kafka CR via Strimzi and link this resource using KogitoInfra to a given Kogito service. Please refer to the Kogito Operator documentation (https://docs.jboss.org/kogito/release/latest/html_single/) for more information."
                        },
                        {
                            "name": "kogitoruntimes.rhpam.kiegroup.org",
                            "version": "v1",
                            "kind": "KogitoRuntime",
                            "displayName": "Kogito Runtime",
                            "description": "KogitoRuntime is a custom Kogito service."
                        }
                    ]
                },
                "description": "RHPAM Kogito Operator is designed for deployment and management of Kogito services from source (only on OpenShift) and every piece of infrastructure that the services might need:\n\n* Builds a RHPAM Kogito service from a remote git repository and creates a custom image for the given runtime: Red Hat build of Quarkus or Springboot. [See more](https://docs.jboss.org/kogito/release/latest/html_single/#con-kogito-operator-deployment-options_kogito-deploying-on-openshift).\n* Deploy RHPAM Kogito service from user provided image.\n* Setup Grafana Dashboard when Grafana Operator is available in cluster.\n* Create Prometheus monitor object when Prometheus operator is available in cluster.\n\n**IMPORTANT!** RHPAM Kogito Operator may need Grafana and Prometheus Operator to configure monitoring in cases if you do not provide these services beforehand. If you need these features to be automatically provisioned for you, bear in mind that those operators must be installed in the same namespace as the RHPAM Kogito Operator.",
                "displayName": "RHPAM Kogito Operator",
                "installModes": [
                    {
                        "type": "OwnNamespace",
                        "supported": true
                    },
                    {
                        "type": "SingleNamespace",
                        "supported": true
                    },
                    {
                        "type": "MultiNamespace",
                        "supported": true
                    },
                    {
                        "type": "AllNamespaces",
                        "supported": true
                    }
                ],
                "keywords": [
                    "cloud",
                    "kogito",
                    "quarkus",
                    "springboot",
                    "operator",
                    "native",
                    "automation"
                ],
                "labels": {
                    "operator-kogitocloud": "true",
                    "operatorframework.io/arch.amd64": "supported",
                    "operatorframework.io/arch.ppc64le": "supported"
                },
                "links": [
                    {
                        "name": "Product Page",
                        "url": "https://access.redhat.com/products/red-hat-process-automation-manager"
                    },
                    {
                        "name": "Documentation",
                        "url": "https://access.redhat.com/documentation/en-us/red_hat_decision_manager/7.12/html/getting_started_with_red_hat_decision_manager/proc-kogito-microservices-deploying-on-openshift_getting-started-kogito-microservices"
                    },
                    {
                        "name": "Source",
                        "url": "https://github.com/kiegroup/rhpam-kogito-operator/"
                    }
                ],
                "maintainers": [
                    {
                        "name": "Red Hat",
                        "email": "bsig-cloud@redhat.com"
                    }
                ],
                "maturity": "beta",
                "provider": {
                    "name": "Red Hat"
                }
            }
        }
    ],
    "relatedImages": [
        {
            "name": "kube-rbac-proxy",
            "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:af49f9410980545c47514bf8191d88dc0640e7698c74581f66f87e3205360d60"
        },
        {
            "name": "",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator-bundle@sha256:3c4755977ed2a86baa7ecb0dd691ce0d45800bed51e1ac984c36946d529f21df"
        },
        {
            "name": "rhpam-kogito-rhel8-operator-d6aa216fe31a766eaf58c2cfcf81ff1c9e2b56884ded539bee6a4107a32d3117-annotation",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:d6aa216fe31a766eaf58c2cfcf81ff1c9e2b56884ded539bee6a4107a32d3117"
        },
        {
            "name": "manager",
            "image": "registry.redhat.io/rhpam-7/rhpam-kogito-rhel8-operator@sha256:d6aa216fe31a766eaf58c2cfcf81ff1c9e2b56884ded539bee6a4107a32d3117"
        }
    ]
}
