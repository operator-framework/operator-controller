version: '3'

includes:
  tools:
    taskfile: .taskfile.tools.yaml
    internal: true

vars:
  BIN: "{{.ROOT_DIR}}/bin"
  KUSTOMIZE_DIR: "config/default"
  OPERATOR_CONTROLLER_MANIFEST: ./operator-controller.yaml

  OLMV0_VERSION: v0.24.0
  CERT_MANAGER_VERSION: v1.9.0
  RUKPAK_VERSION: v0.11.0

env:
  IMAGE_REPO: quay.io/operator-framework/operator-controller
  IMAGE_TAG: devel

tasks:
  generate:
    desc: "Run code generation"
    summary: |
      This task runs go generate and controller-gen to generate code, CRDs, 
      webhook configurations, and RBAC manifests.
    cmds:
      - go generate ./...
      - "{{.TOOLSBIN}}/controller-gen object:headerFile=hack/boilerplate.go.txt paths=./..."
      - "{{.TOOLSBIN}}/controller-gen rbac:roleName=manager-role crd webhook paths=./... output:crd:artifacts:config=config/crd/bases"
    deps: [tools:controller-gen]

  binary:
    desc: "Build the binaries for the current OS"
    summary: |
      This task uses goreleaser to build the operator binary based on GOOS and GOARCH.
      By default, the binary is created at ./bin/manager.
      
      To generate the binary for a different OS, set the GOOS task variable accordingly.

      The GO_COVER task variable instruments the operator with coverage enabled when set to "true"
      or disabled when set to "false". The default is "false".
    env:
      GOOS: "{{.GOOS}}"
      GO_COVER: '{{.GO_COVER | default "false" }}'
      GO_BUILD_TAGS: "{{.GO_BUILD_TAGS}}"
    cmds:
      - mkdir -p {{.BIN}}
      - "{{.TOOLSBIN}}/goreleaser build --debug --single-target --snapshot --clean --output {{.BIN}}/manager"
    deps: [tools:goreleaser, generate]

  docker:
    desc: "Build the docker image"
    summary: |
      This task builds the operator's linux binary in {{.BIN}}/linux and then uses
      the Dockerfile to build the docker image in {{.BIN}}/linux.
      
      GOARCH is taken from the environment to ensure a binary that will run on the local
      machine. GOOS is always set to `linux` for the docker build.
      
      By default, the image is tagged as quay.io/operator-framework/operator-controller:devel.
      You can control the image repo and tag by setting the IMAGE_REPO and IMAGE_TAG
      environment variables.
    cmds:
      - docker build -f Dockerfile -t $IMAGE_REPO:$IMAGE_TAG bin/linux
    deps:
      - task: binary
        vars:
          BIN: "{{.ROOT_DIR}}/bin/linux"
          GOOS: linux
          GO_COVER: "{{.GO_COVER}}"

  manifest:
    desc: "Generate the operator manifest"
    summary: |
      This task uses kustomize to generate the operator manifest.
      
      The operator manifest is generated by combining the CRD and default manifests
      with the controller image set to the IMAGE_REPO and IMAGE_TAG environment variables.
    cmds:
      - cd config/manager && {{.TOOLSBIN}}/kustomize edit set image controller=$IMAGE_REPO:$IMAGE_TAG
      - "{{.TOOLSBIN}}/kustomize build {{.KUSTOMIZE_DIR}} > {{.OPERATOR_CONTROLLER_MANIFEST}}"
    deps: [tools:kustomize, generate]

  install-script:
    desc: "Generate the install script"
    summary: |
      This task generates the install script that can be used to install the operator.
      
      The OPERATOR_CONTROLLER_MANIFEST task variable is used to set the location that
      will be used to `kubectl apply -f` the operator-controller manifest. By default,
      this is set to `./operator-controller.yaml`. However this can be overridden during
      a release to reference the release manifest URL that is uploaded to GitHub during
      the release.
    silent: true
    cmds:
      - |
        cat << EOF > ./install.sh
        #!/usr/bin/env bash
        set -o pipefail -o errexit -o nounset

        # Install OLMv0
        curl -L -s https://github.com/operator-framework/operator-lifecycle-manager/releases/download/{{.OLMV0_VERSION}}/install.sh | bash -s {{.OLMV0_VERSION}}

        # Install cert-manager
        kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/{{.CERT_MANAGER_VERSION}}/cert-manager.yaml
        kubectl wait --for=condition=Available --namespace=cert-manager deployment/cert-manager-webhook --timeout=60s

        # Install rukpak
        kubectl apply -f https://github.com/operator-framework/rukpak/releases/download/{{.RUKPAK_VERSION}}/rukpak.yaml
        kubectl wait --for=condition=Available --namespace=rukpak-system deployment/core --timeout=60s
        kubectl wait --for=condition=Available --namespace=rukpak-system deployment/helm-provisioner --timeout=60s
        kubectl wait --for=condition=Available --namespace=rukpak-system deployment/rukpak-webhooks --timeout=60s
        kubectl wait --for=condition=Available --namespace=crdvalidator-system deployment/crd-validation-webhook --timeout=60s

        # Install operator-controller
        kubectl apply -f {{.OPERATOR_CONTROLLER_MANIFEST}}
        kubectl wait --for=condition=Available --namespace=operator-controller-system deployment/operator-controller-controller-manager --timeout=60s
        EOF
      - chmod +x ./install.sh
