{
  "schema": "olm.package",
  "name": "netobserv-operator",
  "defaultChannel": "stable",
  "icon": {
    "base64data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0idXRmLTgiPz4KPCEtLSBHZW5lcmF0b3I6IEFkb2JlIElsbHVzdHJhdG9yIDI2LjAuMiwgU1ZHIEV4cG9ydCBQbHVnLUluIC4gU1ZHIFZlcnNpb246IDYuMDAgQnVpbGQgMCkgIC0tPgo8c3ZnIHZlcnNpb249IjEuMSIgaWQ9IkxheWVyXzEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiIHg9IjBweCIgeT0iMHB4IgoJIHZpZXdCb3g9IjAgMCAxMDAgMTAwIiBzdHlsZT0iZW5hYmxlLWJhY2tncm91bmQ6bmV3IDAgMCAxMDAgMTAwOyIgeG1sOnNwYWNlPSJwcmVzZXJ2ZSI+CjxzdHlsZSB0eXBlPSJ0ZXh0L2NzcyI+Cgkuc3Qwe2ZpbGw6dXJsKCNTVkdJRF8xXyk7fQoJLnN0MXtmaWxsOiNGRkZGRkY7fQoJLnN0MntvcGFjaXR5OjAuNjt9Cgkuc3Qze29wYWNpdHk6MC41O30KCS5zdDR7b3BhY2l0eTowLjQ7fQo8L3N0eWxlPgo8Zz4KCTxnPgoJCTxnPgoJCQk8cmFkaWFsR3JhZGllbnQgaWQ9IlNWR0lEXzFfIiBjeD0iMTQuNzc1OCIgY3k9Ii0yLjk3NzEiIHI9IjkxLjYyNyIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiPgoJCQkJPHN0b3AgIG9mZnNldD0iMCIgc3R5bGU9InN0b3AtY29sb3I6IzNDM0ZBNiIvPgoJCQkJPHN0b3AgIG9mZnNldD0iMSIgc3R5bGU9InN0b3AtY29sb3I6IzNCMDM0MCIvPgoJCQk8L3JhZGlhbEdyYWRpZW50PgoJCQk8cGF0aCBjbGFzcz0ic3QwIiBkPSJNNTAsOTljLTEzLjMsMC0yNS40LTUuMy0zNC4yLTEzLjlDNi43LDc2LjIsMSw2My43LDEsNTBDMSwyMi45LDIyLjksMSw1MCwxYzEzLjcsMCwyNi4yLDUuNywzNS4xLDE0LjgKCQkJCUM5My43LDI0LjYsOTksMzYuNyw5OSw1MEM5OSw3Ny4xLDc3LjEsOTksNTAsOTl6Ii8+CgkJPC9nPgoJCTxnPgoJCQk8Y2lyY2xlIGNsYXNzPSJzdDEiIGN4PSIzNy41IiBjeT0iODEuOSIgcj0iNSIvPgoJCTwvZz4KCQk8cGF0aCBjbGFzcz0ic3QxIiBkPSJNNDguNiw5MS45bDE4LjgtNDMuM2MtMi41LTAuMS01LTAuNy03LjItMkwzMy4yLDY4LjJsMS40LTEuOGwyMC0yNS4xYy0xLjUtMi40LTIuMy01LjEtMi4zLTcuOUw5LDUyLjIKCQkJbDQ3LjYtMjkuOWwwLDBjMC4xLTAuMSwwLjItMC4yLDAuMi0wLjJjNi4xLTYuMSwxNS45LTYuMSwyMiwwbDAuMSwwLjFjNiw2LjEsNiwxNS45LTAuMSwyMS45Yy0wLjEsMC4xLTAuMiwwLjItMC4yLDAuMmwwLDAKCQkJTDQ4LjYsOTEuOXoiLz4KCQk8ZyBjbGFzcz0ic3QyIj4KCQkJPGNpcmNsZSBjbGFzcz0ic3QxIiBjeD0iNTAuMyIgY3k9IjE0LjciIHI9IjMuMSIvPgoJCTwvZz4KCQk8ZyBjbGFzcz0ic3QzIj4KCQkJPGNpcmNsZSBjbGFzcz0ic3QxIiBjeD0iMjcuNyIgY3k9IjU4IiByPSIxLjciLz4KCQk8L2c+CgkJPGc+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9Ijc3LjQiIGN5PSI2OS4zIiByPSIxLjciLz4KCQk8L2c+CgkJPGc+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9IjE2LjMiIGN5PSIzNi42IiByPSIxLjciLz4KCQk8L2c+CgkJPGcgY2xhc3M9InN0NCI+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9IjYzLjciIGN5PSI4NS45IiByPSIyLjIiLz4KCQk8L2c+CgkJPGc+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9IjI5LjQiIGN5PSIxOS42IiByPSI0LjgiLz4KCQk8L2c+CgkJPGcgY2xhc3M9InN0MyI+CgkJCTxjaXJjbGUgY2xhc3M9InN0MSIgY3g9Ijg4IiBjeT0iNTAiIHI9IjQuOCIvPgoJCTwvZz4KCTwvZz4KPC9nPgo8L3N2Zz4K",
    "mediatype": "image/svg+xml"
  }
}
{
  "schema": "olm.channel",
  "name": "stable",
  "package": "netobserv-operator",
  "entries": [
    {
      "name": "network-observability-operator.v1.0.0-202301070345"
    },
    {
      "name": "network-observability-operator.v1.1.0-202302110050",
      "replaces": "network-observability-operator.v1.0.0-202301070345"
    },
    {
      "name": "network-observability-operator.v1.2.0",
      "replaces": "network-observability-operator.v1.1.0-202302110050"
    },
    {
      "name": "network-observability-operator.v1.3.0",
      "replaces": "network-observability-operator.v1.2.0"
    },
    {
      "name": "network-observability-operator.v1.4.0",
      "replaces": "network-observability-operator.v1.3.0"
    },
    {
      "name": "network-observability-operator.v1.4.1",
      "replaces": "network-observability-operator.v1.4.0"
    },
    {
      "name": "network-observability-operator.v1.4.2",
      "replaces": "network-observability-operator.v1.4.1"
    },
    {
      "name": "network-observability-operator.v1.5.0",
      "replaces": "network-observability-operator.v1.4.2"
    },
    {
      "name": "network-observability-operator.v1.6.0",
      "replaces": "network-observability-operator.v1.5.0"
    },
    {
      "name": "network-observability-operator.v1.6.1",
      "replaces": "network-observability-operator.v1.6.0"
    },
    {
      "name": "network-observability-operator.v1.6.2",
      "replaces": "network-observability-operator.v1.6.1"
    },
    {
      "name": "network-observability-operator.v1.7.0",
      "replaces": "network-observability-operator.v1.6.2"
    }
  ]
}
{
  "schema": "olm.channel",
  "name": "v1.0.x",
  "package": "netobserv-operator",
  "entries": [
    {
      "name": "network-observability-operator.v1.0.0-202301070345"
    },
    {
      "name": "network-observability-operator.v1.1.0-202302110050",
      "replaces": "network-observability-operator.v1.0.0-202301070345"
    },
    {
      "name": "network-observability-operator.v1.2.0",
      "replaces": "network-observability-operator.v1.1.0-202302110050"
    },
    {
      "name": "network-observability-operator.v1.3.0",
      "replaces": "network-observability-operator.v1.2.0"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.0.0-202301070345",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:04175cc31fb28069f75e5043fad4ae86ccb471ed13b63c6e6aa19a295071e9a6",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.0.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"metrics\": {\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Monitoring",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel8-operator@sha256:fc5f340e486deddc1b5b10a2c3f20f9eec716a2605f74b1f31907cb7d6a64352",
          "createdAt": "2023-01-07T03:45:31",
          "description": "Network flows collector and monitoring solution",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the Schema for the flowcollectors API, which pilots and configures netflow collection."
            }
          ]
        },
        "description": "Network observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network observability eBPF agent.\n\nThe operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.\n\nFor a normal usage, we recommend two options:\n\n- Installing the [Loki Operator](https://docs.openshift.com/container-platform/4.11//logging/cluster-logging-loki.html). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/4.11/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.\n\n- Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a [\"distributed Loki\" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).\n\nFor a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\nkubectl create namespace netobserv\nkubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/3c42f1ff9c775dd0b746a92dc08c043f9a05f47f/examples/zero-click-loki/1-storage.yaml) -n netobserv\nkubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/3c42f1ff9c775dd0b746a92dc08c043f9a05f47f/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.0/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.0/config/samples/flows_v1alpha1_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\nkubectl edit flowcollector cluster\n```\n\nAs it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.0/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`, _experimental_) an optional list of exporters to which to send enriched flows. Currently only KAFKA is supported. This allows you to define any custom storage or processing that can read from Kafka. This feature is flagged as _experimental_ as it has not been thoroughly or stress tested yet, so use at your own risk.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- A [F.A.Q](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Mario Macias",
            "email": "mmaciasl@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel8@sha256:90914aa8e4a2dd1f82873c291b134f316d0637aab74c2663f3121fff54cdc835"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel8@sha256:586fe7c6500847badfbd58035b106201627d465103f1586e510c572818d31471"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel8@sha256:457e0c168f49076970e5dc99daef9f4bf8b165b737aae1d208f90cbae0f93f89"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:04175cc31fb28069f75e5043fad4ae86ccb471ed13b63c6e6aa19a295071e9a6"
    },
    {
      "name": "network-observability-rhel8-operator-fc5f340e486deddc1b5b10a2c3f20f9eec716a2605f74b1f31907cb7d6a64352-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel8-operator@sha256:fc5f340e486deddc1b5b10a2c3f20f9eec716a2605f74b1f31907cb7d6a64352"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel8-operator@sha256:fc5f340e486deddc1b5b10a2c3f20f9eec716a2605f74b1f31907cb7d6a64352"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:7b7e6458e11260b217f2b96f2ce6618d0f6739f8041b28174b31258aecf8fcfb"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.1.0-202302110050",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:757ae641f759f0e62b72947321df4f03430f74917f65c4d04f7f8e67ff7ccca1",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.1.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"metrics\": {\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Monitoring",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel8-operator@sha256:3b22f37d87e610674b57023b22394547134d5c07dd196f8120e6dac52325d4da",
          "createdAt": "2023-02-11T00:50:53",
          "description": "Network flows collector and monitoring solution",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the Schema for the flowcollectors API, which pilots and configures netflow collection."
            }
          ]
        },
        "description": "Network observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network observability eBPF agent.\n\nThe operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.\n\nFor a normal usage, we recommend two options:\n\n- Installing the [Loki Operator](https://docs.openshift.com/container-platform/4.11//logging/cluster-logging-loki.html). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/4.11/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.\n\n- Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a [\"distributed Loki\" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).\n\nFor a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\nkubectl create namespace netobserv\nkubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/3c42f1ff9c775dd0b746a92dc08c043f9a05f47f/examples/zero-click-loki/1-storage.yaml) -n netobserv\nkubectl apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/3c42f1ff9c775dd0b746a92dc08c043f9a05f47f/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.0/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.0/config/samples/flows_v1alpha1_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\nkubectl edit flowcollector cluster\n```\n\nAs it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.0/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`, _experimental_) an optional list of exporters to which to send enriched flows. Currently only KAFKA is supported. This allows you to define any custom storage or processing that can read from Kafka. This feature is flagged as _experimental_ as it has not been thoroughly or stress tested yet, so use at your own risk.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- A [F.A.Q](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Mario Macias",
            "email": "mmaciasl@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel8@sha256:3fe21280040add09090bd129becf3aa88ea96b2b344ad97c3cdf750952ce2803"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel8@sha256:09f95e8df4d3d89cc5404271a07d55c2ba081d3a510993b44308f7e66b590ea5"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel8@sha256:6337adbde9034ebaef300c599f4d74123e46c5e280cf4773193cfd94a0cecb5f"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:757ae641f759f0e62b72947321df4f03430f74917f65c4d04f7f8e67ff7ccca1"
    },
    {
      "name": "network-observability-rhel8-operator-3b22f37d87e610674b57023b22394547134d5c07dd196f8120e6dac52325d4da-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel8-operator@sha256:3b22f37d87e610674b57023b22394547134d5c07dd196f8120e6dac52325d4da"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel8-operator@sha256:3b22f37d87e610674b57023b22394547134d5c07dd196f8120e6dac52325d4da"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a9e2e62b47f1706d59e437d56633e3100332050df27697c264849de9bfb10172"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.2.0",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:9ba226d0207edd7c9173333647353d3a7a0b5bfc32feb60ca5749dd6dc190c28",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.2.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"metrics\": {\n          \"ignoreTags\": [\n            \"flows\",\n            \"bytes\",\n            \"packets\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"ignoreTags\": [\n            \"flows\",\n            \"bytes\",\n            \"packets\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:910ae856998593888cadd4a4f05452b800579e7cd4254c73e03a9d41a8745164",
          "createdAt": "2023-04-12T13:44:37",
          "description": "Network flows collector and monitoring solution",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the Schema for the flowcollectors API, which pilots and configures netflow collection."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the Schema for the flowcollectors API, which pilots and configures netflow collection."
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network Observability eBPF agent.\n\nThe operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.\n\nFor normal usage, we recommend two options:\n\n- Installing the [Loki Operator](https://docs.openshift.com/container-platform/4.11//logging/cluster-logging-loki.html). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/4.11/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.\n\n- Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a [\"distributed Loki\" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).\n\nFor a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.2/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.2/config/samples/flows_v1beta1_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.2/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`, _experimental_) an optional list of exporters to which to send enriched flows. Currently only KAFKA is supported. This allows you to define any custom storage or processing that can read from Kafka. This feature is flagged as _experimental_ as it has not been thoroughly or stress tested yet, so use at your own risk.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Mario Macias",
            "email": "mmaciasl@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:e9045a36eb87e29c01137af2d32c2d45500758e9c2b562a058f3322312282d6b"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:44704b988afdda0c032e5286aa80f13c2f9c4f0a6923103289ad985cb0556d49"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:2732966fe5bc252c0c9e6f0ec0c3f03761327f5ef095369584b32ef54cf35511"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:9ba226d0207edd7c9173333647353d3a7a0b5bfc32feb60ca5749dd6dc190c28"
    },
    {
      "name": "network-observability-rhel9-operator-910ae856998593888cadd4a4f05452b800579e7cd4254c73e03a9d41a8745164-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:910ae856998593888cadd4a4f05452b800579e7cd4254c73e03a9d41a8745164"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:910ae856998593888cadd4a4f05452b800579e7cd4254c73e03a9d41a8745164"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:c9b7a51fccd409451fe5cae7bd15abc00e10c9ac1a2e97232172d39134db9254"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.3.0",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:b03f4e88ab1fed4744356a584d673fb2fdb15de7e1de7786bdd222b853690670",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.3.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"metrics\": {\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"conversationTerminatingTimeout\": \"5s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:fd943746840cba26996dabb47b1beb3445571fa43cb1b859fb073e4aa114b376",
          "createdAt": "2023-06-22T09:31:50",
          "description": "Network flows collector and monitoring solution",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the Schema for the flowcollectors API, which pilots and configures netflow collection."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the schema for the network flows collection API, which pilots and configures the underlying deployments."
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network Observability eBPF agent.\n\nThe operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.\n\nFor normal usage, we recommend two options:\n\n- Installing the [Loki Operator](https://docs.openshift.com/container-platform/4.11//logging/cluster-logging-loki.html). We have written [a guide](https://github.com/netobserv/documents/blob/main/loki_operator.md) to help you through those steps. Please note that it requires configuring an object storage. Note also that the Loki Operator can also be used for [OpenShift cluster logging](https://docs.openshift.com/container-platform/4.11/logging/cluster-logging.html). If you do so, you should not share the same `LokiStack` for Logging and NetObserv.\n\n- Installing using [Grafana's official documentation](https://grafana.com/docs/loki/latest/). Here also we wrote a [\"distributed Loki\" step by step guide](https://github.com/netobserv/documents/blob/main/loki_distributed.md).\n\nFor a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.2/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.2/config/samples/flows_v1beta1_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.2/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`, _experimental_) an optional list of exporters to which to send enriched flows. Currently only KAFKA is supported. This allows you to define any custom storage or processing that can read from Kafka. This feature is flagged as _experimental_ as it has not been thoroughly or stress tested yet, so use at your own risk.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network Observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "labels": {
          "operatorframework.io/arch.amd64": "supported",
          "operatorframework.io/arch.arm64": "supported",
          "operatorframework.io/arch.ppc64le": "supported",
          "operatorframework.io/arch.s390x": "supported",
          "operatorframework.io/os.linux": "supported"
        },
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Kalman Meth",
            "email": "kmeth@redhat.com"
          },
          {
            "name": "Mohamed S. Mahmoud",
            "email": "mmahmoud@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          },
          {
            "name": "Ronen Schaffer",
            "email": "rschaffe@redhat.com"
          },
          {
            "name": "Steven Lee",
            "email": "stlee@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:880c0812a2cd4b7194f417e31fbdcee951ce76776fa06e33c5c9cd479a854daa"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:e31acc12d8690c339e13b5dd22d33e707701362bdd31086c9b4c0f48cad62cc3"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:7c7c42fff63e0599bb943a9e9617b43181360d5a5254b27f368010af275cf0c3"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:b03f4e88ab1fed4744356a584d673fb2fdb15de7e1de7786bdd222b853690670"
    },
    {
      "name": "network-observability-rhel9-operator-fd943746840cba26996dabb47b1beb3445571fa43cb1b859fb073e4aa114b376-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:fd943746840cba26996dabb47b1beb3445571fa43cb1b859fb073e4aa114b376"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:fd943746840cba26996dabb47b1beb3445571fa43cb1b859fb073e4aa114b376"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:37b3c9b2eed351d9d1a39c99045bbc7993ccb819f67f7b390deaa34930f45946"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.4.0",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:25dfc5ecfc1614d67a9768b8cebb58367cac16c5e541646bb2dc13d75c705bdd",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.4.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"metrics\": {\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"enable\": true,\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"conversationTerminatingTimeout\": \"5s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\",\n            \"nodes-flows\",\n            \"namespaces-flows\",\n            \"workloads-flows\",\n            \"namespaces\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:24afa1aa7757a3030af0d35e278041bf99700f388b691f32ece3c08f1311d944",
          "createdAt": "2023-09-21T16:02:41",
          "description": "Network flows collector and monitoring solution",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the Schema for the flowcollectors API, which pilots and configures netflow collection."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments."
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network Observability eBPF agent.\n\nThe operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.\n\n- For a production or production-like environment usage, refer to [the operator documentation](https://docs.openshift.com/container-platform/latest/networking/network_observability/installing-operators.html).\n\n- For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.3/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.3/config/samples/flows_v1beta1_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.3/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network Observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "labels": {
          "operatorframework.io/arch.amd64": "supported",
          "operatorframework.io/arch.arm64": "supported",
          "operatorframework.io/arch.ppc64le": "supported",
          "operatorframework.io/arch.s390x": "supported",
          "operatorframework.io/os.linux": "supported"
        },
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Kalman Meth",
            "email": "kmeth@redhat.com"
          },
          {
            "name": "Mohamed S. Mahmoud",
            "email": "mmahmoud@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          },
          {
            "name": "Ronen Schaffer",
            "email": "rschaffe@redhat.com"
          },
          {
            "name": "Steven Lee",
            "email": "stlee@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:9feb17ebd651d8e55b177d4c1fb82ee434d0617233dd3e21c8fc97071afa4369"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:5c4c118987448fd7e730cc94e28405d0a869b9a5f3e3ac005c2491b92541df1f"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:3f6d2e8f0cdec5b44c7ae153c67cd0b10f42cc2bc0139ac262fb23cfdfae47a5"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:25dfc5ecfc1614d67a9768b8cebb58367cac16c5e541646bb2dc13d75c705bdd"
    },
    {
      "name": "network-observability-rhel9-operator-24afa1aa7757a3030af0d35e278041bf99700f388b691f32ece3c08f1311d944-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:24afa1aa7757a3030af0d35e278041bf99700f388b691f32ece3c08f1311d944"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:24afa1aa7757a3030af0d35e278041bf99700f388b691f32ece3c08f1311d944"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:fcb3b8ab93dfb5ef2b290e39ea5899dbb5e0c6d430370b8d281e59e74d94d749"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.4.1",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:6f998bb3b7d5311d8e74b25f8fcfe4ae65897270da3c0763ca2cb1d763135bc4",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.4.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"metrics\": {\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"enable\": true,\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"conversationTerminatingTimeout\": \"5s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\",\n            \"nodes-flows\",\n            \"namespaces-flows\",\n            \"workloads-flows\",\n            \"namespaces\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:a8288c418d8881f2455563457656ecf4f7205454f25f413f5a450c7d34f58e0f",
          "createdAt": "2023-10-19T11:50:18",
          "description": "Network flows collector and monitoring solution",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the Schema for the flowcollectors API, which pilots and configures netflow collection."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments."
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network Observability eBPF agent.\n\nThe operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.\n\n- For a production or production-like environment usage, refer to [the operator documentation](https://docs.openshift.com/container-platform/latest/networking/network_observability/installing-operators.html).\n\n- For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.3/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.3/config/samples/flows_v1beta1_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.3/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network Observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "labels": {
          "operatorframework.io/arch.amd64": "supported",
          "operatorframework.io/arch.arm64": "supported",
          "operatorframework.io/arch.ppc64le": "supported",
          "operatorframework.io/arch.s390x": "supported",
          "operatorframework.io/os.linux": "supported"
        },
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Kalman Meth",
            "email": "kmeth@redhat.com"
          },
          {
            "name": "Mohamed S. Mahmoud",
            "email": "mmahmoud@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          },
          {
            "name": "Ronen Schaffer",
            "email": "rschaffe@redhat.com"
          },
          {
            "name": "Steven Lee",
            "email": "stlee@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:b6c02f4195a2be8c4adadbdfe435451d99479119729fbe6465846225580bed5b"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:083683c020b9cc76ebbd5681a150ea1e1d20c7a6a838a71e332ed9da830c27ee"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:0ca8ca508a7b2f81415aa01c35226283b38a575a2d913d061ebe1b920d014727"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:6f998bb3b7d5311d8e74b25f8fcfe4ae65897270da3c0763ca2cb1d763135bc4"
    },
    {
      "name": "network-observability-rhel9-operator-a8288c418d8881f2455563457656ecf4f7205454f25f413f5a450c7d34f58e0f-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:a8288c418d8881f2455563457656ecf4f7205454f25f413f5a450c7d34f58e0f"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:a8288c418d8881f2455563457656ecf4f7205454f25f413f5a450c7d34f58e0f"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:fcb3b8ab93dfb5ef2b290e39ea5899dbb5e0c6d430370b8d281e59e74d94d749"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.4.2",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:dc8f77f41b077986639b3f594f9e5eb3bf56dad90bed1927921f973c4171ba68",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.4.2"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"metrics\": {\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 10485760,\n          \"logLevel\": \"info\",\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_namespace!\": \"openshift-,netobserv\",\n              \"src_namespace!\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"dst_namespace\": \"openshift-,netobserv\",\n              \"src_namespace\": \"openshift-,netobserv\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"enable\": true,\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"conversationTerminatingTimeout\": \"5s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"ignoreTags\": [\n            \"egress\",\n            \"packets\",\n            \"nodes-flows\",\n            \"namespaces-flows\",\n            \"workloads-flows\",\n            \"namespaces\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:cc5b325c36dabb429381b8016f4e3af40fbe2803e547e6d8ed8bd094a07939ce",
          "createdAt": "2023-10-31T18:00:31",
          "description": "Network flows collector and monitoring solution",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the Schema for the flowcollectors API, which pilots and configures netflow collection."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments."
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network Observability eBPF agent.\n\nThe operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.\n\n- For a production or production-like environment usage, refer to [the operator documentation](https://docs.openshift.com/container-platform/latest/networking/network_observability/installing-operators.html).\n\n- For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 1GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for instance [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.3/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.3/config/samples/flows_v1beta1_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you may have to configure differently if you used another installation method.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.3/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network Observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "labels": {
          "operatorframework.io/arch.amd64": "supported",
          "operatorframework.io/arch.arm64": "supported",
          "operatorframework.io/arch.ppc64le": "supported",
          "operatorframework.io/arch.s390x": "supported",
          "operatorframework.io/os.linux": "supported"
        },
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Kalman Meth",
            "email": "kmeth@redhat.com"
          },
          {
            "name": "Mohamed S. Mahmoud",
            "email": "mmahmoud@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          },
          {
            "name": "Ronen Schaffer",
            "email": "rschaffe@redhat.com"
          },
          {
            "name": "Steven Lee",
            "email": "stlee@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:238bc51584c7af63056dd673b23ce8a4fb26cba7360bedad2b9e249a61459c35"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:5dee0d22ca62ab56c1b3d07147a31602d9106a24c423740a75405a82eece8a7f"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:0541e97b9d5fbc10a97262c321fb750340d84004be8261cad1e30e8d91def58b"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:dc8f77f41b077986639b3f594f9e5eb3bf56dad90bed1927921f973c4171ba68"
    },
    {
      "name": "network-observability-rhel9-operator-cc5b325c36dabb429381b8016f4e3af40fbe2803e547e6d8ed8bd094a07939ce-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:cc5b325c36dabb429381b8016f4e3af40fbe2803e547e6d8ed8bd094a07939ce"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:cc5b325c36dabb429381b8016f4e3af40fbe2803e547e6d8ed8bd094a07939ce"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:53d3620bb0490d83aaf6a356bb7d3b9e7147222d1a2017f8317f05fa90cd3de9"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.5.0",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:c97aff3b0ed506b2a1e34c1b22878dc42c6ef3ebf03b73147e8879e23ab5f8af",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta2"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowMetric",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.5.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"deploymentModel\": \"DIRECT\"\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowMetric\",\n    \"metadata\": {\n      \"labels\": {\n        \"app.kubernetes.io/created-by\": \"netobserv-operator\",\n        \"app.kubernetes.io/instance\": \"flowmetric-sample\",\n        \"app.kubernetes.io/managed-by\": \"kustomize\",\n        \"app.kubernetes.io/name\": \"flowmetric\",\n        \"app.kubernetes.io/part-of\": \"netobserv-operator\"\n      },\n      \"name\": \"flowmetric-sample\"\n    },\n    \"spec\": {\n      \"filters\": [\n        {\n          \"field\": \"DstPort\",\n          \"matchType\": \"Regex\",\n          \"value\": \"^\\\\d\\\\d?\\\\d?\\\\d?$\"\n        },\n        {\n          \"field\": \"Duplicate\",\n          \"value\": \"false\"\n        },\n        {\n          \"field\": \"FlowDirection\",\n          \"matchType\": \"Regex\",\n          \"value\": \"1|2\"\n        }\n      ],\n      \"labels\": [\n        \"DstPort\"\n      ],\n      \"metricName\": \"service_ports_total\",\n      \"type\": \"Counter\"\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"app\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"infra\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"enable\": true,\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"conversationTerminatingTimeout\": \"5s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"includeList\": [\n            \"node_ingress_bytes_total\",\n            \"workload_ingress_bytes_total\",\n            \"namespace_flows_total\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta2\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"eBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"Disabled\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"app\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"infra\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"replicas\": 1,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"100Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"50Mi\"\n          }\n        }\n      },\n      \"deploymentModel\": \"Direct\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"enable\": true,\n        \"lokiStack\": {\n          \"name\": \"loki\"\n        },\n        \"mode\": \"Monolithic\",\n        \"monolithic\": {\n          \"tenantID\": \"netobserv\",\n          \"tls\": {\n            \"caCert\": {\n              \"certFile\": \"service-ca.crt\",\n              \"name\": \"loki-gateway-ca-bundle\",\n              \"type\": \"configmap\"\n            },\n            \"enable\": false\n          },\n          \"url\": \"http://loki.netobserv.svc:3100/\"\n        },\n        \"readTimeout\": \"30s\",\n        \"writeBatchSize\": 10485760,\n        \"writeBatchWait\": \"1s\",\n        \"writeTimeout\": \"10s\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"Flows\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring, Networking",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:b1378b36a37f31880d745c3d8f2f1f1b942f4b15af182022398fd737c643aa96",
          "createdAt": "2024-02-15T14:36:00",
          "description": "Network flows collector and monitoring solution",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/initialization-resource": "{\"apiVersion\":\"flows.netobserv.io/v1beta2\", \"kind\":\"FlowCollector\",\"metadata\":{\"name\":\"cluster\"},\"spec\": {}}",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "FlowCollector is the Schema for the flowcollectors API, which pilots and configures netflow collection."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta2",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments.",
              "statusDescriptors": [
                {
                  "path": "namespace",
                  "displayName": "Namespace",
                  "description": "Namespace where console plugin and flowlogs-pipeline have been deployed.",
                  "x-descriptors": [
                    "urn:alm:descriptor:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Conditions of the FlowCollector instance health.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "deploymentModel",
                  "displayName": "Deployment model",
                  "description": "defines the desired type of deployment for flow processing."
                },
                {
                  "path": "agent",
                  "displayName": "Agent configuration",
                  "description": "for flows extraction."
                },
                {
                  "path": "agent.type",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ipfix",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf",
                  "displayName": "eBPF Agent configuration",
                  "description": "Settings related to the eBPF-based flow reporter.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF"
                  ]
                },
                {
                  "path": "agent.ebpf.privileged",
                  "displayName": "Privileged mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheActiveTimeout",
                  "displayName": "Cache active timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheMaxFlows",
                  "displayName": "Cache max flows",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.kafkaBatchSize",
                  "displayName": "Kafka batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "agent.ebpf.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "kafka",
                  "displayName": "Kafka configuration",
                  "description": "to use Kafka as a broker as part of the flow collection pipeline.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka"
                  ]
                },
                {
                  "path": "kafka.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "kafka.tls.enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "kafka.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.userCert",
                  "displayName": "User certificate when using mTLS",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.caCert",
                  "displayName": "CA certificate",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.sasl",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor",
                  "displayName": "Processor configuration",
                  "description": "of the component that receives the flows from the agent, enriches them, generates metrics, and forwards them to the Loki persistence layer and/or any available exporter."
                },
                {
                  "path": "processor.multiClusterDeployment",
                  "displayName": "Multi-cluster deployment",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.clusterName",
                  "displayName": "Cluster name",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true"
                  ]
                },
                {
                  "path": "processor.addZone",
                  "displayName": "Availability zones",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor.metrics",
                  "displayName": "Metrics configuration"
                },
                {
                  "path": "processor.metrics.server",
                  "displayName": "Server configuration"
                },
                {
                  "path": "processor.metrics.server.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "processor.metrics.server.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.provided",
                  "displayName": "Cert",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.providedCaFile",
                  "displayName": "CA",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerReplicas",
                  "displayName": "Kafka consumer replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerAutoscaler",
                  "displayName": "kafka consumer autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerQueueCapacity",
                  "displayName": "Kafka consumer queue capacity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerBatchSize",
                  "displayName": "Kafka consumer batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "loki",
                  "displayName": "Loki client settings",
                  "description": "for the flow store."
                },
                {
                  "path": "loki.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "loki.mode",
                  "displayName": "Mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "loki.lokiStack",
                  "displayName": "Loki stack",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack"
                  ]
                },
                {
                  "path": "loki.monolithic",
                  "displayName": "Monolithic",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic"
                  ]
                },
                {
                  "path": "loki.microservices",
                  "displayName": "Microservices",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices"
                  ]
                },
                {
                  "path": "loki.manual",
                  "displayName": "Manual",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual"
                  ]
                },
                {
                  "path": "loki.writeBatchWait",
                  "displayName": "Write batch wait",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeBatchSize",
                  "displayName": "Write batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeTimeout",
                  "displayName": "Write timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "consolePlugin",
                  "displayName": "Console plugin configuration",
                  "description": "related to the OpenShift Console integration.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "consolePlugin.portNaming",
                  "displayName": "Port naming",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.quickFilters",
                  "displayName": "Quick filters",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.replicas",
                  "displayName": "Replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.autoscaler",
                  "displayName": "Horizontal pod autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\"",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "exporters",
                  "displayName": "Exporters",
                  "description": "additional optional exporters for custom consumption or storage.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "exporters[0].type",
                  "displayName": "Type"
                },
                {
                  "path": "exporters[0].ipfix",
                  "displayName": "IPFIX configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX"
                  ]
                },
                {
                  "path": "exporters[0].kafka",
                  "displayName": "Kafka configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka"
                  ]
                },
                {
                  "path": "agent.ebpf.excludeInterfaces",
                  "displayName": "Exclude interfaces"
                },
                {
                  "path": "agent.ebpf.features",
                  "displayName": "Features"
                },
                {
                  "path": "agent.ebpf.interfaces",
                  "displayName": "Interfaces"
                },
                {
                  "path": "agent.ebpf.sampling",
                  "displayName": "Sampling"
                },
                {
                  "path": "consolePlugin.portNaming.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "consolePlugin.portNaming.portNames",
                  "displayName": "Port names"
                },
                {
                  "path": "kafka.address",
                  "displayName": "Address"
                },
                {
                  "path": "kafka.topic",
                  "displayName": "Topic"
                },
                {
                  "path": "loki.lokiStack.name",
                  "displayName": "Name"
                },
                {
                  "path": "loki.lokiStack.namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "loki.manual.authToken",
                  "displayName": "Auth token"
                },
                {
                  "path": "loki.manual.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.manual.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.manual.statusUrl",
                  "displayName": "Status url"
                },
                {
                  "path": "loki.manual.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.microservices.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.microservices.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.microservices.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.url",
                  "displayName": "Url"
                },
                {
                  "path": "loki.readTimeout",
                  "displayName": "Read timeout"
                },
                {
                  "path": "namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "processor.logTypes",
                  "displayName": "Log types"
                },
                {
                  "path": "processor.metrics.disableAlerts",
                  "displayName": "Disable alerts"
                },
                {
                  "path": "processor.metrics.includeList",
                  "displayName": "Include list"
                },
                {
                  "path": "processor.metrics.server.port",
                  "displayName": "Port"
                }
              ]
            },
            {
              "name": "flowmetrics.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowMetric",
              "displayName": "Flow Metric",
              "description": "`FlowMetric` is the schema for the custom metrics API, which allows to generate more metrics out of flow logs. It is at an early stage of development (dev preview) and thus is currently not supported. Creating metrics with high labels cardinality might impact the cluster stability."
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline to collect and enrich network flows that are produced by the Network Observability eBPF agent.\n\nThe operator provides dashboards, metrics, and keeps flows accessible in a queryable log store, Grafana Loki. When a `FlowCollector` instance is created, new views are available in the Console.\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, is the backend that is used to store all collected flows. The NetObserv Operator does not install Loki directly, however we provide some guidance to help you there.\n\n- For a production or production-like environment usage, refer to [the operator documentation](https://docs.openshift.com/container-platform/latest/networking/network_observability/installing-operators.html).\n\n- For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/252bb624cf0425a1b66f59ce68fb939f246ef77b/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.4/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.4/config/samples/flows_v1beta1_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.4/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network Observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "labels": {
          "operatorframework.io/arch.amd64": "supported",
          "operatorframework.io/arch.arm64": "supported",
          "operatorframework.io/arch.ppc64le": "supported",
          "operatorframework.io/arch.s390x": "supported",
          "operatorframework.io/os.linux": "supported"
        },
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Kalman Meth",
            "email": "kmeth@redhat.com"
          },
          {
            "name": "Mohamed S. Mahmoud",
            "email": "mmahmoud@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          },
          {
            "name": "Ronen Schaffer",
            "email": "rschaffe@redhat.com"
          },
          {
            "name": "Steven Lee",
            "email": "stlee@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:5d0954b7750b115d842a54130f56acdbdaa3102e8bd99abebb2f1890033866e5"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:c32cee1dc5219e6fc1b6d0e98d65772de3ace914094afc182000899522f16d04"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:60467bca0a898e383d2ba535e787ec2f46707bdf487082616d5cc3b608db30dc"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:c97aff3b0ed506b2a1e34c1b22878dc42c6ef3ebf03b73147e8879e23ab5f8af"
    },
    {
      "name": "network-observability-rhel9-operator-b1378b36a37f31880d745c3d8f2f1f1b942f4b15af182022398fd737c643aa96-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:b1378b36a37f31880d745c3d8f2f1f1b942f4b15af182022398fd737c643aa96"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:b1378b36a37f31880d745c3d8f2f1f1b942f4b15af182022398fd737c643aa96"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:8ae1e417a40fb2df575e170128267a4399f56b6bac6db8b30c5b5e2698d0e6f2"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.6.0",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:30868483bc25d1a7c280f05ef84659e390b568422b205fffe12c3e15d8272c92",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta2"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowMetric",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.6.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowMetric\",\n    \"metadata\": {\n      \"labels\": {\n        \"app.kubernetes.io/created-by\": \"netobserv-operator\",\n        \"app.kubernetes.io/instance\": \"flowmetric-sample\",\n        \"app.kubernetes.io/managed-by\": \"kustomize\",\n        \"app.kubernetes.io/name\": \"flowmetric\",\n        \"app.kubernetes.io/part-of\": \"netobserv-operator\"\n      },\n      \"name\": \"flowmetric-sample\"\n    },\n    \"spec\": {\n      \"charts\": [\n        {\n          \"dashboardName\": \"Main\",\n          \"queries\": [\n            {\n              \"legend\": \"\",\n              \"promQL\": \"sum(rate($METRIC[2m]))\"\n            }\n          ],\n          \"title\": \"External ingress traffic\",\n          \"type\": \"SingleStat\",\n          \"unit\": \"Bps\"\n        },\n        {\n          \"dashboardName\": \"Main\",\n          \"queries\": [\n            {\n              \"legend\": \"{{DstK8S_Namespace}} / {{DstK8S_OwnerName}}\",\n              \"promQL\": \"sum(rate($METRIC{DstK8S_Namespace!=\\\"\\\"}[2m])) by (DstK8S_Namespace, DstK8S_OwnerName)\"\n            }\n          ],\n          \"sectionName\": \"External\",\n          \"title\": \"Top external ingress traffic per workload\",\n          \"type\": \"StackArea\",\n          \"unit\": \"Bps\"\n        }\n      ],\n      \"direction\": \"Ingress\",\n      \"filters\": [\n        {\n          \"field\": \"SrcSubnetLabel\",\n          \"matchType\": \"Absence\"\n        }\n      ],\n      \"labels\": [\n        \"DstK8S_HostName\",\n        \"DstK8S_Namespace\",\n        \"DstK8S_OwnerName\",\n        \"DstK8S_OwnerType\"\n      ],\n      \"metricName\": \"cluster_external_ingress_bytes_total\",\n      \"type\": \"Counter\",\n      \"valueField\": \"Bytes\"\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"app\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"infra\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"enable\": true,\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"conversationTerminatingTimeout\": \"5s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"includeList\": [\n            \"node_ingress_bytes_total\",\n            \"workload_ingress_bytes_total\",\n            \"namespace_flows_total\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta2\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"metrics\": {\n            \"server\": {\n              \"port\": 9400\n            }\n          },\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"eBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"Disabled\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"\\\"app\\\"\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"\\\"infra\\\"\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"\\\"Pod\\\"\",\n              \"src_kind\": \"\\\"Pod\\\"\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"\\\"Service\\\"\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"replicas\": 1,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"100Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"50Mi\"\n          }\n        }\n      },\n      \"deploymentModel\": \"Direct\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"enable\": true,\n        \"lokiStack\": {\n          \"name\": \"loki\"\n        },\n        \"mode\": \"Monolithic\",\n        \"monolithic\": {\n          \"tenantID\": \"netobserv\",\n          \"tls\": {\n            \"caCert\": {\n              \"certFile\": \"service-ca.crt\",\n              \"name\": \"loki-gateway-ca-bundle\",\n              \"type\": \"configmap\"\n            },\n            \"enable\": false\n          },\n          \"url\": \"http://loki.netobserv.svc:3100/\"\n        },\n        \"readTimeout\": \"30s\",\n        \"writeBatchSize\": 10485760,\n        \"writeBatchWait\": \"1s\",\n        \"writeTimeout\": \"10s\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"Flows\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"server\": {\n            \"port\": 9401\n          }\n        },\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      },\n      \"prometheus\": {\n        \"querier\": {\n          \"enable\": true,\n          \"mode\": \"Auto\",\n          \"timeout\": \"30s\"\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring, Networking",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:492b56a8750865346a247cc0a5f852c068da5c5a0ff3744085967f698efd8a30",
          "createdAt": "2024-06-11T23:26:31",
          "description": "Network flows collector and monitoring solution",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/initialization-resource": "{\"apiVersion\":\"flows.netobserv.io/v1beta2\", \"kind\":\"FlowCollector\",\"metadata\":{\"name\":\"cluster\"},\"spec\": {}}",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator",
          "support": "NetObserv team"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta2",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments.",
              "statusDescriptors": [
                {
                  "path": "namespace",
                  "displayName": "Namespace",
                  "description": "Namespace where console plugin and flowlogs-pipeline have been deployed.",
                  "x-descriptors": [
                    "urn:alm:descriptor:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Conditions of the FlowCollector instance health.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "deploymentModel",
                  "displayName": "Deployment model",
                  "description": "defines the desired type of deployment for flow processing."
                },
                {
                  "path": "agent",
                  "displayName": "Agent configuration",
                  "description": "for flows extraction."
                },
                {
                  "path": "agent.type",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ipfix",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf",
                  "displayName": "eBPF Agent configuration",
                  "description": "Settings related to the eBPF-based flow reporter.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF"
                  ]
                },
                {
                  "path": "agent.ebpf.privileged",
                  "displayName": "Privileged mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheActiveTimeout",
                  "displayName": "Cache active timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheMaxFlows",
                  "displayName": "Cache max flows",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.kafkaBatchSize",
                  "displayName": "Kafka batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "agent.ebpf.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf.flowFilter",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "kafka",
                  "displayName": "Kafka configuration",
                  "description": "to use Kafka as a broker as part of the flow collection pipeline.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka"
                  ]
                },
                {
                  "path": "kafka.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "kafka.tls.enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "kafka.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.userCert",
                  "displayName": "User certificate when using mTLS",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.caCert",
                  "displayName": "CA certificate",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.sasl",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor",
                  "displayName": "Processor configuration",
                  "description": "of the component that receives the flows from the agent, enriches them, generates metrics, and forwards them to the Loki persistence layer and/or any available exporter."
                },
                {
                  "path": "processor.multiClusterDeployment",
                  "displayName": "Multi-cluster deployment",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.clusterName",
                  "displayName": "Cluster name",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true"
                  ]
                },
                {
                  "path": "processor.addZone",
                  "displayName": "Availability zones",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor.metrics",
                  "displayName": "Metrics configuration"
                },
                {
                  "path": "processor.metrics.server",
                  "displayName": "Server configuration"
                },
                {
                  "path": "processor.metrics.server.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "processor.metrics.server.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.provided",
                  "displayName": "Cert",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.providedCaFile",
                  "displayName": "CA",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerReplicas",
                  "displayName": "Kafka consumer replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerAutoscaler",
                  "displayName": "kafka consumer autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerQueueCapacity",
                  "displayName": "Kafka consumer queue capacity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerBatchSize",
                  "displayName": "Kafka consumer batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "loki",
                  "displayName": "Loki client settings",
                  "description": "for the flow store."
                },
                {
                  "path": "loki.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "loki.mode",
                  "displayName": "Mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "loki.lokiStack",
                  "displayName": "Loki stack",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack"
                  ]
                },
                {
                  "path": "loki.monolithic",
                  "displayName": "Monolithic",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic"
                  ]
                },
                {
                  "path": "loki.microservices",
                  "displayName": "Microservices",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices"
                  ]
                },
                {
                  "path": "loki.manual",
                  "displayName": "Manual",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual"
                  ]
                },
                {
                  "path": "loki.writeBatchWait",
                  "displayName": "Write batch wait",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeBatchSize",
                  "displayName": "Write batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeTimeout",
                  "displayName": "Write timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "consolePlugin",
                  "displayName": "Console plugin configuration",
                  "description": "related to the OpenShift Console integration.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "consolePlugin.portNaming",
                  "displayName": "Port naming",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.quickFilters",
                  "displayName": "Quick filters",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.replicas",
                  "displayName": "Replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.autoscaler",
                  "displayName": "Horizontal pod autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\"",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "exporters",
                  "displayName": "Exporters",
                  "description": "additional optional exporters for custom consumption or storage.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "exporters[0].type",
                  "displayName": "Type"
                },
                {
                  "path": "exporters[0].ipfix",
                  "displayName": "IPFIX configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX"
                  ]
                },
                {
                  "path": "exporters[0].kafka",
                  "displayName": "Kafka configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka"
                  ]
                },
                {
                  "path": "agent.ebpf.excludeInterfaces",
                  "displayName": "Exclude interfaces"
                },
                {
                  "path": "agent.ebpf.features",
                  "displayName": "Features"
                },
                {
                  "path": "agent.ebpf.interfaces",
                  "displayName": "Interfaces"
                },
                {
                  "path": "agent.ebpf.metrics",
                  "displayName": "Metrics"
                },
                {
                  "path": "agent.ebpf.metrics.disableAlerts",
                  "displayName": "Disable alerts"
                },
                {
                  "path": "agent.ebpf.metrics.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "agent.ebpf.metrics.server",
                  "displayName": "Server"
                },
                {
                  "path": "agent.ebpf.metrics.server.port",
                  "displayName": "Port"
                },
                {
                  "path": "agent.ebpf.sampling",
                  "displayName": "Sampling"
                },
                {
                  "path": "consolePlugin.portNaming.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "consolePlugin.portNaming.portNames",
                  "displayName": "Port names"
                },
                {
                  "path": "kafka.address",
                  "displayName": "Address"
                },
                {
                  "path": "kafka.topic",
                  "displayName": "Topic"
                },
                {
                  "path": "loki.lokiStack.name",
                  "displayName": "Name"
                },
                {
                  "path": "loki.lokiStack.namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "loki.manual.authToken",
                  "displayName": "Auth token"
                },
                {
                  "path": "loki.manual.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.manual.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.manual.statusUrl",
                  "displayName": "Status url"
                },
                {
                  "path": "loki.manual.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.microservices.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.microservices.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.microservices.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.url",
                  "displayName": "Url"
                },
                {
                  "path": "loki.readTimeout",
                  "displayName": "Read timeout"
                },
                {
                  "path": "namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "processor.logTypes",
                  "displayName": "Log types"
                },
                {
                  "path": "processor.metrics.disableAlerts",
                  "displayName": "Disable alerts"
                },
                {
                  "path": "processor.metrics.includeList",
                  "displayName": "Include list"
                },
                {
                  "path": "processor.metrics.server.port",
                  "displayName": "Port"
                },
                {
                  "path": "processor.subnetLabels",
                  "displayName": "Subnet labels"
                },
                {
                  "path": "processor.subnetLabels.customLabels",
                  "displayName": "Custom labels"
                },
                {
                  "path": "processor.subnetLabels.openShiftAutoDetect",
                  "displayName": "Open shift auto detect"
                },
                {
                  "path": "prometheus",
                  "displayName": "Prometheus"
                },
                {
                  "path": "prometheus.querier",
                  "displayName": "Querier"
                },
                {
                  "path": "prometheus.querier.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "prometheus.querier.manual",
                  "displayName": "Manual"
                },
                {
                  "path": "prometheus.querier.manual.forwardUserToken",
                  "displayName": "Forward user token"
                },
                {
                  "path": "prometheus.querier.manual.url",
                  "displayName": "Url"
                },
                {
                  "path": "prometheus.querier.mode",
                  "displayName": "Mode"
                },
                {
                  "path": "prometheus.querier.timeout",
                  "displayName": "Timeout"
                }
              ]
            },
            {
              "name": "flowmetrics.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowMetric",
              "displayName": "Flow Metric",
              "description": "`FlowMetric` is the schema for the custom metrics API, which allows to generate more metrics out of flow logs. You can find examples here: https://github.com/netobserv/network-observability-operator/tree/main/config/samples/flowmetrics"
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline consisting in:\n- an eBPF agent, that generates network flows from captured packets\n- flowlogs-pipeline, a component that collects, enriches and exports these flows\n- a Console plugin for flows visualization with powerful filtering options, a topology representation and more\n\nFlow data is then available in multiple ways, each optional:\n\n- As Cluster Monitoring metrics\n- As raw flow logs stored in Grafana Loki\n- As raw flow logs exported to a collector\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, can optionally be used as the backend to store all collected flows. The Network Observability operator does not install Loki directly, however we provide some guidance to help you there.\n\n- For a production or production-like environment usage, refer to [the operator documentation](https://docs.openshift.com/container-platform/latest/network_observability/installing-operators.html).\n\n- For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\nIf you prefer to not use Loki, you must set `spec.loki.enable` to `false` in `FlowCollector`.\nIn that case, you can still get the Prometheus metrics or export raw flows to a custom collector. But be aware that some of the Console plugin features will be disabled. For instance, you will not be able to view raw flows there, and the metrics / topology will have a more limited level of details, missing information such as pods or IPs.\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.5/config/samples/flows_v1beta2_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide on every node, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method. Make sure to disable it (`spec.loki.enable`) if you don't want to use Loki.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.\n\n- To enable availability zones awareness, set `spec.processor.addZone` to `true`.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- More information on [configuring metrics](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/Metrics.md).\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network Observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "ipfix",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "labels": {
          "operatorframework.io/arch.amd64": "supported",
          "operatorframework.io/arch.arm64": "supported",
          "operatorframework.io/arch.ppc64le": "supported",
          "operatorframework.io/arch.s390x": "supported",
          "operatorframework.io/os.linux": "supported"
        },
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Kalman Meth",
            "email": "kmeth@redhat.com"
          },
          {
            "name": "Mohamed S. Mahmoud",
            "email": "mmahmoud@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          },
          {
            "name": "Ronen Schaffer",
            "email": "rschaffe@redhat.com"
          },
          {
            "name": "Steven Lee",
            "email": "stlee@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:3fea32004888bb9a6115faf8d54d2458a336a4e813efba9768891cc7b7e4dd6e"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:7007961ad3c0322f474131115fe5b5bd4fc8b0dbc6430d3db4932fb4433c3391"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:5eb11fcc2f2e153c01db2f0799938cac591abccd00a0f6c0a18465e11d681027"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:30868483bc25d1a7c280f05ef84659e390b568422b205fffe12c3e15d8272c92"
    },
    {
      "name": "network-observability-rhel9-operator-492b56a8750865346a247cc0a5f852c068da5c5a0ff3744085967f698efd8a30-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:492b56a8750865346a247cc0a5f852c068da5c5a0ff3744085967f698efd8a30"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:492b56a8750865346a247cc0a5f852c068da5c5a0ff3744085967f698efd8a30"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:0c2e9805d2c48d3cea7a9e348f0c37de435302e2e244415541c8a6fd75d77132"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.6.1",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:814737b3cca4b3e02fbf6750be08b93a6094ecb1457820619d3b9ee33900284c",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta2"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowMetric",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.6.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowMetric\",\n    \"metadata\": {\n      \"labels\": {\n        \"app.kubernetes.io/created-by\": \"netobserv-operator\",\n        \"app.kubernetes.io/instance\": \"flowmetric-sample\",\n        \"app.kubernetes.io/managed-by\": \"kustomize\",\n        \"app.kubernetes.io/name\": \"flowmetric\",\n        \"app.kubernetes.io/part-of\": \"netobserv-operator\"\n      },\n      \"name\": \"flowmetric-sample\"\n    },\n    \"spec\": {\n      \"charts\": [\n        {\n          \"dashboardName\": \"Main\",\n          \"queries\": [\n            {\n              \"legend\": \"\",\n              \"promQL\": \"sum(rate($METRIC[2m]))\"\n            }\n          ],\n          \"title\": \"External ingress traffic\",\n          \"type\": \"SingleStat\",\n          \"unit\": \"Bps\"\n        },\n        {\n          \"dashboardName\": \"Main\",\n          \"queries\": [\n            {\n              \"legend\": \"{{DstK8S_Namespace}} / {{DstK8S_OwnerName}}\",\n              \"promQL\": \"sum(rate($METRIC{DstK8S_Namespace!=\\\"\\\"}[2m])) by (DstK8S_Namespace, DstK8S_OwnerName)\"\n            }\n          ],\n          \"sectionName\": \"External\",\n          \"title\": \"Top external ingress traffic per workload\",\n          \"type\": \"StackArea\",\n          \"unit\": \"Bps\"\n        }\n      ],\n      \"direction\": \"Ingress\",\n      \"filters\": [\n        {\n          \"field\": \"SrcSubnetLabel\",\n          \"matchType\": \"Absence\"\n        }\n      ],\n      \"labels\": [\n        \"DstK8S_HostName\",\n        \"DstK8S_Namespace\",\n        \"DstK8S_OwnerName\",\n        \"DstK8S_OwnerType\"\n      ],\n      \"metricName\": \"cluster_external_ingress_bytes_total\",\n      \"type\": \"Counter\",\n      \"valueField\": \"Bytes\"\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"app\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"infra\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"enable\": true,\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"conversationTerminatingTimeout\": \"5s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"includeList\": [\n            \"node_ingress_bytes_total\",\n            \"workload_ingress_bytes_total\",\n            \"namespace_flows_total\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta2\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"metrics\": {\n            \"server\": {\n              \"port\": 9400\n            }\n          },\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"eBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"Disabled\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"\\\"app\\\"\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"\\\"infra\\\"\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"\\\"Pod\\\"\",\n              \"src_kind\": \"\\\"Pod\\\"\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"\\\"Service\\\"\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"replicas\": 1,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"100Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"50Mi\"\n          }\n        }\n      },\n      \"deploymentModel\": \"Direct\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"enable\": true,\n        \"lokiStack\": {\n          \"name\": \"loki\"\n        },\n        \"mode\": \"Monolithic\",\n        \"monolithic\": {\n          \"tenantID\": \"netobserv\",\n          \"tls\": {\n            \"caCert\": {\n              \"certFile\": \"service-ca.crt\",\n              \"name\": \"loki-gateway-ca-bundle\",\n              \"type\": \"configmap\"\n            },\n            \"enable\": false\n          },\n          \"url\": \"http://loki.netobserv.svc:3100/\"\n        },\n        \"readTimeout\": \"30s\",\n        \"writeBatchSize\": 10485760,\n        \"writeBatchWait\": \"1s\",\n        \"writeTimeout\": \"10s\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"Flows\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"server\": {\n            \"port\": 9401\n          }\n        },\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      },\n      \"prometheus\": {\n        \"querier\": {\n          \"enable\": true,\n          \"mode\": \"Auto\",\n          \"timeout\": \"30s\"\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring, Networking",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:a06fb994fb564121b210ff85c1e5c98747e7a190ad4791ad3d54981162385a8c",
          "createdAt": "2024-07-17T09:44:01",
          "description": "Network flows collector and monitoring solution",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/initialization-resource": "{\"apiVersion\":\"flows.netobserv.io/v1beta2\", \"kind\":\"FlowCollector\",\"metadata\":{\"name\":\"cluster\"},\"spec\": {}}",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator",
          "support": "NetObserv team"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta2",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments.",
              "statusDescriptors": [
                {
                  "path": "namespace",
                  "displayName": "Namespace",
                  "description": "Namespace where console plugin and flowlogs-pipeline have been deployed.",
                  "x-descriptors": [
                    "urn:alm:descriptor:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Conditions of the FlowCollector instance health.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "deploymentModel",
                  "displayName": "Deployment model",
                  "description": "defines the desired type of deployment for flow processing."
                },
                {
                  "path": "agent",
                  "displayName": "Agent configuration",
                  "description": "for flows extraction."
                },
                {
                  "path": "agent.type",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ipfix",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf",
                  "displayName": "eBPF Agent configuration",
                  "description": "Settings related to the eBPF-based flow reporter.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF"
                  ]
                },
                {
                  "path": "agent.ebpf.privileged",
                  "displayName": "Privileged mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheActiveTimeout",
                  "displayName": "Cache active timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheMaxFlows",
                  "displayName": "Cache max flows",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.kafkaBatchSize",
                  "displayName": "Kafka batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "agent.ebpf.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf.flowFilter",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf.metrics.enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "kafka",
                  "displayName": "Kafka configuration",
                  "description": "to use Kafka as a broker as part of the flow collection pipeline.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka"
                  ]
                },
                {
                  "path": "kafka.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "kafka.tls.enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "kafka.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.userCert",
                  "displayName": "User certificate when using mTLS",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.caCert",
                  "displayName": "CA certificate",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.sasl",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor",
                  "displayName": "Processor configuration",
                  "description": "of the component that receives the flows from the agent, enriches them, generates metrics, and forwards them to the Loki persistence layer and/or any available exporter."
                },
                {
                  "path": "processor.multiClusterDeployment",
                  "displayName": "Multi-cluster deployment",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.clusterName",
                  "displayName": "Cluster name",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true"
                  ]
                },
                {
                  "path": "processor.addZone",
                  "displayName": "Availability zones",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor.metrics",
                  "displayName": "Metrics configuration"
                },
                {
                  "path": "processor.metrics.server",
                  "displayName": "Server configuration"
                },
                {
                  "path": "processor.metrics.server.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "processor.metrics.server.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.provided",
                  "displayName": "Cert",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.providedCaFile",
                  "displayName": "CA",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerReplicas",
                  "displayName": "Kafka consumer replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerAutoscaler",
                  "displayName": "kafka consumer autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerQueueCapacity",
                  "displayName": "Kafka consumer queue capacity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerBatchSize",
                  "displayName": "Kafka consumer batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.subnetLabels.openShiftAutoDetect",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "loki",
                  "displayName": "Loki client settings",
                  "description": "for the flow store."
                },
                {
                  "path": "loki.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "loki.mode",
                  "displayName": "Mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "loki.lokiStack",
                  "displayName": "Loki stack",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack"
                  ]
                },
                {
                  "path": "loki.monolithic",
                  "displayName": "Monolithic",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic"
                  ]
                },
                {
                  "path": "loki.microservices",
                  "displayName": "Microservices",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices"
                  ]
                },
                {
                  "path": "loki.manual",
                  "displayName": "Manual",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual"
                  ]
                },
                {
                  "path": "loki.writeBatchWait",
                  "displayName": "Write batch wait",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeBatchSize",
                  "displayName": "Write batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeTimeout",
                  "displayName": "Write timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "consolePlugin",
                  "displayName": "Console plugin configuration",
                  "description": "related to the OpenShift Console integration.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "consolePlugin.portNaming",
                  "displayName": "Port naming",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.quickFilters",
                  "displayName": "Quick filters",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.replicas",
                  "displayName": "Replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.autoscaler",
                  "displayName": "Horizontal pod autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\"",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "exporters",
                  "displayName": "Exporters",
                  "description": "additional optional exporters for custom consumption or storage.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "exporters[0].type",
                  "displayName": "Type"
                },
                {
                  "path": "exporters[0].ipfix",
                  "displayName": "IPFIX configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX"
                  ]
                },
                {
                  "path": "exporters[0].kafka",
                  "displayName": "Kafka configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka"
                  ]
                },
                {
                  "path": "agent.ebpf.excludeInterfaces",
                  "displayName": "Exclude interfaces"
                },
                {
                  "path": "agent.ebpf.features",
                  "displayName": "Features"
                },
                {
                  "path": "agent.ebpf.interfaces",
                  "displayName": "Interfaces"
                },
                {
                  "path": "agent.ebpf.metrics",
                  "displayName": "Metrics"
                },
                {
                  "path": "agent.ebpf.metrics.disableAlerts",
                  "displayName": "Disable alerts"
                },
                {
                  "path": "agent.ebpf.metrics.server",
                  "displayName": "Server"
                },
                {
                  "path": "agent.ebpf.metrics.server.port",
                  "displayName": "Port"
                },
                {
                  "path": "agent.ebpf.sampling",
                  "displayName": "Sampling"
                },
                {
                  "path": "consolePlugin.portNaming.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "consolePlugin.portNaming.portNames",
                  "displayName": "Port names"
                },
                {
                  "path": "kafka.address",
                  "displayName": "Address"
                },
                {
                  "path": "kafka.topic",
                  "displayName": "Topic"
                },
                {
                  "path": "loki.lokiStack.name",
                  "displayName": "Name"
                },
                {
                  "path": "loki.lokiStack.namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "loki.manual.authToken",
                  "displayName": "Auth token"
                },
                {
                  "path": "loki.manual.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.manual.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.manual.statusUrl",
                  "displayName": "Status url"
                },
                {
                  "path": "loki.manual.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.microservices.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.microservices.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.microservices.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.url",
                  "displayName": "Url"
                },
                {
                  "path": "loki.readTimeout",
                  "displayName": "Read timeout"
                },
                {
                  "path": "namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "processor.logTypes",
                  "displayName": "Log types"
                },
                {
                  "path": "processor.metrics.disableAlerts",
                  "displayName": "Disable alerts"
                },
                {
                  "path": "processor.metrics.includeList",
                  "displayName": "Include list"
                },
                {
                  "path": "processor.metrics.server.port",
                  "displayName": "Port"
                },
                {
                  "path": "processor.subnetLabels",
                  "displayName": "Subnet labels"
                },
                {
                  "path": "processor.subnetLabels.customLabels",
                  "displayName": "Custom labels"
                },
                {
                  "path": "prometheus",
                  "displayName": "Prometheus"
                },
                {
                  "path": "prometheus.querier",
                  "displayName": "Querier"
                },
                {
                  "path": "prometheus.querier.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "prometheus.querier.manual",
                  "displayName": "Manual"
                },
                {
                  "path": "prometheus.querier.manual.forwardUserToken",
                  "displayName": "Forward user token"
                },
                {
                  "path": "prometheus.querier.manual.url",
                  "displayName": "Url"
                },
                {
                  "path": "prometheus.querier.mode",
                  "displayName": "Mode"
                },
                {
                  "path": "prometheus.querier.timeout",
                  "displayName": "Timeout"
                }
              ]
            },
            {
              "name": "flowmetrics.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowMetric",
              "displayName": "Flow Metric",
              "description": "`FlowMetric` is the schema for the custom metrics API, which allows to generate more metrics out of flow logs. You can find examples here: https://github.com/netobserv/network-observability-operator/tree/main/config/samples/flowmetrics"
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline consisting in:\n- an eBPF agent, that generates network flows from captured packets\n- flowlogs-pipeline, a component that collects, enriches and exports these flows\n- a Console plugin for flows visualization with powerful filtering options, a topology representation and more\n\nFlow data is then available in multiple ways, each optional:\n\n- As Cluster Monitoring metrics\n- As raw flow logs stored in Grafana Loki\n- As raw flow logs exported to a collector\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, can optionally be used as the backend to store all collected flows. The Network Observability operator does not install Loki directly, however we provide some guidance to help you there.\n\n- For a production or production-like environment usage, refer to [the operator documentation](https://docs.openshift.com/container-platform/latest/network_observability/installing-operators.html).\n\n- For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\nIf you prefer to not use Loki, you must set `spec.loki.enable` to `false` in `FlowCollector`.\nIn that case, you can still get the Prometheus metrics or export raw flows to a custom collector. But be aware that some of the Console plugin features will be disabled. For instance, you will not be able to view raw flows there, and the metrics / topology will have a more limited level of details, missing information such as pods or IPs.\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.5/config/samples/flows_v1beta2_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide on every node, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method. Make sure to disable it (`spec.loki.enable`) if you don't want to use Loki.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.\n\n- To enable availability zones awareness, set `spec.processor.addZone` to `true`.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- More information on [configuring metrics](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/Metrics.md).\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network Observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "ipfix",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "labels": {
          "operatorframework.io/arch.amd64": "supported",
          "operatorframework.io/arch.arm64": "supported",
          "operatorframework.io/arch.ppc64le": "supported",
          "operatorframework.io/arch.s390x": "supported",
          "operatorframework.io/os.linux": "supported"
        },
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Kalman Meth",
            "email": "kmeth@redhat.com"
          },
          {
            "name": "Mohamed S. Mahmoud",
            "email": "mmahmoud@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          },
          {
            "name": "Ronen Schaffer",
            "email": "rschaffe@redhat.com"
          },
          {
            "name": "Steven Lee",
            "email": "stlee@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:53d74bf74373d92529df4f30c4811473f62a1046a02e45d61b9049c9644342da"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:e1e5f3ec1f8bbb7e6d0a28801ed1567d59768fd7a854ceb5860642f6ba06722a"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:47540b6fd2cb1a0d89cb66859bc10b72e0266d828c6096ff0e9d83f4aa406579"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:814737b3cca4b3e02fbf6750be08b93a6094ecb1457820619d3b9ee33900284c"
    },
    {
      "name": "network-observability-rhel9-operator-a06fb994fb564121b210ff85c1e5c98747e7a190ad4791ad3d54981162385a8c-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:a06fb994fb564121b210ff85c1e5c98747e7a190ad4791ad3d54981162385a8c"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:a06fb994fb564121b210ff85c1e5c98747e7a190ad4791ad3d54981162385a8c"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:77df668a9591bbaae675d0553f8dca5423c0f257317bc08fe821d965f44ed019"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.6.2",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:f660759b145bd0053ac756def298ae9a3727d84685dc06cd3ee9bbbaaa68971a",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta2"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowMetric",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.6.2"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowMetric\",\n    \"metadata\": {\n      \"labels\": {\n        \"app.kubernetes.io/created-by\": \"netobserv-operator\",\n        \"app.kubernetes.io/instance\": \"flowmetric-sample\",\n        \"app.kubernetes.io/managed-by\": \"kustomize\",\n        \"app.kubernetes.io/name\": \"flowmetric\",\n        \"app.kubernetes.io/part-of\": \"netobserv-operator\"\n      },\n      \"name\": \"flowmetric-sample\"\n    },\n    \"spec\": {\n      \"charts\": [\n        {\n          \"dashboardName\": \"Main\",\n          \"queries\": [\n            {\n              \"legend\": \"\",\n              \"promQL\": \"sum(rate($METRIC[2m]))\"\n            }\n          ],\n          \"title\": \"External ingress traffic\",\n          \"type\": \"SingleStat\",\n          \"unit\": \"Bps\"\n        },\n        {\n          \"dashboardName\": \"Main\",\n          \"queries\": [\n            {\n              \"legend\": \"{{DstK8S_Namespace}} / {{DstK8S_OwnerName}}\",\n              \"promQL\": \"sum(rate($METRIC{DstK8S_Namespace!=\\\"\\\"}[2m])) by (DstK8S_Namespace, DstK8S_OwnerName)\"\n            }\n          ],\n          \"sectionName\": \"External\",\n          \"title\": \"Top external ingress traffic per workload\",\n          \"type\": \"StackArea\",\n          \"unit\": \"Bps\"\n        }\n      ],\n      \"direction\": \"Ingress\",\n      \"filters\": [\n        {\n          \"field\": \"SrcSubnetLabel\",\n          \"matchType\": \"Absence\"\n        }\n      ],\n      \"labels\": [\n        \"DstK8S_HostName\",\n        \"DstK8S_Namespace\",\n        \"DstK8S_OwnerName\",\n        \"DstK8S_OwnerType\"\n      ],\n      \"metricName\": \"cluster_external_ingress_bytes_total\",\n      \"type\": \"Counter\",\n      \"valueField\": \"Bytes\"\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"app\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"infra\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"enable\": true,\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"conversationTerminatingTimeout\": \"5s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"includeList\": [\n            \"node_ingress_bytes_total\",\n            \"workload_ingress_bytes_total\",\n            \"namespace_flows_total\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta2\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"metrics\": {\n            \"server\": {\n              \"port\": 9400\n            }\n          },\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"eBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"Disabled\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"\\\"app\\\"\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"\\\"infra\\\"\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"\\\"Pod\\\"\",\n              \"src_kind\": \"\\\"Pod\\\"\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"\\\"Service\\\"\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"replicas\": 1,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"100Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"50Mi\"\n          }\n        }\n      },\n      \"deploymentModel\": \"Direct\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"enable\": true,\n        \"lokiStack\": {\n          \"name\": \"loki\"\n        },\n        \"mode\": \"Monolithic\",\n        \"monolithic\": {\n          \"tenantID\": \"netobserv\",\n          \"tls\": {\n            \"caCert\": {\n              \"certFile\": \"service-ca.crt\",\n              \"name\": \"loki-gateway-ca-bundle\",\n              \"type\": \"configmap\"\n            },\n            \"enable\": false\n          },\n          \"url\": \"http://loki.netobserv.svc:3100/\"\n        },\n        \"readTimeout\": \"30s\",\n        \"writeBatchSize\": 10485760,\n        \"writeBatchWait\": \"1s\",\n        \"writeTimeout\": \"10s\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"Flows\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"server\": {\n            \"port\": 9401\n          }\n        },\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      },\n      \"prometheus\": {\n        \"querier\": {\n          \"enable\": true,\n          \"mode\": \"Auto\",\n          \"timeout\": \"30s\"\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring, Networking",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:737ac2d174c1ce1e5435e67360b245f681eb4dc7dce35d3c3cf64636a131257b",
          "createdAt": "2024-09-11T10:03:15",
          "description": "Network flows collector and monitoring solution",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/initialization-resource": "{\"apiVersion\":\"flows.netobserv.io/v1beta2\", \"kind\":\"FlowCollector\",\"metadata\":{\"name\":\"cluster\"},\"spec\": {}}",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator",
          "support": "NetObserv team"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta2",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments.",
              "statusDescriptors": [
                {
                  "path": "namespace",
                  "displayName": "Namespace",
                  "description": "Namespace where console plugin and flowlogs-pipeline have been deployed.",
                  "x-descriptors": [
                    "urn:alm:descriptor:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Conditions of the FlowCollector instance health.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "deploymentModel",
                  "displayName": "Deployment model",
                  "description": "defines the desired type of deployment for flow processing."
                },
                {
                  "path": "agent",
                  "displayName": "Agent configuration",
                  "description": "for flows extraction."
                },
                {
                  "path": "agent.type",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ipfix",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf",
                  "displayName": "eBPF Agent configuration",
                  "description": "Settings related to the eBPF-based flow reporter.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF"
                  ]
                },
                {
                  "path": "agent.ebpf.privileged",
                  "displayName": "Privileged mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheActiveTimeout",
                  "displayName": "Cache active timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheMaxFlows",
                  "displayName": "Cache max flows",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.kafkaBatchSize",
                  "displayName": "Kafka batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "agent.ebpf.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf.flowFilter",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf.metrics.enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "kafka",
                  "displayName": "Kafka configuration",
                  "description": "to use Kafka as a broker as part of the flow collection pipeline.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka"
                  ]
                },
                {
                  "path": "kafka.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "kafka.tls.enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "kafka.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.userCert",
                  "displayName": "User certificate when using mTLS",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.caCert",
                  "displayName": "CA certificate",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.sasl",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor",
                  "displayName": "Processor configuration",
                  "description": "of the component that receives the flows from the agent, enriches them, generates metrics, and forwards them to the Loki persistence layer and/or any available exporter."
                },
                {
                  "path": "processor.multiClusterDeployment",
                  "displayName": "Multi-cluster deployment",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.clusterName",
                  "displayName": "Cluster name",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true"
                  ]
                },
                {
                  "path": "processor.addZone",
                  "displayName": "Availability zones",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor.metrics",
                  "displayName": "Metrics configuration"
                },
                {
                  "path": "processor.metrics.server",
                  "displayName": "Server configuration"
                },
                {
                  "path": "processor.metrics.server.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "processor.metrics.server.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.provided",
                  "displayName": "Cert",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.providedCaFile",
                  "displayName": "CA",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerReplicas",
                  "displayName": "Kafka consumer replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerAutoscaler",
                  "displayName": "kafka consumer autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerQueueCapacity",
                  "displayName": "Kafka consumer queue capacity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerBatchSize",
                  "displayName": "Kafka consumer batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.subnetLabels.openShiftAutoDetect",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "loki",
                  "displayName": "Loki client settings",
                  "description": "for the flow store."
                },
                {
                  "path": "loki.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "loki.mode",
                  "displayName": "Mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "loki.lokiStack",
                  "displayName": "Loki stack",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack"
                  ]
                },
                {
                  "path": "loki.monolithic",
                  "displayName": "Monolithic",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic"
                  ]
                },
                {
                  "path": "loki.microservices",
                  "displayName": "Microservices",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices"
                  ]
                },
                {
                  "path": "loki.manual",
                  "displayName": "Manual",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual"
                  ]
                },
                {
                  "path": "loki.writeBatchWait",
                  "displayName": "Write batch wait",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeBatchSize",
                  "displayName": "Write batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeTimeout",
                  "displayName": "Write timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "consolePlugin",
                  "displayName": "Console plugin configuration",
                  "description": "related to the OpenShift Console integration.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "consolePlugin.portNaming",
                  "displayName": "Port naming",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.quickFilters",
                  "displayName": "Quick filters",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.replicas",
                  "displayName": "Replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.autoscaler",
                  "displayName": "Horizontal pod autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\"",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "exporters",
                  "displayName": "Exporters",
                  "description": "additional optional exporters for custom consumption or storage.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "exporters[0].type",
                  "displayName": "Type"
                },
                {
                  "path": "exporters[0].ipfix",
                  "displayName": "IPFIX configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX"
                  ]
                },
                {
                  "path": "exporters[0].kafka",
                  "displayName": "Kafka configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka"
                  ]
                },
                {
                  "path": "agent.ebpf.excludeInterfaces",
                  "displayName": "Exclude interfaces"
                },
                {
                  "path": "agent.ebpf.features",
                  "displayName": "Features"
                },
                {
                  "path": "agent.ebpf.interfaces",
                  "displayName": "Interfaces"
                },
                {
                  "path": "agent.ebpf.metrics",
                  "displayName": "Metrics"
                },
                {
                  "path": "agent.ebpf.metrics.disableAlerts",
                  "displayName": "Disable alerts"
                },
                {
                  "path": "agent.ebpf.metrics.server",
                  "displayName": "Server"
                },
                {
                  "path": "agent.ebpf.metrics.server.port",
                  "displayName": "Port"
                },
                {
                  "path": "agent.ebpf.sampling",
                  "displayName": "Sampling"
                },
                {
                  "path": "consolePlugin.portNaming.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "consolePlugin.portNaming.portNames",
                  "displayName": "Port names"
                },
                {
                  "path": "kafka.address",
                  "displayName": "Address"
                },
                {
                  "path": "kafka.topic",
                  "displayName": "Topic"
                },
                {
                  "path": "loki.lokiStack.name",
                  "displayName": "Name"
                },
                {
                  "path": "loki.lokiStack.namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "loki.manual.authToken",
                  "displayName": "Auth token"
                },
                {
                  "path": "loki.manual.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.manual.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.manual.statusUrl",
                  "displayName": "Status url"
                },
                {
                  "path": "loki.manual.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.microservices.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.microservices.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.microservices.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.url",
                  "displayName": "Url"
                },
                {
                  "path": "loki.readTimeout",
                  "displayName": "Read timeout"
                },
                {
                  "path": "namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "processor.logTypes",
                  "displayName": "Log types"
                },
                {
                  "path": "processor.metrics.disableAlerts",
                  "displayName": "Disable alerts"
                },
                {
                  "path": "processor.metrics.includeList",
                  "displayName": "Include list"
                },
                {
                  "path": "processor.metrics.server.port",
                  "displayName": "Port"
                },
                {
                  "path": "processor.subnetLabels",
                  "displayName": "Subnet labels"
                },
                {
                  "path": "processor.subnetLabels.customLabels",
                  "displayName": "Custom labels"
                },
                {
                  "path": "prometheus",
                  "displayName": "Prometheus"
                },
                {
                  "path": "prometheus.querier",
                  "displayName": "Querier"
                },
                {
                  "path": "prometheus.querier.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "prometheus.querier.manual",
                  "displayName": "Manual"
                },
                {
                  "path": "prometheus.querier.manual.forwardUserToken",
                  "displayName": "Forward user token"
                },
                {
                  "path": "prometheus.querier.manual.url",
                  "displayName": "Url"
                },
                {
                  "path": "prometheus.querier.mode",
                  "displayName": "Mode"
                },
                {
                  "path": "prometheus.querier.timeout",
                  "displayName": "Timeout"
                }
              ]
            },
            {
              "name": "flowmetrics.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowMetric",
              "displayName": "Flow Metric",
              "description": "`FlowMetric` is the schema for the custom metrics API, which allows to generate more metrics out of flow logs. You can find examples here: https://github.com/netobserv/network-observability-operator/tree/main/config/samples/flowmetrics"
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline consisting in:\n- an eBPF agent, that generates network flows from captured packets\n- flowlogs-pipeline, a component that collects, enriches and exports these flows\n- a Console plugin for flows visualization with powerful filtering options, a topology representation and more\n\nFlow data is then available in multiple ways, each optional:\n\n- As Cluster Monitoring metrics\n- As raw flow logs stored in Grafana Loki\n- As raw flow logs exported to a collector\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, can optionally be used as the backend to store all collected flows. The Network Observability operator does not install Loki directly, however we provide some guidance to help you there.\n\n- For a production or production-like environment usage, refer to [the operator documentation](https://docs.openshift.com/container-platform/latest/network_observability/installing-operators.html).\n\n- For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\nIf you prefer to not use Loki, you must set `spec.loki.enable` to `false` in `FlowCollector`.\nIn that case, you can still get the Prometheus metrics or export raw flows to a custom collector. But be aware that some of the Console plugin features will be disabled. For instance, you will not be able to view raw flows there, and the metrics / topology will have a more limited level of details, missing information such as pods or IPs.\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.0.5/config/samples/flows_v1beta2_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide on every node, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method. Make sure to disable it (`spec.loki.enable`) if you don't want to use Loki.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.\n\n- To enable availability zones awareness, set `spec.processor.addZone` to `true`.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- More information on [configuring metrics](https://github.com/netobserv/network-observability-operator/blob/1.0.5/docs/Metrics.md).\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network Observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "ipfix",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "labels": {
          "operatorframework.io/arch.amd64": "supported",
          "operatorframework.io/arch.arm64": "supported",
          "operatorframework.io/arch.ppc64le": "supported",
          "operatorframework.io/arch.s390x": "supported",
          "operatorframework.io/os.linux": "supported"
        },
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Kalman Meth",
            "email": "kmeth@redhat.com"
          },
          {
            "name": "Mohamed S. Mahmoud",
            "email": "mmahmoud@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          },
          {
            "name": "Ronen Schaffer",
            "email": "rschaffe@redhat.com"
          },
          {
            "name": "Steven Lee",
            "email": "stlee@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:b19c1783e289f9c892592baafa6ca87973654a406eedcd1e89923849b8e55d5b"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:f3607ecd0aae86bced57730dd721c986a49c7d0c1dfb1f541dbdaf373a19668f"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:ee924ca2c8320838345679ff19b4ba78fa6be42225e1a9ec2daaadc1bc38ee2b"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:f660759b145bd0053ac756def298ae9a3727d84685dc06cd3ee9bbbaaa68971a"
    },
    {
      "name": "network-observability-rhel9-operator-737ac2d174c1ce1e5435e67360b245f681eb4dc7dce35d3c3cf64636a131257b-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:737ac2d174c1ce1e5435e67360b245f681eb4dc7dce35d3c3cf64636a131257b"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:737ac2d174c1ce1e5435e67360b245f681eb4dc7dce35d3c3cf64636a131257b"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:f6c37678f1eb3279e603f63d2a821b72394c52d25c2ed5058dc29d4caa15d504"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "network-observability-operator.v1.7.0",
  "package": "netobserv-operator",
  "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:3a3c70c990bd3a012453857698433d674b98445e55cc9c5c4ed38eea29eb82b1",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta1"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowCollector",
        "version": "v1beta2"
      }
    },
    {
      "type": "olm.gvk",
      "value": {
        "group": "flows.netobserv.io",
        "kind": "FlowMetric",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "netobserv-operator",
        "version": "1.7.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1alpha1\",\n    \"kind\": \"FlowMetric\",\n    \"metadata\": {\n      \"labels\": {\n        \"app.kubernetes.io/created-by\": \"netobserv-operator\",\n        \"app.kubernetes.io/instance\": \"flowmetric-sample\",\n        \"app.kubernetes.io/managed-by\": \"kustomize\",\n        \"app.kubernetes.io/name\": \"flowmetric\",\n        \"app.kubernetes.io/part-of\": \"netobserv-operator\"\n      },\n      \"name\": \"flowmetric-sample\"\n    },\n    \"spec\": {\n      \"charts\": [\n        {\n          \"dashboardName\": \"Main\",\n          \"queries\": [\n            {\n              \"legend\": \"\",\n              \"promQL\": \"sum(rate($METRIC[2m]))\"\n            }\n          ],\n          \"title\": \"External ingress traffic\",\n          \"type\": \"SingleStat\",\n          \"unit\": \"Bps\"\n        },\n        {\n          \"dashboardName\": \"Main\",\n          \"queries\": [\n            {\n              \"legend\": \"{{DstK8S_Namespace}} / {{DstK8S_OwnerName}}\",\n              \"promQL\": \"sum(rate($METRIC{DstK8S_Namespace!=\\\"\\\"}[2m])) by (DstK8S_Namespace, DstK8S_OwnerName)\"\n            }\n          ],\n          \"sectionName\": \"External\",\n          \"title\": \"Top external ingress traffic per workload\",\n          \"type\": \"StackArea\",\n          \"unit\": \"Bps\"\n        }\n      ],\n      \"direction\": \"Ingress\",\n      \"filters\": [\n        {\n          \"field\": \"SrcSubnetLabel\",\n          \"matchType\": \"Absence\"\n        }\n      ],\n      \"labels\": [\n        \"DstK8S_HostName\",\n        \"DstK8S_Namespace\",\n        \"DstK8S_OwnerName\",\n        \"DstK8S_OwnerType\"\n      ],\n      \"metricName\": \"cluster_external_ingress_bytes_total\",\n      \"type\": \"Counter\",\n      \"valueField\": \"Bytes\"\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta1\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"EBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"DISABLED\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"port\": 9001,\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"app\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"infra\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"Pod\",\n              \"src_kind\": \"Pod\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"Service\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"register\": true\n      },\n      \"deploymentModel\": \"DIRECT\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"batchSize\": 10485760,\n        \"batchWait\": \"1s\",\n        \"enable\": true,\n        \"maxBackoff\": \"5s\",\n        \"maxRetries\": 2,\n        \"minBackoff\": \"1s\",\n        \"statusTls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false,\n          \"userCert\": {\n            \"certFile\": \"tls.crt\",\n            \"certKey\": \"tls.key\",\n            \"name\": \"loki-query-frontend-http\",\n            \"type\": \"secret\"\n          }\n        },\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"service-ca.crt\",\n            \"name\": \"loki-gateway-ca-bundle\",\n            \"type\": \"configmap\"\n          },\n          \"enable\": false,\n          \"insecureSkipVerify\": false\n        },\n        \"url\": \"http://loki.netobserv.svc:3100/\"\n      },\n      \"namespace\": \"netobserv\",\n      \"processor\": {\n        \"conversationEndTimeout\": \"10s\",\n        \"conversationHeartbeatInterval\": \"30s\",\n        \"conversationTerminatingTimeout\": \"5s\",\n        \"dropUnusedFields\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"FLOWS\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"includeList\": [\n            \"node_ingress_bytes_total\",\n            \"workload_ingress_bytes_total\",\n            \"namespace_flows_total\"\n          ],\n          \"server\": {\n            \"port\": 9102\n          }\n        },\n        \"port\": 2055,\n        \"profilePort\": 6060,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"flows.netobserv.io/v1beta2\",\n    \"kind\": \"FlowCollector\",\n    \"metadata\": {\n      \"name\": \"cluster\"\n    },\n    \"spec\": {\n      \"agent\": {\n        \"ebpf\": {\n          \"cacheActiveTimeout\": \"5s\",\n          \"cacheMaxFlows\": 100000,\n          \"excludeInterfaces\": [\n            \"lo\"\n          ],\n          \"imagePullPolicy\": \"IfNotPresent\",\n          \"interfaces\": [],\n          \"kafkaBatchSize\": 1048576,\n          \"logLevel\": \"info\",\n          \"metrics\": {\n            \"server\": {\n              \"port\": 9400\n            }\n          },\n          \"privileged\": false,\n          \"resources\": {\n            \"limits\": {\n              \"memory\": \"800Mi\"\n            },\n            \"requests\": {\n              \"cpu\": \"100m\",\n              \"memory\": \"50Mi\"\n            }\n          },\n          \"sampling\": 50\n        },\n        \"type\": \"eBPF\"\n      },\n      \"consolePlugin\": {\n        \"autoscaler\": {\n          \"maxReplicas\": 3,\n          \"metrics\": [\n            {\n              \"resource\": {\n                \"name\": \"cpu\",\n                \"target\": {\n                  \"averageUtilization\": 50,\n                  \"type\": \"Utilization\"\n                }\n              },\n              \"type\": \"Resource\"\n            }\n          ],\n          \"minReplicas\": 1,\n          \"status\": \"Disabled\"\n        },\n        \"enable\": true,\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"logLevel\": \"info\",\n        \"portNaming\": {\n          \"enable\": true,\n          \"portNames\": {\n            \"3100\": \"loki\"\n          }\n        },\n        \"quickFilters\": [\n          {\n            \"default\": true,\n            \"filter\": {\n              \"flow_layer\": \"\\\"app\\\"\"\n            },\n            \"name\": \"Applications\"\n          },\n          {\n            \"filter\": {\n              \"flow_layer\": \"\\\"infra\\\"\"\n            },\n            \"name\": \"Infrastructure\"\n          },\n          {\n            \"default\": true,\n            \"filter\": {\n              \"dst_kind\": \"\\\"Pod\\\"\",\n              \"src_kind\": \"\\\"Pod\\\"\"\n            },\n            \"name\": \"Pods network\"\n          },\n          {\n            \"filter\": {\n              \"dst_kind\": \"\\\"Service\\\"\"\n            },\n            \"name\": \"Services network\"\n          }\n        ],\n        \"replicas\": 1,\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"100Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"50Mi\"\n          }\n        }\n      },\n      \"deploymentModel\": \"Direct\",\n      \"exporters\": [],\n      \"kafka\": {\n        \"address\": \"kafka-cluster-kafka-bootstrap.netobserv\",\n        \"tls\": {\n          \"caCert\": {\n            \"certFile\": \"ca.crt\",\n            \"name\": \"kafka-cluster-cluster-ca-cert\",\n            \"type\": \"secret\"\n          },\n          \"enable\": false,\n          \"userCert\": {\n            \"certFile\": \"user.crt\",\n            \"certKey\": \"user.key\",\n            \"name\": \"flp-kafka\",\n            \"type\": \"secret\"\n          }\n        },\n        \"topic\": \"network-flows\"\n      },\n      \"loki\": {\n        \"enable\": true,\n        \"lokiStack\": {\n          \"name\": \"loki\"\n        },\n        \"mode\": \"Monolithic\",\n        \"monolithic\": {\n          \"tenantID\": \"netobserv\",\n          \"tls\": {\n            \"caCert\": {\n              \"certFile\": \"service-ca.crt\",\n              \"name\": \"loki-gateway-ca-bundle\",\n              \"type\": \"configmap\"\n            },\n            \"enable\": false\n          },\n          \"url\": \"http://loki.netobserv.svc:3100/\"\n        },\n        \"readTimeout\": \"30s\",\n        \"writeBatchSize\": 10485760,\n        \"writeBatchWait\": \"1s\",\n        \"writeTimeout\": \"10s\"\n      },\n      \"namespace\": \"netobserv\",\n      \"networkPolicy\": {\n        \"additionalNamespaces\": [],\n        \"enable\": false\n      },\n      \"processor\": {\n        \"imagePullPolicy\": \"IfNotPresent\",\n        \"kafkaConsumerAutoscaler\": null,\n        \"kafkaConsumerBatchSize\": 10485760,\n        \"kafkaConsumerQueueCapacity\": 1000,\n        \"kafkaConsumerReplicas\": 3,\n        \"logLevel\": \"info\",\n        \"logTypes\": \"Flows\",\n        \"metrics\": {\n          \"disableAlerts\": [],\n          \"server\": {\n            \"port\": 9401\n          }\n        },\n        \"resources\": {\n          \"limits\": {\n            \"memory\": \"800Mi\"\n          },\n          \"requests\": {\n            \"cpu\": \"100m\",\n            \"memory\": \"100Mi\"\n          }\n        }\n      },\n      \"prometheus\": {\n        \"querier\": {\n          \"enable\": true,\n          \"mode\": \"Auto\",\n          \"timeout\": \"30s\"\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Seamless Upgrades",
          "categories": "Monitoring, Networking",
          "console.openshift.io/plugins": "[\"netobserv-plugin\"]",
          "containerImage": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:93328e2f6e95c9cce31e096c6591c91d419471ef13f441b3f20b16984f3f2f9d",
          "createdAt": "2024-10-14T22:34:29",
          "description": "Network flows collector and monitoring solution",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "true",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "netobserv.io/version-release": "v1.7.0-67",
          "operatorframework.io/cluster-monitoring": "true",
          "operatorframework.io/initialization-resource": "{\"apiVersion\":\"flows.netobserv.io/v1beta2\", \"kind\":\"FlowCollector\",\"metadata\":{\"name\":\"cluster\"},\"spec\": {}}",
          "operatorframework.io/suggested-namespace": "openshift-netobserv-operator",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.25.3",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/netobserv/network-observability-operator",
          "support": "NetObserv team"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta1",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments."
            },
            {
              "name": "flowcollectors.flows.netobserv.io",
              "version": "v1beta2",
              "kind": "FlowCollector",
              "displayName": "Flow Collector",
              "description": "`FlowCollector` is the schema for the network flows collection API, which pilots and configures the underlying deployments.",
              "statusDescriptors": [
                {
                  "path": "namespace",
                  "displayName": "Namespace",
                  "description": "Namespace where console plugin and flowlogs-pipeline have been deployed.",
                  "x-descriptors": [
                    "urn:alm:descriptor:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Conditions of the FlowCollector instance health.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "deploymentModel",
                  "displayName": "Deployment model",
                  "description": "defines the desired type of deployment for flow processing."
                },
                {
                  "path": "agent",
                  "displayName": "Agent configuration",
                  "description": "for flows extraction."
                },
                {
                  "path": "agent.type",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ipfix",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf",
                  "displayName": "eBPF Agent configuration",
                  "description": "Settings related to the eBPF-based flow reporter.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:agent.type:eBPF"
                  ]
                },
                {
                  "path": "agent.ebpf.privileged",
                  "displayName": "Privileged mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheActiveTimeout",
                  "displayName": "Cache active timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.cacheMaxFlows",
                  "displayName": "Cache max flows",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.kafkaBatchSize",
                  "displayName": "Kafka batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "agent.ebpf.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "agent.ebpf.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf.flowFilter",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "agent.ebpf.metrics.enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "kafka",
                  "displayName": "Kafka configuration",
                  "description": "to use Kafka as a broker as part of the flow collection pipeline.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka"
                  ]
                },
                {
                  "path": "kafka.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "kafka.tls.enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "kafka.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.userCert",
                  "displayName": "User certificate when using mTLS",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.tls.caCert",
                  "displayName": "CA certificate",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:kafka.tls.enable:true"
                  ]
                },
                {
                  "path": "kafka.sasl",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor",
                  "displayName": "Processor configuration",
                  "description": "of the component that receives the flows from the agent, enriches them, generates metrics, and forwards them to the Loki persistence layer and/or any available exporter."
                },
                {
                  "path": "processor.multiClusterDeployment",
                  "displayName": "Multi-cluster deployment",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.clusterName",
                  "displayName": "Cluster name",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.multiClusterDeployment:true"
                  ]
                },
                {
                  "path": "processor.addZone",
                  "displayName": "Availability zones",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "processor.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor.metrics",
                  "displayName": "Metrics configuration"
                },
                {
                  "path": "processor.metrics.server",
                  "displayName": "Server configuration"
                },
                {
                  "path": "processor.metrics.server.tls",
                  "displayName": "TLS configuration"
                },
                {
                  "path": "processor.metrics.server.tls.insecureSkipVerify",
                  "displayName": "Insecure",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.provided",
                  "displayName": "Cert",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.metrics.server.tls.providedCaFile",
                  "displayName": "CA",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:processor.metrics.server.tls.type:Provided"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerReplicas",
                  "displayName": "Kafka consumer replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerAutoscaler",
                  "displayName": "kafka consumer autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerQueueCapacity",
                  "displayName": "Kafka consumer queue capacity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.kafkaConsumerBatchSize",
                  "displayName": "Kafka consumer batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:deploymentModel:Kafka",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.subnetLabels.openShiftAutoDetect",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "processor.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "processor.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements"
                  ]
                },
                {
                  "path": "loki",
                  "displayName": "Loki client settings",
                  "description": "for the flow store."
                },
                {
                  "path": "loki.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "loki.mode",
                  "displayName": "Mode",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "loki.lokiStack",
                  "displayName": "Loki stack",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:LokiStack"
                  ]
                },
                {
                  "path": "loki.monolithic",
                  "displayName": "Monolithic",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Monolithic"
                  ]
                },
                {
                  "path": "loki.microservices",
                  "displayName": "Microservices",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Microservices"
                  ]
                },
                {
                  "path": "loki.manual",
                  "displayName": "Manual",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.mode:Manual"
                  ]
                },
                {
                  "path": "loki.writeBatchWait",
                  "displayName": "Write batch wait",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeBatchSize",
                  "displayName": "Write batch size",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.writeTimeout",
                  "displayName": "Write timeout",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "loki.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "consolePlugin",
                  "displayName": "Console plugin configuration",
                  "description": "related to the OpenShift Console integration.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:loki.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.enable",
                  "displayName": "Enable",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:booleanSwitch"
                  ]
                },
                {
                  "path": "consolePlugin.portNaming",
                  "displayName": "Port naming",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.quickFilters",
                  "displayName": "Quick filters",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.replicas",
                  "displayName": "Replicas",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.autoscaler",
                  "displayName": "Horizontal pod autoscaler",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.logLevel",
                  "displayName": "Log level",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.imagePullPolicy",
                  "displayName": "Image pull policy",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:imagePullPolicy\"",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true",
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "consolePlugin.resources",
                  "displayName": "Resource Requirements",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:resourceRequirements",
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:consolePlugin.enable:true"
                  ]
                },
                {
                  "path": "consolePlugin.advanced",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "exporters",
                  "displayName": "Exporters",
                  "description": "additional optional exporters for custom consumption or storage.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                },
                {
                  "path": "exporters[0].type",
                  "displayName": "Type"
                },
                {
                  "path": "exporters[0].ipfix",
                  "displayName": "IPFIX configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:IPFIX"
                  ]
                },
                {
                  "path": "exporters[0].kafka",
                  "displayName": "Kafka configuration",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:exporters.type:Kafka"
                  ]
                },
                {
                  "path": "agent.ebpf.excludeInterfaces",
                  "displayName": "Exclude interfaces"
                },
                {
                  "path": "agent.ebpf.features",
                  "displayName": "Features"
                },
                {
                  "path": "agent.ebpf.interfaces",
                  "displayName": "Interfaces"
                },
                {
                  "path": "agent.ebpf.metrics",
                  "displayName": "Metrics"
                },
                {
                  "path": "agent.ebpf.metrics.disableAlerts",
                  "displayName": "Disable alerts"
                },
                {
                  "path": "agent.ebpf.metrics.server",
                  "displayName": "Server"
                },
                {
                  "path": "agent.ebpf.metrics.server.port",
                  "displayName": "Port"
                },
                {
                  "path": "agent.ebpf.sampling",
                  "displayName": "Sampling"
                },
                {
                  "path": "consolePlugin.portNaming.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "consolePlugin.portNaming.portNames",
                  "displayName": "Port names"
                },
                {
                  "path": "kafka.address",
                  "displayName": "Address"
                },
                {
                  "path": "kafka.topic",
                  "displayName": "Topic"
                },
                {
                  "path": "loki.lokiStack.name",
                  "displayName": "Name"
                },
                {
                  "path": "loki.lokiStack.namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "loki.manual.authToken",
                  "displayName": "Auth token"
                },
                {
                  "path": "loki.manual.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.manual.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.manual.statusUrl",
                  "displayName": "Status url"
                },
                {
                  "path": "loki.manual.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.microservices.ingesterUrl",
                  "displayName": "Ingester url"
                },
                {
                  "path": "loki.microservices.querierUrl",
                  "displayName": "Querier url"
                },
                {
                  "path": "loki.microservices.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.tenantID",
                  "displayName": "TenantID"
                },
                {
                  "path": "loki.monolithic.url",
                  "displayName": "Url"
                },
                {
                  "path": "loki.readTimeout",
                  "displayName": "Read timeout"
                },
                {
                  "path": "namespace",
                  "displayName": "Namespace"
                },
                {
                  "path": "networkPolicy",
                  "displayName": "Network policy"
                },
                {
                  "path": "networkPolicy.additionalNamespaces",
                  "displayName": "Additional namespaces"
                },
                {
                  "path": "networkPolicy.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "processor.logTypes",
                  "displayName": "Log types"
                },
                {
                  "path": "processor.metrics.disableAlerts",
                  "displayName": "Disable alerts"
                },
                {
                  "path": "processor.metrics.includeList",
                  "displayName": "Include list"
                },
                {
                  "path": "processor.metrics.server.port",
                  "displayName": "Port"
                },
                {
                  "path": "processor.subnetLabels",
                  "displayName": "Subnet labels"
                },
                {
                  "path": "processor.subnetLabels.customLabels",
                  "displayName": "Custom labels"
                },
                {
                  "path": "prometheus",
                  "displayName": "Prometheus"
                },
                {
                  "path": "prometheus.querier",
                  "displayName": "Querier"
                },
                {
                  "path": "prometheus.querier.enable",
                  "displayName": "Enable"
                },
                {
                  "path": "prometheus.querier.manual",
                  "displayName": "Manual"
                },
                {
                  "path": "prometheus.querier.manual.forwardUserToken",
                  "displayName": "Forward user token"
                },
                {
                  "path": "prometheus.querier.manual.url",
                  "displayName": "Url"
                },
                {
                  "path": "prometheus.querier.mode",
                  "displayName": "Mode"
                },
                {
                  "path": "prometheus.querier.timeout",
                  "displayName": "Timeout"
                }
              ]
            },
            {
              "name": "flowmetrics.flows.netobserv.io",
              "version": "v1alpha1",
              "kind": "FlowMetric",
              "displayName": "Flow Metric",
              "description": "`FlowMetric` is the schema for the custom metrics API, which allows to generate more metrics out of flow logs. You can find examples here: https://github.com/netobserv/network-observability-operator/tree/main/config/samples/flowmetrics"
            }
          ]
        },
        "description": "Network Observability is an OpenShift operator that deploys a monitoring pipeline consisting in:\n- an eBPF agent, that generates network flows from captured packets\n- flowlogs-pipeline, a component that collects, enriches and exports these flows\n- a Console plugin for flows visualization with powerful filtering options, a topology representation and more\n\nFlow data is then available in multiple ways, each optional:\n\n- As Cluster Monitoring metrics\n- As raw flow logs stored in Grafana Loki\n- As raw flow logs exported to a collector\n\n## Dependencies\n\n### Loki\n\n[Loki](https://grafana.com/oss/loki/), from GrafanaLabs, can optionally be used as the backend to store all collected flows. The Network Observability operator does not install Loki directly, however we provide some guidance to help you there.\n\n- For a production or production-like environment usage, refer to [the operator documentation](https://docs.openshift.com/container-platform/latest/network_observability/installing-operators.html).\n\n- For a quick try that is not suitable for production and not scalable (it deploys a single pod, configures a 10GB storage PVC, with 24 hours of retention), you can simply run the following commands:\n\n```\noc create namespace netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/1-storage.yaml) -n netobserv\noc apply -f <(curl -L https://raw.githubusercontent.com/netobserv/documents/5410e65b8e05aaabd1244a9524cfedd8ac8c56b5/examples/zero-click-loki/2-loki.yaml) -n netobserv\n```\n\nIf you prefer to not use Loki, you must set `spec.loki.enable` to `false` in `FlowCollector`.\nIn that case, you can still get the Prometheus metrics or export raw flows to a custom collector. But be aware that some of the Console plugin features will be disabled. For instance, you will not be able to view raw flows there, and the metrics / topology will have a more limited level of details, missing information such as pods or IPs.\n\n### Kafka\n\n[Apache Kafka](https://kafka.apache.org/) can optionally be used for a more resilient and scalable architecture. You can use for example [Strimzi](https://strimzi.io/), an operator-based distribution of Kafka for Kubernetes and OpenShift.\n\n### Grafana\n\n[Grafana](https://grafana.com/oss/grafana/) can optionally be installed for custom dashboards and query capabilities.\n\n## Configuration\n\nThe `FlowCollector` resource is used to configure the operator and its managed components. A comprehensive documentation is [available here](https://github.com/netobserv/network-observability-operator/blob/1.6.1-community/docs/FlowCollector.md), and a full sample file [there](https://github.com/netobserv/network-observability-operator/blob/1.6.1-community/config/samples/flows_v1beta2_flowcollector.yaml).\n\nTo edit configuration in cluster, run:\n\n```bash\noc edit flowcollector cluster\n```\n\nAs it operates cluster-wide on every node, only a single `FlowCollector` is allowed, and it has to be named `cluster`.\n\nA couple of settings deserve special attention:\n\n- Sampling (`spec.agent.ebpf.sampling`): a value of `100` means: one flow every 100 is sampled. `1` means all flows are sampled. The lower it is, the more flows you get, and the more accurate are derived metrics, but the higher amount of resources are consumed. By default, sampling is set to 50 (ie. 1:50). Note that more sampled flows also means more storage needed. We recommend to start with default values and refine empirically, to figure out which setting your cluster can manage.\n\n- Loki (`spec.loki`): configure here how to reach Loki. The default values match the Loki quick install paths mentioned above, but you might have to configure differently if you used another installation method. Make sure to disable it (`spec.loki.enable`) if you don't want to use Loki.\n\n- Quick filters (`spec.consolePlugin.quickFilters`): configure preset filters to be displayed in the Console plugin. They offer a way to quickly switch from filters to others, such as showing / hiding pods network, or infrastructure network, or application network, etc. They can be tuned to reflect the different workloads running on your cluster. For a list of available filters, [check this page](https://github.com/netobserv/network-observability-operator/blob/1.6.1-community/docs/QuickFilters.md).\n\n- Kafka (`spec.deploymentModel: KAFKA` and `spec.kafka`): when enabled, integrates the flow collection pipeline with Kafka, by splitting ingestion from transformation (kube enrichment, derived metrics, ...). Kafka can provide better scalability, resiliency and high availability ([view more details](https://www.redhat.com/en/topics/integration/what-is-apache-kafka)). Assumes Kafka is already deployed and a topic is created.\n\n- Exporters (`spec.exporters`) an optional list of exporters to which to send enriched flows. KAFKA and IPFIX exporters are supported. This allows you to define any custom storage or processing that can read from Kafka or use the IPFIX standard.\n\n- To enable availability zones awareness, set `spec.processor.addZone` to `true`.\n\n## Further reading\n\nPlease refer to the documentation on GitHub for more information.\n\nThis documentation includes:\n\n- An [overview](https://github.com/netobserv/network-observability-operator#openshift-console) of the features, with screenshots\n- More information on [configuring metrics](https://github.com/netobserv/network-observability-operator/blob/1.6.1-community/docs/Metrics.md).\n- A [performance](https://github.com/netobserv/network-observability-operator#performance-fine-tuning) section, for fine-tuning\n- A [security](https://github.com/netobserv/network-observability-operator#securing-data-and-communications) section\n- An [F.A.Q.](https://github.com/netobserv/network-observability-operator#faq--troubleshooting) section\n",
        "displayName": "Network Observability",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "network observability",
          "ebpf",
          "ipfix",
          "flow tracing",
          "flows",
          "topology",
          "network",
          "observability"
        ],
        "labels": {
          "operatorframework.io/arch.amd64": "supported",
          "operatorframework.io/arch.arm64": "supported",
          "operatorframework.io/arch.ppc64le": "supported",
          "operatorframework.io/arch.s390x": "supported",
          "operatorframework.io/os.linux": "supported"
        },
        "links": [
          {
            "name": "Project page",
            "url": "https://github.com/netobserv/network-observability-operator"
          },
          {
            "name": "Issue tracker",
            "url": "https://github.com/netobserv/network-observability-operator/issues"
          },
          {
            "name": "Discussion board",
            "url": "https://github.com/netobserv/network-observability-operator/discussions"
          }
        ],
        "maintainers": [
          {
            "name": "Julien Pinsonneau",
            "email": "jpinsonn@redhat.com"
          },
          {
            "name": "Joel Takvorian",
            "email": "jtakvori@redhat.com"
          },
          {
            "name": "Kalman Meth",
            "email": "kmeth@redhat.com"
          },
          {
            "name": "Mohamed S. Mahmoud",
            "email": "mmahmoud@redhat.com"
          },
          {
            "name": "Olivier Cazade",
            "email": "ocazade@redhat.com"
          },
          {
            "name": "Ronen Schaffer",
            "email": "rschaffe@redhat.com"
          },
          {
            "name": "Steven Lee",
            "email": "stlee@redhat.com"
          }
        ],
        "maturity": "stable",
        "minKubeVersion": "1.23.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "console_plugin",
      "image": "registry.redhat.io/network-observability/network-observability-console-plugin-rhel9@sha256:c3be91efcd4cd272f5dc3eabe53ac76f04bc22adbe61f86d42e83e77f092cd36"
    },
    {
      "name": "ebpf_agent",
      "image": "registry.redhat.io/network-observability/network-observability-ebpf-agent-rhel9@sha256:9bc712edc0e96525c59c46e8693939ab48514ce6f4b41e3ccf115ad8f6140b96"
    },
    {
      "name": "flowlogs_pipeline",
      "image": "registry.redhat.io/network-observability/network-observability-flowlogs-pipeline-rhel9@sha256:28bdb6eae77da596c0def119c879e4fb3849065243fc804f4abf5480453b7b6d"
    },
    {
      "name": "",
      "image": "registry.redhat.io/network-observability/network-observability-operator-bundle@sha256:3a3c70c990bd3a012453857698433d674b98445e55cc9c5c4ed38eea29eb82b1"
    },
    {
      "name": "network-observability-rhel9-operator-93328e2f6e95c9cce31e096c6591c91d419471ef13f441b3f20b16984f3f2f9d-annotation",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:93328e2f6e95c9cce31e096c6591c91d419471ef13f441b3f20b16984f3f2f9d"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/network-observability/network-observability-rhel9-operator@sha256:93328e2f6e95c9cce31e096c6591c91d419471ef13f441b3f20b16984f3f2f9d"
    },
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:e34f912158985525f6efb3c4b675f20854fc677c867d12fe3cd2e971309428dc"
    }
  ]
}
