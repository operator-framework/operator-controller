{
  "schema": "olm.package",
  "name": "service-registry-operator",
  "defaultChannel": "2.x",
  "icon": {
    "base64data": "PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz48c3ZnIGlkPSJ1dWlkLWQ1YjFlMTUzLTVjOTgtNDZkOC1iNDg5LWYzNTJiY2QxMjNmZiIgeG1sbnM9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIiB2aWV3Qm94PSIwIDAgMzggMzgiPjx0aXRsZT5SZWQgSGF0IGJ1aWxkIG9mIEFwaWN1cmlvIFJlZ2lzdHJ5IGljb248L3RpdGxlPjxkZWZzPjxzdHlsZT4udXVpZC1hOGRiZjUzNS0xYzk2LTRkM2ItODc2OS1kMzY4MjY3MTJmNmF7ZmlsbDojZTAwO30udXVpZC1mODEzMDFjMy04MGVjLTQzMTEtOGNhYy04YzFkMzNkYWUwNDV7ZmlsbDojZmZmO30udXVpZC1hZTNiMjdiZS1hOGZlLTQ2N2EtOGUwZi1kOWZmMjA5OGY3Yzd7ZmlsbDojZTBlMGUwO308L3N0eWxlPjwvZGVmcz48cGF0aCBjbGFzcz0idXVpZC1mODEzMDFjMy04MGVjLTQzMTEtOGNhYy04YzFkMzNkYWUwNDUiIGQ9Im0yOCwxSDEwQzUuMDI5NDQsMSwxLDUuMDI5NDQsMSwxMHYxOGMwLDQuOTcwNTcsNC4wMjk0NCw5LDksOWgxOGM0Ljk3MDU2LDAsOS00LjAyOTQzLDktOVYxMGMwLTQuOTcwNTYtNC4wMjk0NC05LTktOWgwWiIvPjxwYXRoIGNsYXNzPSJ1dWlkLWFlM2IyN2JlLWE4ZmUtNDY3YS04ZTBmLWQ5ZmYyMDk4ZjdjNyIgZD0ibTI4LDIuMjVjNC4yNzMzMiwwLDcuNzUsMy40NzY2OCw3Ljc1LDcuNzV2MThjMCw0LjI3MzMyLTMuNDc2NjgsNy43NS03Ljc1LDcuNzVIMTBjLTQuMjczMzIsMC03Ljc1LTMuNDc2NjgtNy43NS03Ljc1VjEwYzAtNC4yNzMzMiwzLjQ3NjY4LTcuNzUsNy43NS03Ljc1aDE4bTAtMS4yNUgxMEM1LjAyOTQyLDEsMSw1LjAyOTQyLDEsMTB2MThjMCw0Ljk3MDU4LDQuMDI5NDIsOSw5LDloMThjNC45NzA1OCwwLDktNC4wMjk0Miw5LTlWMTBjMC00Ljk3MDU4LTQuMDI5NDItOS05LTloMFoiLz48cGF0aCBjbGFzcz0idXVpZC1hOGRiZjUzNS0xYzk2LTRkM2ItODc2OS1kMzY4MjY3MTJmNmEiIGQ9Im0yNywyNy42MjVoLTZjLS4zNDQ3MywwLS42MjUtLjI4MDI3LS42MjUtLjYyNXYtNmMwLS4zNDQ3My4yODAyNy0uNjI1LjYyNS0uNjI1aDZjLjM0NDczLDAsLjYyNS4yODAyNy42MjUuNjI1djZjMCwuMzQ0NzMtLjI4MDI3LjYyNS0uNjI1LjYyNVptLTUuMzc1LTEuMjVoNC43NXYtNC43NWgtNC43NXY0Ljc1WiIvPjxwYXRoIGNsYXNzPSJ1dWlkLWE4ZGJmNTM1LTFjOTYtNGQzYi04NzY5LWQzNjgyNjcxMmY2YSIgZD0ibTI3LDE3LjYyNWgtNmMtLjM0NDczLDAtLjYyNS0uMjgwMjctLjYyNS0uNjI1di02YzAtLjM0NDczLjI4MDI3LS42MjUuNjI1LS42MjVoNmMuMzQ0NzMsMCwuNjI1LjI4MDI3LjYyNS42MjV2NmMwLC4zNDQ3My0uMjgwMjcuNjI1LS42MjUuNjI1Wm0tNS4zNzUtMS4yNWg0Ljc1di00Ljc1aC00Ljc1djQuNzVaIi8+PHBhdGggY2xhc3M9InV1aWQtYThkYmY1MzUtMWM5Ni00ZDNiLTg3NjktZDM2ODI2NzEyZjZhIiBkPSJtMTcsMTcuNjI1aC02Yy0uMzQ0NzMsMC0uNjI1LS4yODAyNy0uNjI1LS42MjV2LTZjMC0uMzQ0NzMuMjgwMjctLjYyNS42MjUtLjYyNWg2Yy4zNDQ3MywwLC42MjUuMjgwMjcuNjI1LjYyNXY2YzAsLjM0NDczLS4yODAyNy42MjUtLjYyNS42MjVabS01LjM3NS0xLjI1aDQuNzV2LTQuNzVoLTQuNzV2NC43NVoiLz48cGF0aCBkPSJtMTcuNjE5MzgsMjAuOTcyMDVjLS4wMDMzLS4wNzIwMi0uMDE0ODktLjE0MzgtLjA0Mjg1LS4yMTE1NS0uMDIwMDItLjA0Nzg1LS4wNTM4My0uMDg2NjctLjA4NDQ3LS4xMjc2OS0uMDE4MDctLjAyNDQxLS4wMjc1OS0uMDUyOTgtLjA0OTY4LS4wNzUyLS4wMjc1OS0uMDI3NTktLjA2MjUtLjA0MDY1LS4wOTM1MS0uMDYyMDEtLjAzNTY0LS4wMjQ5LS4wNjc2My0uMDU0OTMtLjEwODI4LS4wNzE5LS4wNzc3Ni0uMDMyMzUtLjE2MDI4LS4wNDkwNy0uMjQzMDQtLjA0ODcxaC00Ljk5NzU2Yy0uMzQ0NzMsMC0uNjI1LjI4MDI3LS42MjUuNjI1cy4yODAyNy42MjUuNjI1LjYyNWgzLjQ5MDIzbC00LjkzMjYyLDQuOTMyNjJjLS4yNDMxNi4yNDQxNC0uMjQzMTYuNjQwNjIsMCwuODg0NzcuMTIyMDcuMTIyMDcuMjgyMjMuMTgyNjIuNDQyMzguMTgyNjJzLjMyMDMxLS4wNjA1NS40NDIzOC0uMTgyNjJsNC45MzI2Mi00LjkzMjYydjMuNDkwMjNjMCwuMzQ0NzMuMjgwMjcuNjI1LjYyNS42MjVzLjYyNS0uMjgwMjcuNjI1LS42MjV2LTVjMC0uMDA5ODktLjAwNTEzLS4wMTgwNy0uMDA1NjItLjAyNzk1WiIvPjwvc3ZnPgo=",
    "mediatype": "image/svg+xml"
  }
}
{
  "schema": "olm.channel",
  "name": "2.0.x",
  "package": "service-registry-operator",
  "entries": [
    {
      "name": "service-registry-operator.v2.0.0"
    },
    {
      "name": "service-registry-operator.v2.0.1",
      "replaces": "service-registry-operator.v2.0.0"
    },
    {
      "name": "service-registry-operator.v2.0.2",
      "replaces": "service-registry-operator.v2.0.1"
    },
    {
      "name": "service-registry-operator.v2.0.3",
      "replaces": "service-registry-operator.v2.0.2"
    },
    {
      "name": "service-registry-operator.v2.0.4",
      "replaces": "service-registry-operator.v2.0.3"
    },
    {
      "name": "service-registry-operator.v2.0.5"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1646309885.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1647938417.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1648813064.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1651047781.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1652429755.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1652887585.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1654503709.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1655396591.p",
      "replaces": "service-registry-operator.v2.0.4",
      "skips": [
        "service-registry-operator.v2.0.5-0.1654503709.p",
        "service-registry-operator.v2.0.5-0.1652887585.p",
        "service-registry-operator.v2.0.5-0.1652429755.p",
        "service-registry-operator.v2.0.5-0.1651047781.p",
        "service-registry-operator.v2.0.5-0.1648813064.p",
        "service-registry-operator.v2.0.5-0.1647938417.p",
        "service-registry-operator.v2.0.5-0.1646309885.p",
        "service-registry-operator.v2.0.5"
      ]
    },
    {
      "name": "service-registry-operator.v2.0.6",
      "replaces": "service-registry-operator.v2.0.5-0.1655396591.p"
    },
    {
      "name": "service-registry-operator.v2.0.7"
    },
    {
      "name": "service-registry-operator.v2.0.7-0.1661784420.p"
    },
    {
      "name": "service-registry-operator.v2.0.7-0.1662549961.p",
      "replaces": "service-registry-operator.v2.0.6",
      "skips": [
        "service-registry-operator.v2.0.7-0.1661784420.p",
        "service-registry-operator.v2.0.7"
      ]
    }
  ]
}
{
  "schema": "olm.channel",
  "name": "2.x",
  "package": "service-registry-operator",
  "entries": [
    {
      "name": "service-registry-operator.v2.0.0"
    },
    {
      "name": "service-registry-operator.v2.0.1",
      "replaces": "service-registry-operator.v2.0.0"
    },
    {
      "name": "service-registry-operator.v2.0.2",
      "replaces": "service-registry-operator.v2.0.1"
    },
    {
      "name": "service-registry-operator.v2.0.3",
      "replaces": "service-registry-operator.v2.0.2"
    },
    {
      "name": "service-registry-operator.v2.0.4",
      "replaces": "service-registry-operator.v2.0.3"
    },
    {
      "name": "service-registry-operator.v2.0.5"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1646309885.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1647938417.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1648813064.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1651047781.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1652429755.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1652887585.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1654503709.p"
    },
    {
      "name": "service-registry-operator.v2.0.5-0.1655396591.p",
      "replaces": "service-registry-operator.v2.0.4",
      "skips": [
        "service-registry-operator.v2.0.5-0.1654503709.p",
        "service-registry-operator.v2.0.5-0.1652887585.p",
        "service-registry-operator.v2.0.5-0.1652429755.p",
        "service-registry-operator.v2.0.5-0.1651047781.p",
        "service-registry-operator.v2.0.5-0.1648813064.p",
        "service-registry-operator.v2.0.5-0.1647938417.p",
        "service-registry-operator.v2.0.5-0.1646309885.p",
        "service-registry-operator.v2.0.5"
      ]
    },
    {
      "name": "service-registry-operator.v2.0.6",
      "replaces": "service-registry-operator.v2.0.5-0.1655396591.p"
    },
    {
      "name": "service-registry-operator.v2.0.7"
    },
    {
      "name": "service-registry-operator.v2.0.7-0.1661784420.p"
    },
    {
      "name": "service-registry-operator.v2.0.7-0.1662549961.p",
      "replaces": "service-registry-operator.v2.0.6",
      "skips": [
        "service-registry-operator.v2.0.7-0.1661784420.p",
        "service-registry-operator.v2.0.7"
      ]
    },
    {
      "name": "service-registry-operator.v2.1.0",
      "replaces": "service-registry-operator.v2.0.7-0.1662549961.p"
    },
    {
      "name": "service-registry-operator.v2.1.1",
      "replaces": "service-registry-operator.v2.1.0"
    },
    {
      "name": "service-registry-operator.v2.1.2"
    },
    {
      "name": "service-registry-operator.v2.1.2-0.1676389596.p",
      "replaces": "service-registry-operator.v2.1.1",
      "skips": [
        "service-registry-operator.v2.1.2"
      ]
    },
    {
      "name": "service-registry-operator.v2.1.3",
      "replaces": "service-registry-operator.v2.1.2-0.1676389596.p"
    },
    {
      "name": "service-registry-operator.v2.1.4",
      "replaces": "service-registry-operator.v2.1.3"
    },
    {
      "name": "service-registry-operator.v2.1.5",
      "replaces": "service-registry-operator.v2.1.4"
    },
    {
      "name": "service-registry-operator.v2.2.0",
      "replaces": "service-registry-operator.v2.1.5"
    },
    {
      "name": "service-registry-operator.v2.2.1",
      "replaces": "service-registry-operator.v2.2.0"
    },
    {
      "name": "service-registry-operator.v2.2.2"
    },
    {
      "name": "service-registry-operator.v2.2.2-0.1697116886.p",
      "replaces": "service-registry-operator.v2.2.1",
      "skips": [
        "service-registry-operator.v2.2.2"
      ]
    },
    {
      "name": "service-registry-operator.v2.2.3"
    },
    {
      "name": "service-registry-operator.v2.2.3-0.1698369839.p",
      "replaces": "service-registry-operator.v2.2.2-0.1697116886.p",
      "skips": [
        "service-registry-operator.v2.2.3"
      ]
    },
    {
      "name": "service-registry-operator.v2.3.0",
      "replaces": "service-registry-operator.v2.2.3-0.1698369839.p"
    },
    {
      "name": "service-registry-operator.v2.3.1"
    },
    {
      "name": "service-registry-operator.v2.3.1-0.1706181988.p",
      "replaces": "service-registry-operator.v2.3.0",
      "skips": [
        "service-registry-operator.v2.3.1"
      ]
    },
    {
      "name": "service-registry-operator.v2.3.2",
      "replaces": "service-registry-operator.v2.3.1-0.1706181988.p"
    },
    {
      "name": "service-registry-operator.v2.3.3",
      "replaces": "service-registry-operator.v2.3.2"
    },
    {
      "name": "service-registry-operator.v2.3.4"
    },
    {
      "name": "service-registry-operator.v2.3.4-0.1716987426.p",
      "replaces": "service-registry-operator.v2.3.3",
      "skips": [
        "service-registry-operator.v2.3.4"
      ]
    },
    {
      "name": "service-registry-operator.v2.3.5",
      "replaces": "service-registry-operator.v2.3.4-0.1716987426.p"
    },
    {
      "name": "service-registry-operator.v2.6.1"
    },
    {
      "name": "service-registry-operator.v2.6.1-0.1724927626.p",
      "replaces": "service-registry-operator.v2.3.5",
      "skips": [
        "service-registry-operator.v2.6.1"
      ]
    },
    {
      "name": "service-registry-operator.v2.6.3",
      "replaces": "service-registry-operator.v2.6.1-0.1724927626.p"
    },
    {
      "name": "service-registry-operator.v2.6.5"
    },
    {
      "name": "service-registry-operator.v2.6.5-0.1729511936.p"
    },
    {
      "name": "service-registry-operator.v2.6.5-0.1730982111.p"
    },
    {
      "name": "service-registry-operator.v2.6.5-0.1731946870.p",
      "replaces": "service-registry-operator.v2.6.3",
      "skips": [
        "service-registry-operator.v2.6.5-0.1729511936.p",
        "service-registry-operator.v2.6.5",
        "service-registry-operator.v2.6.5-0.1730982111.p"
      ]
    },
    {
      "name": "service-registry-operator.v2.6.6",
      "replaces": "service-registry-operator.v2.6.5-0.1731946870.p"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.0",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:93da36db720902a958cfe3df7b0c67a96bd0fc2cf57f52c205f1e0dde8764bcd",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d8fbd6887a189e09882ed678f801be79aa8a179838a3a5d642f047c389d5f4d5",
          "createdAt": "2021-04-27",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "service-registry-kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:dd8e52ace2582c6300c73743314618f3b52eb6e56ab3e8c04b5a9746fbad5717"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:93da36db720902a958cfe3df7b0c67a96bd0fc2cf57f52c205f1e0dde8764bcd"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d8fbd6887a189e09882ed678f801be79aa8a179838a3a5d642f047c389d5f4d5"
    },
    {
      "name": "service-registry-sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:5b0312f2fd99619c1b6ea3d091d63a92be1879157705a4d45ef5cf2b731e83d9"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.1",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:042a75d8910d68719bdc28a59d735a871986e3ceeb11ed135ebd1d7991a6df7c",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:4b1e04e0d5a7e4b7f238dece97989902c9c1454ed63faba04908f9a2318d0874",
          "createdAt": "2021-04-27",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "service-registry-kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:44acf151ce5688660eb6a4e6e42de168481a9cf1784ed17da9bbb22dfcc2683d"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:042a75d8910d68719bdc28a59d735a871986e3ceeb11ed135ebd1d7991a6df7c"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:4b1e04e0d5a7e4b7f238dece97989902c9c1454ed63faba04908f9a2318d0874"
    },
    {
      "name": "service-registry-sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:0beabf8ba6fe04ae2c592840161c12b1dfe25a9bf8eefc93b0173d54374fa362"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.2",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:eebda62ff6e6fa9f141dd14680f385aabcdacfe95d8a77dda83b0039876bf3c5",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.2"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:9bb116a69ccc8bdae62af161a1efc6b4a0701e4573e5e31e1f383ef676bd7760",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:a5bb49171a6b12d8d6d418956a185e5c79a72ce4722d2ffeff91ab75a9b67960"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:eebda62ff6e6fa9f141dd14680f385aabcdacfe95d8a77dda83b0039876bf3c5"
    },
    {
      "name": "service-registry-rhel8-operator-9bb116a69ccc8bdae62af161a1efc6b4a0701e4573e5e31e1f383ef676bd7760-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:9bb116a69ccc8bdae62af161a1efc6b4a0701e4573e5e31e1f383ef676bd7760"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:9bb116a69ccc8bdae62af161a1efc6b4a0701e4573e5e31e1f383ef676bd7760"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:123de0d60c8b03c312876203e2e34e5645b342af2a59b8a75dfd6fd269bf5482"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.3",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:106a4bd03f1e53ae8639f4b372e29d8315d3c740c3c80249934b0608f0d2630e",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.3"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:41c96defe21a7b610e0003fdbfcf94c96bf4f8f2ac762acd4e85d97383258219",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:bf7a076f0f81229be6439a046c84967e245def9df0cb2955169c3d000cb3f2b1"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:106a4bd03f1e53ae8639f4b372e29d8315d3c740c3c80249934b0608f0d2630e"
    },
    {
      "name": "service-registry-rhel8-operator-41c96defe21a7b610e0003fdbfcf94c96bf4f8f2ac762acd4e85d97383258219-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:41c96defe21a7b610e0003fdbfcf94c96bf4f8f2ac762acd4e85d97383258219"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:41c96defe21a7b610e0003fdbfcf94c96bf4f8f2ac762acd4e85d97383258219"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:667fd4360994d67c0d2f148bfa6d5d6353dee33868f1497d0ffed172efe7e264"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.4",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:e539a35805767000bf1b12031ab6d3e2bdd48980260d13d370882424757e6519",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.4"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:c2bb5159c62e32264ffc076afed773469992224485ae0089487a7072c2063a0b"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:e539a35805767000bf1b12031ab6d3e2bdd48980260d13d370882424757e6519"
    },
    {
      "name": "service-registry-rhel8-operator-fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:ae91fb2613457cf5629d0c2a0ea63511937c36f1b5c0a9c14597a0eb28e25439"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.5",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:8e8d9b191e9acd606d69819c73351e9815f5db4af759e982772f392a92db3704",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.5"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:93e091aa5447cc58805368c3101e71afed3cc02e68a1b8b568586875e76cdcba"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:8e8d9b191e9acd606d69819c73351e9815f5db4af759e982772f392a92db3704"
    },
    {
      "name": "service-registry-rhel8-operator-fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:e07276a26c96631733dd1c98f655a11e54d65c2e91e3ba6f3ee8c2e097206431"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.5-0.1646309885.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:99192b998714a42c783c39ec8de8bd42886d5b1621107955522b6d6a727a3da8",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.5+0.1646309885.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b0bfb95bf91432468dadd5dae149d2d793f2e201dc91d464bbaf18c856ad83aa",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.5",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:31e82f441c9ace5d2a13fc9469ce1c2c3ee85c39b013085591bbad676f6760bb"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:99192b998714a42c783c39ec8de8bd42886d5b1621107955522b6d6a727a3da8"
    },
    {
      "name": "service-registry-rhel8-operator-b0bfb95bf91432468dadd5dae149d2d793f2e201dc91d464bbaf18c856ad83aa-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b0bfb95bf91432468dadd5dae149d2d793f2e201dc91d464bbaf18c856ad83aa"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b0bfb95bf91432468dadd5dae149d2d793f2e201dc91d464bbaf18c856ad83aa"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:110a8440559508f8855a90028cd703b456f11e3549644f92696dd45cec700db1"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.5-0.1647938417.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:78d8e6beca2c52169492a4fee8297d8661ff0d57243b7a418322320fad427815",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.5+0.1647938417.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b0bfb95bf91432468dadd5dae149d2d793f2e201dc91d464bbaf18c856ad83aa",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.5-0.1646309885.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:44d1a72cc4b07c8adb8b0860ae9bbc09d70cfadb45324426440d6d9d2fbb2d9e"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:78d8e6beca2c52169492a4fee8297d8661ff0d57243b7a418322320fad427815"
    },
    {
      "name": "service-registry-rhel8-operator-b0bfb95bf91432468dadd5dae149d2d793f2e201dc91d464bbaf18c856ad83aa-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b0bfb95bf91432468dadd5dae149d2d793f2e201dc91d464bbaf18c856ad83aa"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b0bfb95bf91432468dadd5dae149d2d793f2e201dc91d464bbaf18c856ad83aa"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:cd7fa47f7a532388fa044162212005aacf2420be0c616e96e6325b29a49484be"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.5-0.1648813064.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:334065bb42d201bb30fb2b1f230555a628e546f455654c03ba773da0e52c7ccf",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.5+0.1648813064.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:57cdd0e19a900063aebead7ca1a04a68d928d86fa2f75b0b1fe2296e6b6202a6",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.5-0.1647938417.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:7cd78c8846e1e8a4e2cd7a95bf4f5618cb9926cd79ca7cf9987282941dc94bd5"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:334065bb42d201bb30fb2b1f230555a628e546f455654c03ba773da0e52c7ccf"
    },
    {
      "name": "service-registry-rhel8-operator-57cdd0e19a900063aebead7ca1a04a68d928d86fa2f75b0b1fe2296e6b6202a6-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:57cdd0e19a900063aebead7ca1a04a68d928d86fa2f75b0b1fe2296e6b6202a6"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:57cdd0e19a900063aebead7ca1a04a68d928d86fa2f75b0b1fe2296e6b6202a6"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:83fd55727a48170c67f02db9f3003a752a8981c7e35edd784604f6cb9927dea0"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.5-0.1651047781.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:0f7fa76bb08857a4092058931ac213edfc15423151dc8405442ac55838ec4a27",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.5+0.1651047781.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:57cdd0e19a900063aebead7ca1a04a68d928d86fa2f75b0b1fe2296e6b6202a6",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.5-0.1648813064.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:2cfda3be05c75087c500cdc70efbf36cb497200f658b9b050a3535676f0e11c4"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:0f7fa76bb08857a4092058931ac213edfc15423151dc8405442ac55838ec4a27"
    },
    {
      "name": "service-registry-rhel8-operator-57cdd0e19a900063aebead7ca1a04a68d928d86fa2f75b0b1fe2296e6b6202a6-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:57cdd0e19a900063aebead7ca1a04a68d928d86fa2f75b0b1fe2296e6b6202a6"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:57cdd0e19a900063aebead7ca1a04a68d928d86fa2f75b0b1fe2296e6b6202a6"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:ecdd81f6ade2f215e2d6bd651961f1a5eb208955ee129bbea668dc96fec9585a"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.5-0.1652429755.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:60ee868879f3204f882b6ccd7065ac3244ecb28db37df8eac44020f266764d0b",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.5+0.1652429755.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.5-0.1651047781.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:64b0a3fabb0e272d3d247a1e4b406576d5cf57822236ce4dad8af48eb7e36fd0"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:60ee868879f3204f882b6ccd7065ac3244ecb28db37df8eac44020f266764d0b"
    },
    {
      "name": "service-registry-rhel8-operator-561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:1d6148d4167326dea74bdb4289f103b45b439886ef049a9b585885d7cbd13b1e"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.5-0.1652887585.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:c280a19a3b9fefc3ed74e8f0551c2fa145e2e7bd757526fa058963e5290e83a1",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.5+0.1652887585.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.5-0.1652429755.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:0461855b824bc2cd5dcdbc437e80e4163ce25a15738738d3058c8e1999b5e498"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:c280a19a3b9fefc3ed74e8f0551c2fa145e2e7bd757526fa058963e5290e83a1"
    },
    {
      "name": "service-registry-rhel8-operator-561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:19beadedda13c41a51628ded9e2e3116f7ee9e108c95eed3a14b77b836d22f3f"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.5-0.1654503709.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:21fc017a518221b7fd792cf37be2ae4689801be51aee4eb0e4bf5e33399c4e46",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.5+0.1654503709.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.5-0.1652887585.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:c757abdc1cc3498abba7fe580e247f8794823132ec5d2bc224b93e6cfe89323d"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:21fc017a518221b7fd792cf37be2ae4689801be51aee4eb0e4bf5e33399c4e46"
    },
    {
      "name": "service-registry-rhel8-operator-561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:561c703fc851aabbea5b570381a9798230bcb18e0e1e1d5698fec25b422a6b19"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:966681b3084c9551435b2f3c24e254c01c4f1fc3740984124a7f461828280983"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.5-0.1655396591.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:42cf1d379047658fe8808a3253b557ea1b20a6a8b1f2522767aad3cac78a1640",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.5+0.1655396591.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2",
          "createdAt": "2021-08-04",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.5-0.1654503709.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:377b0710ca1b669b4269eaa8ee670dd8f1daf13f043ee16394fa0bb742b351bd"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:42cf1d379047658fe8808a3253b557ea1b20a6a8b1f2522767aad3cac78a1640"
    },
    {
      "name": "service-registry-rhel8-operator-a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:1fe394fbd44a8567bcb2ebbd880af9e0fb8c375ae6083cb9ee515ab4f18e58a2"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.6",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:ed025aff17cc3150f6734d4698506583f76aa9a52d7d855bac29157cc92c92ab",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.6"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a",
          "createdAt": "2022-06-24",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:93e091aa5447cc58805368c3101e71afed3cc02e68a1b8b568586875e76cdcba"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:ed025aff17cc3150f6734d4698506583f76aa9a52d7d855bac29157cc92c92ab"
    },
    {
      "name": "service-registry-rhel8-operator-fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:fae9b4108356f94a61e485fd5888c368fd6b244a7b5966789b27618826c3eb7a"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:e07276a26c96631733dd1c98f655a11e54d65c2e91e3ba6f3ee8c2e097206431"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.7",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:96091cbc399627608c6d60d940bea077ece2372de3ee37750b36c7a1333ce203",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.7"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2",
          "createdAt": "2022-06-24",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:18e4e5de70caa30f5fea9a29c303deb5f5ecf5342761309e5734a80d333d5f79"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:96091cbc399627608c6d60d940bea077ece2372de3ee37750b36c7a1333ce203"
    },
    {
      "name": "service-registry-rhel8-operator-a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:6ac190871103aa2b3939e08a6f0462e1cd0651aefa658caa8d1fa45361227098"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.7-0.1661784420.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:f11e6d25fcf6a1afdde382e4f51060175b01d022b986f0378c3132a86085a7e1",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.7+0.1661784420.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2",
          "createdAt": "2022-06-24",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.7",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:831f082e35e1702b043aba551c14749dfd79662b7cc00231150bfa948e2d3436"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:f11e6d25fcf6a1afdde382e4f51060175b01d022b986f0378c3132a86085a7e1"
    },
    {
      "name": "service-registry-rhel8-operator-a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:a6d9c85892ac8a8f171a7d00c3c97f6b1bcfc5fc5426275d75c1b114dd3e73f2"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:006d80417f16ff761a123855a98c75bbff81140c55ddd2a3f0b5f0039fe1f5f8"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.0.7-0.1662549961.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:a2f0513cd8b96d71855464384cad7f1cd8c39f8d445be1ff1c1b91f22008d16d",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.0.7+0.1662549961.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:6dfd539951a739ec06fb6620b79c42c6159d4ee148c0d9d336547e786cd4780c",
          "createdAt": "2022-06-24",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.0.7-0.1661784420.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\nService Registry stores and retrieves API designs and event schemas, and gives you control of their evolution.\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf - Provides a REST API and web UI to manage the artifacts and artifact meta-data - Includes Serializers and Deserializers for Kafka client integration - Configurable rules to control schema validity and evolution (compatibility) - Storage options: Kafka, PostgreSQL - Compatible with Confluent and IBM APIs - Runs on a lightweight Quarkus platform - Includes Maven plugin to integrate with Maven based builds\n## Service Registry Operator\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n**Features**\n- Supports installation and configuration of the Registry for all storage options - Easily perform a rolling upgrade of the Registry\n## Prerequisites\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n## License\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:fc97a2a08b2f77d620ea86ec77bb4f750bfc0109ede3ad1080c2cb694019f8b8"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:a2f0513cd8b96d71855464384cad7f1cd8c39f8d445be1ff1c1b91f22008d16d"
    },
    {
      "name": "service-registry-rhel8-operator-6dfd539951a739ec06fb6620b79c42c6159d4ee148c0d9d336547e786cd4780c-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:6dfd539951a739ec06fb6620b79c42c6159d4ee148c0d9d336547e786cd4780c"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:6dfd539951a739ec06fb6620b79c42c6159d4ee148c0d9d336547e786cd4780c"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:6c97fa8ead1f6f0323811f8f35a80ae33f0e160f6c58f2bdb31713dbeaa3f014"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.1.0",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:e4151a2eb59004038ba74555d869ab616890dbdfe540560a8e7ff7594f5ed791",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.1.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:c4de05840190155b3d0ff47b893b89313007507a72f2af01b5a20919f9db6dfc",
          "createdAt": "2022-09-20",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:88864c6b8c2fb6b4147acb77726f99082051729d7242d77357894163522e9827"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:e4151a2eb59004038ba74555d869ab616890dbdfe540560a8e7ff7594f5ed791"
    },
    {
      "name": "service-registry-rhel8-operator-c4de05840190155b3d0ff47b893b89313007507a72f2af01b5a20919f9db6dfc-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:c4de05840190155b3d0ff47b893b89313007507a72f2af01b5a20919f9db6dfc"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:c4de05840190155b3d0ff47b893b89313007507a72f2af01b5a20919f9db6dfc"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:345441f9e3a423afe51a7c6e275f76e94fa89403e3ae7d5933404208eea1d628"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.1.1",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:9f4ec31e1d85623773bdb58b08c04035e9160bc0b861e297fa3f18df50ea63e4",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.1.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b913320a924faa1a773a2e932acf1193eab151a5a0e7198aa1660bfbf0a2e7dc",
          "createdAt": "2022-12-14",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:514d08d66d1ae4b8b1db232bbc1ed526c3ee9851beb43a055268b5e5b8aab397"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:9f4ec31e1d85623773bdb58b08c04035e9160bc0b861e297fa3f18df50ea63e4"
    },
    {
      "name": "service-registry-rhel8-operator-b913320a924faa1a773a2e932acf1193eab151a5a0e7198aa1660bfbf0a2e7dc-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b913320a924faa1a773a2e932acf1193eab151a5a0e7198aa1660bfbf0a2e7dc"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b913320a924faa1a773a2e932acf1193eab151a5a0e7198aa1660bfbf0a2e7dc"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:b8aa3eee565f43070b81ddd0f2a1925e696ed28df50df44419a453269b845d12"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.1.2",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:26e16864fef72f10cddf1b4c454fd9962e10bfd0f2b253c2f0449e626ae705d9",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.1.2"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b913320a924faa1a773a2e932acf1193eab151a5a0e7198aa1660bfbf0a2e7dc",
          "createdAt": "2023-01-03",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:9fed673e973e50ab4049c2af83328d6c7ca294cd27931fed1199d05f36ec9230"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:26e16864fef72f10cddf1b4c454fd9962e10bfd0f2b253c2f0449e626ae705d9"
    },
    {
      "name": "service-registry-rhel8-operator-b913320a924faa1a773a2e932acf1193eab151a5a0e7198aa1660bfbf0a2e7dc-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b913320a924faa1a773a2e932acf1193eab151a5a0e7198aa1660bfbf0a2e7dc"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:b913320a924faa1a773a2e932acf1193eab151a5a0e7198aa1660bfbf0a2e7dc"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:bfdb30e710ab91b0c66456a85160cbdf35534c21a63fd06a53f805ae7df7e594"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.1.2-0.1676389596.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:9c00c32871d03e2fc083a8ce325ca4a1f55e770fca0c26984846f653e300ff3c",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.1.2+0.1676389596.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d12cd372c02585d4b36a7905dd6d797193b48ffa350b0a2d07b8ac6f755c9c97",
          "createdAt": "2023-01-03",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.1.2",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:000cd78c806c5c080244ee124a120174af9fd11cd774c69b8e27149d1d60f0b5"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:9c00c32871d03e2fc083a8ce325ca4a1f55e770fca0c26984846f653e300ff3c"
    },
    {
      "name": "service-registry-rhel8-operator-d12cd372c02585d4b36a7905dd6d797193b48ffa350b0a2d07b8ac6f755c9c97-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d12cd372c02585d4b36a7905dd6d797193b48ffa350b0a2d07b8ac6f755c9c97"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d12cd372c02585d4b36a7905dd6d797193b48ffa350b0a2d07b8ac6f755c9c97"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:1d376d27312624a3f13515a52554f70cac2042468a4b7396dc420cb2b4f2ee22"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.1.3",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:1709bd0833e9c309a9b94985415d3f1d4f99bdb59817935c789333eda61c95a6",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.1.3"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:4d7d6408c21782698d79964cdc0191bfe912c489fdfc33042f80ae81cc30168c",
          "createdAt": "2023-03-13",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:2d8331b5978b4d819d5e5452bcdd5f957a4cdbe1bb8c55909fbe61adbef228b5"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:1709bd0833e9c309a9b94985415d3f1d4f99bdb59817935c789333eda61c95a6"
    },
    {
      "name": "service-registry-rhel8-operator-4d7d6408c21782698d79964cdc0191bfe912c489fdfc33042f80ae81cc30168c-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:4d7d6408c21782698d79964cdc0191bfe912c489fdfc33042f80ae81cc30168c"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:4d7d6408c21782698d79964cdc0191bfe912c489fdfc33042f80ae81cc30168c"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:43facc88722c5d08260cad315ce3cadccc78124227b5d3d7a3f42ddb455d25fd"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.1.4",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:56fec9f29b5e674f1611bfbfb0b0eea00a7923075c60ed5ac8eef95e1b5358dd",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.1.4"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:afd01ada1ef399be4ff3f6f710b999d12e5e2819775fd5157956e569b4990dbf",
          "createdAt": "2023-03-27",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:6c166acc3875e9ec9dece6a5e3c51298b89809b149eebd86d564a8684f3d555f"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:56fec9f29b5e674f1611bfbfb0b0eea00a7923075c60ed5ac8eef95e1b5358dd"
    },
    {
      "name": "service-registry-rhel8-operator-afd01ada1ef399be4ff3f6f710b999d12e5e2819775fd5157956e569b4990dbf-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:afd01ada1ef399be4ff3f6f710b999d12e5e2819775fd5157956e569b4990dbf"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:afd01ada1ef399be4ff3f6f710b999d12e5e2819775fd5157956e569b4990dbf"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:0fdd8df5fc646241380fd6db5578045fdea2b2d85c13e52582935632228f0b30"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.1.5",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:349c3eb01845f9d246d9b74769ba7b4014be7db14d3999b9d0b0da2f26adacaf",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.1.5"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:afd01ada1ef399be4ff3f6f710b999d12e5e2819775fd5157956e569b4990dbf",
          "createdAt": "2023-04-21",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance"
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:f09af23f20a01520a11424f880cd6e90c6e4c2bc250cad73e4ad317fa74dc2d1"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:349c3eb01845f9d246d9b74769ba7b4014be7db14d3999b9d0b0da2f26adacaf"
    },
    {
      "name": "service-registry-rhel8-operator-afd01ada1ef399be4ff3f6f710b999d12e5e2819775fd5157956e569b4990dbf-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:afd01ada1ef399be4ff3f6f710b999d12e5e2819775fd5157956e569b4990dbf"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:afd01ada1ef399be4ff3f6f710b999d12e5e2819775fd5157956e569b4990dbf"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:7c6e860216b18fe3d4f973e045d1424158cbbe2d4981d61b681c811c73277566"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.2.0",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:5960d5d2f200b3fa2aa9fededf765db1c184bc249f34a1364a098fee525082ff",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.2.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:699d156ae438863acc393ab9d8389bb19c65e62800f0f1d4c6b9a5ec45922b8a",
          "createdAt": "2023-06-15",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:121eb5bdcbf51c31f1ea00b0fe3ded06b405c9479593d4a63cabac0a0348970e"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:5960d5d2f200b3fa2aa9fededf765db1c184bc249f34a1364a098fee525082ff"
    },
    {
      "name": "service-registry-rhel8-operator-699d156ae438863acc393ab9d8389bb19c65e62800f0f1d4c6b9a5ec45922b8a-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:699d156ae438863acc393ab9d8389bb19c65e62800f0f1d4c6b9a5ec45922b8a"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:699d156ae438863acc393ab9d8389bb19c65e62800f0f1d4c6b9a5ec45922b8a"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:b29eeefac681c095760638df8f3f919331cecc24f688b4d360268854f559c62a"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.2.1",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:f191aa4408763a14cba2848a1176132d2d56bb3de34243b83b37472ca2d467a9",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.2.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:2fd4c0f75da7b40249d5ccdc46583c4210e0b37475efb43a9b4e93a71ef38f07",
          "createdAt": "2023-08-16",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:4b8277f4efdf520a42e4395ac3d93368e7b711416617dff9a6338862a6501d64"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:f191aa4408763a14cba2848a1176132d2d56bb3de34243b83b37472ca2d467a9"
    },
    {
      "name": "service-registry-rhel8-operator-2fd4c0f75da7b40249d5ccdc46583c4210e0b37475efb43a9b4e93a71ef38f07-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:2fd4c0f75da7b40249d5ccdc46583c4210e0b37475efb43a9b4e93a71ef38f07"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:2fd4c0f75da7b40249d5ccdc46583c4210e0b37475efb43a9b4e93a71ef38f07"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:8477499e7fca1f1f8f6f8423a2201c211d2cf14ece80211fabc52500a2045e37"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.2.2",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:e2a4eb7368ca8c312afcec301caf68a8074216f755c52956f7e7e41c1f3b167a",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.2.2"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:2fd4c0f75da7b40249d5ccdc46583c4210e0b37475efb43a9b4e93a71ef38f07",
          "createdAt": "2023-08-30",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:89ee1ba213c0f68b6e0d94a991682d7dccdcd7814eefdca2ce514e45af89ee24"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:e2a4eb7368ca8c312afcec301caf68a8074216f755c52956f7e7e41c1f3b167a"
    },
    {
      "name": "service-registry-rhel8-operator-2fd4c0f75da7b40249d5ccdc46583c4210e0b37475efb43a9b4e93a71ef38f07-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:2fd4c0f75da7b40249d5ccdc46583c4210e0b37475efb43a9b4e93a71ef38f07"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:2fd4c0f75da7b40249d5ccdc46583c4210e0b37475efb43a9b4e93a71ef38f07"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:5e9a6fb62abdcd9e2f8b6ca8e015b22e5aae84d88eb614fecd06e13fba17205e"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.2.2-0.1697116886.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:0f5f4282d0d34206aa72b4aaa29ae4bcf445642aec16401518da4f2f8389a20c",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.2.2+0.1697116886.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:696f0f989705c09b4d9a07b909c61be8b8fd23645bbb6b97464532c380b002dd",
          "createdAt": "2023-08-30",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.2.2",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:e78fd7b1fed4c1781bacde99f7559ebf9bbae28c9e9091464a3e39aa9b47c51c"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:0f5f4282d0d34206aa72b4aaa29ae4bcf445642aec16401518da4f2f8389a20c"
    },
    {
      "name": "service-registry-rhel8-operator-696f0f989705c09b4d9a07b909c61be8b8fd23645bbb6b97464532c380b002dd-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:696f0f989705c09b4d9a07b909c61be8b8fd23645bbb6b97464532c380b002dd"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:696f0f989705c09b4d9a07b909c61be8b8fd23645bbb6b97464532c380b002dd"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:b2a5dc81ca9af4494c6dd26baa5c1a69cff53e338c4cff3051e913439ddcf00c"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.2.3",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:d1072a41462dc4d8635781987395dcb81f1c93461d13c749bf86ef725d2deda4",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.2.3"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d8cb989690236e68071fb83547f056806c56f457f64e4212fbbbe593548ecb74",
          "createdAt": "2023-10-18",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:22139ba79b0de92e01e82ade3c7be530ad5087be09820d15a8688b4654f94df7"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:d1072a41462dc4d8635781987395dcb81f1c93461d13c749bf86ef725d2deda4"
    },
    {
      "name": "service-registry-rhel8-operator-d8cb989690236e68071fb83547f056806c56f457f64e4212fbbbe593548ecb74-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d8cb989690236e68071fb83547f056806c56f457f64e4212fbbbe593548ecb74"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d8cb989690236e68071fb83547f056806c56f457f64e4212fbbbe593548ecb74"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:ff7897a5a0cfe569fffdee6a0b813ae3c1a164746a495ccb8c9a7fe085cfb80c"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.2.3-0.1698369839.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:434bdab5e88131f7c80eaad1b084bc78f32bfe8f1a4ce6cd1429ff23703c763e",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.2.3+0.1698369839.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d8cb989690236e68071fb83547f056806c56f457f64e4212fbbbe593548ecb74",
          "createdAt": "2023-10-18",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "olm.substitutesFor": "service-registry-operator.v2.2.3",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:d82d738c25588a6022a2e7c8637e8a2951cb2886c6ee3fe392020f1de1b8d3f9"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:434bdab5e88131f7c80eaad1b084bc78f32bfe8f1a4ce6cd1429ff23703c763e"
    },
    {
      "name": "service-registry-rhel8-operator-d8cb989690236e68071fb83547f056806c56f457f64e4212fbbbe593548ecb74-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d8cb989690236e68071fb83547f056806c56f457f64e4212fbbbe593548ecb74"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:d8cb989690236e68071fb83547f056806c56f457f64e4212fbbbe593548ecb74"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:7ce22e8ce11d0b517fc9985e5b497d693712647469a3ed03617baa6dc7f0f33e"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.3.0",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:a2b071bc8997db8453afa529d9624b0903694be3c522d597b5faf039849692b6",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.3.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec",
          "createdAt": "2023-11-20",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:b5a7d6fddf02ecd4503a2db5934b29b5fa7870e82ebf29fa291b409c2f10b800"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:a2b071bc8997db8453afa529d9624b0903694be3c522d597b5faf039849692b6"
    },
    {
      "name": "service-registry-rhel8-operator-cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:7ad7a1dae9fdf22d101f4932f301ea8e741f4201ba9e5249c733e3268e9f73cc"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.3.1",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:e7e33208ac2fca239b6d679b277982aa070c20abaa506a66c9306f0b2ed2a59a",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.3.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec",
          "createdAt": "2023-11-20",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:beeeb72f10ea8422852b67dbffa92ce08682eb8f90bb0bcac810f20d09fd4646"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:e7e33208ac2fca239b6d679b277982aa070c20abaa506a66c9306f0b2ed2a59a"
    },
    {
      "name": "service-registry-rhel8-operator-cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:7147a4d6a3fe2ba4c3e155b5afc7edd7819e75273feb645cd6b4fa4f4f1d0b81"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.3.1-0.1706181988.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:8f25699104841a208be334f4840178808554d5824add40ced0bab7d28a420580",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.3.1+0.1706181988.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec",
          "createdAt": "2023-11-20",
          "description": "Deploy and manage Red Hat Integration service registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "olm.substitutesFor": "service-registry-operator.v2.3.1",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nApicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage service registry on OpenShift.\n\n**Features**\n\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of the Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for the Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/master/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:e3f7f64ab96f4ea32bed4603abfa04f5221babbfb977acf115da4310778ad41e"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:8f25699104841a208be334f4840178808554d5824add40ced0bab7d28a420580"
    },
    {
      "name": "service-registry-rhel8-operator-cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:cea30152b5f00353fef0e3c394746d7b3bf00a756f3557fee9174e94a3c2deec"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:0470f286e29972c654980ae7d7f032ee9dd28df51222db53b7804ddebbab6454"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.3.2",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:8731cb4c24694f7fc73f1edf7d8d0c8fa2747b64604d9789a022eb5c740d445f",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.3.2"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:072ebe840ff9909e2345e81e5722df91898bcc52bbeeb2b3e353df6bd632128c",
          "createdAt": "2024-03-12",
          "description": "Deploy and manage Red Hat Integration Service Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nService Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage Service Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Service Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Service Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Integration - Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:181bd5337c7574c110f7bb84773c8bdab96138b79611fcb0986dd354c99bf49c"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:8731cb4c24694f7fc73f1edf7d8d0c8fa2747b64604d9789a022eb5c740d445f"
    },
    {
      "name": "service-registry-rhel8-operator-072ebe840ff9909e2345e81e5722df91898bcc52bbeeb2b3e353df6bd632128c-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:072ebe840ff9909e2345e81e5722df91898bcc52bbeeb2b3e353df6bd632128c"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:072ebe840ff9909e2345e81e5722df91898bcc52bbeeb2b3e353df6bd632128c"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:ea69d5ae376ea721706bdf6f4471697ddfaaacc66c99028a559eece486707a4c"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.3.3",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:675591dc31aac205495499d3b2f86cf6f4602b6a66bfad69804e4a500864b4be",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.3.3"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:3c6b7ae1ae80496ed7d94902cd7532a2b49d87f3292eb92b9d305e7c589151d3",
          "createdAt": "2024-03-21",
          "description": "Deploy and manage Red Hat Integration Service Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nService Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage Service Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Service Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Service Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Integration - Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:e195d91d6add886997e60420f7c3210bc36f574d690e1251c959a69f2d2e5ed3"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:675591dc31aac205495499d3b2f86cf6f4602b6a66bfad69804e4a500864b4be"
    },
    {
      "name": "service-registry-rhel8-operator-3c6b7ae1ae80496ed7d94902cd7532a2b49d87f3292eb92b9d305e7c589151d3-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:3c6b7ae1ae80496ed7d94902cd7532a2b49d87f3292eb92b9d305e7c589151d3"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:3c6b7ae1ae80496ed7d94902cd7532a2b49d87f3292eb92b9d305e7c589151d3"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:2bbba4c88c2e569164d86cc04ad019b1a44c701cf8df71b758a8c4a7eadeda1a"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.3.4",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:a8f196ace46ab47bfcc2ab624070290350aea7e24acc2d8d3334d215f1ddd013",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.3.4"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:996f728c53996fdc3c66983a6cbae4b1143887987c4647cc7946fa820df092e2",
          "createdAt": "2024-03-21",
          "description": "Deploy and manage Red Hat Integration Service Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nService Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage Service Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Service Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Service Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Integration - Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:6a5f5dbdbab6ef98358b26ca37e9deaefd9fa9f32a0def24393661c0c4ea7f35"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:a8f196ace46ab47bfcc2ab624070290350aea7e24acc2d8d3334d215f1ddd013"
    },
    {
      "name": "service-registry-rhel8-operator-996f728c53996fdc3c66983a6cbae4b1143887987c4647cc7946fa820df092e2-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:996f728c53996fdc3c66983a6cbae4b1143887987c4647cc7946fa820df092e2"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:996f728c53996fdc3c66983a6cbae4b1143887987c4647cc7946fa820df092e2"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:0d07db57c226c01646b051f43ab0840cd765b1480630139303253b44229c347f"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.3.4-0.1716987426.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:afddfda453a3ee768f872d7e4909e1f9091946bcf014f075e5413542fb4a4562",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.3.4+0.1716987426.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:53cd9a47ff8000b64dad295b441123884b4b07f0269742b13e092fe1f343c52c",
          "createdAt": "2024-03-21",
          "description": "Deploy and manage Red Hat Integration Service Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "olm.substitutesFor": "service-registry-operator.v2.3.4",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nService Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage Service Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Service Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Service Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Integration - Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:027cc459df843738596df1d0183eba4977be57dbc55cfff91b86ed179002906b"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:afddfda453a3ee768f872d7e4909e1f9091946bcf014f075e5413542fb4a4562"
    },
    {
      "name": "service-registry-rhel8-operator-53cd9a47ff8000b64dad295b441123884b4b07f0269742b13e092fe1f343c52c-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:53cd9a47ff8000b64dad295b441123884b4b07f0269742b13e092fe1f343c52c"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:53cd9a47ff8000b64dad295b441123884b4b07f0269742b13e092fe1f343c52c"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:a98153eebd5d2c671ac7380546af10c1394871f35cf9755e74f3bd3cab07b957"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.3.5",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:1e5a5462e52e1137192ef69089243ceb623b7f08c55f64e257ccd97c13f87409",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.3.5"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:4aee7b6a6f330e92d0092c130201ddff5ff9fdaa9169acdb3a23762e6b7dde3f",
          "createdAt": "2024-06-13",
          "description": "Deploy and manage Red Hat Integration Service Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat Integration Service Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Service Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Service Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Service Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Service Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Service Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Service Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Service Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Service Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Service Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Service Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Service Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Service Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Service Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Service Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Service Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Service Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Service Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Service Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Service Registry image",
                  "description": "This configuration option is not supported by Service Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Service Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Service Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Service Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Service Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Service Registry pod template",
                  "description": "With some restrictions, the Service Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Service Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Service Registry\n\nService Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Service Registry Operator\n\nProvides a quick and easy way to deploy and manage Service Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Service Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Service Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat Integration - Service Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat Integration - Service Registry Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/integration/service-registry-kafkasql-rhel8@sha256:a6faacb47d9c25e796b51b8049e38a2f6f259c2489055043cdd6ee1270ae4ef4"
    },
    {
      "name": "",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator-metadata@sha256:1e5a5462e52e1137192ef69089243ceb623b7f08c55f64e257ccd97c13f87409"
    },
    {
      "name": "service-registry-rhel8-operator-4aee7b6a6f330e92d0092c130201ddff5ff9fdaa9169acdb3a23762e6b7dde3f-annotation",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:4aee7b6a6f330e92d0092c130201ddff5ff9fdaa9169acdb3a23762e6b7dde3f"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/integration/service-registry-rhel8-operator@sha256:4aee7b6a6f330e92d0092c130201ddff5ff9fdaa9169acdb3a23762e6b7dde3f"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/integration/service-registry-sql-rhel8@sha256:7e990c7ee19856f8fcda5cd93685894a7c3c8fe763583d2266114d63b56e0e04"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.6.1",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:1e20d3106a87cd046815e672373508e1e8c451754c8a0eb1870040d65791eedd",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.6.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:008d256cc023d2006022ce9cce5d6cb06f125af109467a855013a312ccf80fd8",
          "createdAt": "2024-06-19",
          "description": "Deploy and manage Red Hat build of Apicurio Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "true",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat build of Apicurio Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Red Hat build of Apicurio Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Red Hat build of Apicurio Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Red Hat build of Apicurio Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Red Hat build of Apicurio Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Red Hat build of Apicurio Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Red Hat build of Apicurio Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Red Hat build of Apicurio Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Red Hat build of Apicurio Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Red Hat build of Apicurio Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Red Hat build of Apicurio Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Red Hat build of Apicurio Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Red Hat build of Apicurio Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Red Hat build of Apicurio Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Red Hat build of Apicurio Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Red Hat build of Apicurio Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Red Hat build of Apicurio Registry image",
                  "description": "This configuration option is not supported by Red Hat build of Apicurio Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Red Hat build of Apicurio Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Red Hat build of Apicurio Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Red Hat build of Apicurio Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Red Hat build of Apicurio Registry pod template",
                  "description": "With some restrictions, the Red Hat build of Apicurio Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Red Hat build of Apicurio Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Red Hat build of Apicurio Registry\n\nRed Hat build of Apicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Red Hat build of Apicurio Registry Operator\n\nProvides a quick and easy way to deploy and manage Red Hat build of Apicurio Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Red Hat build of Apicurio Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Red Hat build of Apicurio Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat build of Apicurio Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat build of Apicurio Registry",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry",
          "apicurio",
          "apicurio-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-kafkasql-rhel8@sha256:240ec0f8cb02d372d632dd4473fd531bef00e013430331314eef1531ca5e05ca"
    },
    {
      "name": "",
      "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:1e20d3106a87cd046815e672373508e1e8c451754c8a0eb1870040d65791eedd"
    },
    {
      "name": "apicurio-registry-rhel8-operator-008d256cc023d2006022ce9cce5d6cb06f125af109467a855013a312ccf80fd8-annotation",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:008d256cc023d2006022ce9cce5d6cb06f125af109467a855013a312ccf80fd8"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:008d256cc023d2006022ce9cce5d6cb06f125af109467a855013a312ccf80fd8"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-sql-rhel8@sha256:2d7fa96a1ff7d54eff770cf69de54fb0e852dce98aedf4bd17481d1ba22fe834"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.6.1-0.1724927626.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:c530b85c0fd158a1ec7fa07015af023c619dfc71ffc56c1cec386788aa5a1b6a",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.6.1+0.1724927626.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:6b9e3c29f955ad40700b5952f5db92fb3e7eebf1be1adbf4b06ab7f08d65e53c",
          "createdAt": "2024-06-19",
          "description": "Deploy and manage Red Hat build of Apicurio Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "true",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "olm.substitutesFor": "service-registry-operator.v2.6.1",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat build of Apicurio Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Red Hat build of Apicurio Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Red Hat build of Apicurio Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Red Hat build of Apicurio Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Red Hat build of Apicurio Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Red Hat build of Apicurio Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Red Hat build of Apicurio Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Red Hat build of Apicurio Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Red Hat build of Apicurio Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Red Hat build of Apicurio Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Red Hat build of Apicurio Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Red Hat build of Apicurio Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Red Hat build of Apicurio Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Red Hat build of Apicurio Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Red Hat build of Apicurio Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Red Hat build of Apicurio Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Red Hat build of Apicurio Registry image",
                  "description": "This configuration option is not supported by Red Hat build of Apicurio Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Red Hat build of Apicurio Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Red Hat build of Apicurio Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Red Hat build of Apicurio Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Red Hat build of Apicurio Registry pod template",
                  "description": "With some restrictions, the Red Hat build of Apicurio Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Red Hat build of Apicurio Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Red Hat build of Apicurio Registry\n\nRed Hat build of Apicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Red Hat build of Apicurio Registry Operator\n\nProvides a quick and easy way to deploy and manage Red Hat build of Apicurio Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Red Hat build of Apicurio Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Red Hat build of Apicurio Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat build of Apicurio Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat build of Apicurio Registry",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry",
          "apicurio",
          "apicurio-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-kafkasql-rhel8@sha256:185397f4062d9837d5628a7fbd864728b191ac9da44469eef553b7caaa06fc53"
    },
    {
      "name": "",
      "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:c530b85c0fd158a1ec7fa07015af023c619dfc71ffc56c1cec386788aa5a1b6a"
    },
    {
      "name": "apicurio-registry-rhel8-operator-6b9e3c29f955ad40700b5952f5db92fb3e7eebf1be1adbf4b06ab7f08d65e53c-annotation",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:6b9e3c29f955ad40700b5952f5db92fb3e7eebf1be1adbf4b06ab7f08d65e53c"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:6b9e3c29f955ad40700b5952f5db92fb3e7eebf1be1adbf4b06ab7f08d65e53c"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-sql-rhel8@sha256:fa766bb18a17c8af2ec1e05b26b8fdbe10d2f09c4592018ebda82ca2e48ed52f"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.6.3",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:0a7fd995981c69d6e6d1a82bdc11522034ae88a339b02d137a36b1838929f0f6",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.6.3"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:f49d3be002be7d66175ed28ed082ea6f82d8456292e6a459bf80b99b3920ea13",
          "createdAt": "2024-09-10",
          "description": "Deploy and manage Red Hat build of Apicurio Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.openshift.io/valid-subscription": "[\"Red Hat Application Foundations\", \"Red Hat Integration\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat build of Apicurio Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Red Hat build of Apicurio Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Red Hat build of Apicurio Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Red Hat build of Apicurio Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Red Hat build of Apicurio Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Red Hat build of Apicurio Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Red Hat build of Apicurio Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Red Hat build of Apicurio Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Red Hat build of Apicurio Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Red Hat build of Apicurio Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Red Hat build of Apicurio Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Red Hat build of Apicurio Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Red Hat build of Apicurio Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Red Hat build of Apicurio Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Red Hat build of Apicurio Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Red Hat build of Apicurio Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Red Hat build of Apicurio Registry image",
                  "description": "This configuration option is not supported by Red Hat build of Apicurio Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Red Hat build of Apicurio Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Red Hat build of Apicurio Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Red Hat build of Apicurio Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Red Hat build of Apicurio Registry pod template",
                  "description": "With some restrictions, the Red Hat build of Apicurio Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Red Hat build of Apicurio Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Red Hat build of Apicurio Registry\n\nRed Hat build of Apicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Red Hat build of Apicurio Registry Operator\n\nProvides a quick and easy way to deploy and manage Red Hat build of Apicurio Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Red Hat build of Apicurio Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Red Hat build of Apicurio Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat build of Apicurio Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat build of Apicurio Registry",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry",
          "apicurio",
          "apicurio-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-kafkasql-rhel8@sha256:efc361fed1fd482cc0803a9eb456ddc7bd08736d09853c9bdf6e9783f7aad1c3"
    },
    {
      "name": "",
      "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:0a7fd995981c69d6e6d1a82bdc11522034ae88a339b02d137a36b1838929f0f6"
    },
    {
      "name": "apicurio-registry-rhel8-operator-f49d3be002be7d66175ed28ed082ea6f82d8456292e6a459bf80b99b3920ea13-annotation",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:f49d3be002be7d66175ed28ed082ea6f82d8456292e6a459bf80b99b3920ea13"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:f49d3be002be7d66175ed28ed082ea6f82d8456292e6a459bf80b99b3920ea13"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-sql-rhel8@sha256:28e08aa852f2053ca2ca98512dcaa88a669b81a30c39a4c5796f740d6153a6f1"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.6.5",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:674e3f9a9e4caf186906bcf798bcfb3ae05d32f1b29330a5f30fe3c7d0d48bae",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.6.5"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:d1432e84747170b0d8195df23ba5f6cd983b7b5576783d0aee44a90fbace712a",
          "createdAt": "2024-10-04",
          "description": "Deploy and manage Red Hat build of Apicurio Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.openshift.io/valid-subscription": "[\"Red Hat Application Foundations\", \"Red Hat Integration\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat build of Apicurio Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Red Hat build of Apicurio Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Red Hat build of Apicurio Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Red Hat build of Apicurio Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Red Hat build of Apicurio Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Red Hat build of Apicurio Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Red Hat build of Apicurio Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Red Hat build of Apicurio Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Red Hat build of Apicurio Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Red Hat build of Apicurio Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Red Hat build of Apicurio Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Red Hat build of Apicurio Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Red Hat build of Apicurio Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Red Hat build of Apicurio Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Red Hat build of Apicurio Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Red Hat build of Apicurio Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Red Hat build of Apicurio Registry image",
                  "description": "This configuration option is not supported by Red Hat build of Apicurio Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Red Hat build of Apicurio Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Red Hat build of Apicurio Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Red Hat build of Apicurio Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Red Hat build of Apicurio Registry pod template",
                  "description": "With some restrictions, the Red Hat build of Apicurio Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Red Hat build of Apicurio Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Red Hat build of Apicurio Registry\n\nRed Hat build of Apicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Red Hat build of Apicurio Registry Operator\n\nProvides a quick and easy way to deploy and manage Red Hat build of Apicurio Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Red Hat build of Apicurio Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Red Hat build of Apicurio Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat build of Apicurio Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat build of Apicurio Registry",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry",
          "apicurio",
          "apicurio-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-kafkasql-rhel8@sha256:cedcc030595f4dcb337e6109faeae70f6242d32588913e4248c361c7a5e0b77a"
    },
    {
      "name": "",
      "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:674e3f9a9e4caf186906bcf798bcfb3ae05d32f1b29330a5f30fe3c7d0d48bae"
    },
    {
      "name": "apicurio-registry-rhel8-operator-d1432e84747170b0d8195df23ba5f6cd983b7b5576783d0aee44a90fbace712a-annotation",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:d1432e84747170b0d8195df23ba5f6cd983b7b5576783d0aee44a90fbace712a"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:d1432e84747170b0d8195df23ba5f6cd983b7b5576783d0aee44a90fbace712a"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-sql-rhel8@sha256:82f6abff147642209f3f6bef2de26b435f72c8ed8919bb2ac00feb84e6409956"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.6.5-0.1729511936.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:0c6ccb11160afb9f3d2adffb2939c0b5096beacec4bdef165e5535d37578c69a",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.6.5+0.1729511936.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:d1432e84747170b0d8195df23ba5f6cd983b7b5576783d0aee44a90fbace712a",
          "createdAt": "2024-10-04",
          "description": "Deploy and manage Red Hat build of Apicurio Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "olm.substitutesFor": "service-registry-operator.v2.6.5",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.openshift.io/valid-subscription": "[\"Red Hat Application Foundations\", \"Red Hat Integration\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat build of Apicurio Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Red Hat build of Apicurio Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Red Hat build of Apicurio Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Red Hat build of Apicurio Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Red Hat build of Apicurio Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Red Hat build of Apicurio Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Red Hat build of Apicurio Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Red Hat build of Apicurio Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Red Hat build of Apicurio Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Red Hat build of Apicurio Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Red Hat build of Apicurio Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Red Hat build of Apicurio Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Red Hat build of Apicurio Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Red Hat build of Apicurio Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Red Hat build of Apicurio Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Red Hat build of Apicurio Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Red Hat build of Apicurio Registry image",
                  "description": "This configuration option is not supported by Red Hat build of Apicurio Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Red Hat build of Apicurio Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Red Hat build of Apicurio Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Red Hat build of Apicurio Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Red Hat build of Apicurio Registry pod template",
                  "description": "With some restrictions, the Red Hat build of Apicurio Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Red Hat build of Apicurio Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Red Hat build of Apicurio Registry\n\nRed Hat build of Apicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Red Hat build of Apicurio Registry Operator\n\nProvides a quick and easy way to deploy and manage Red Hat build of Apicurio Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Red Hat build of Apicurio Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Red Hat build of Apicurio Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat build of Apicurio Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat build of Apicurio Registry",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry",
          "apicurio",
          "apicurio-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-kafkasql-rhel8@sha256:3ae6da3451cc53cca2d94d4ed096ce61099c33c4979c4ec6ddd8b3fe8f19a5ab"
    },
    {
      "name": "",
      "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:0c6ccb11160afb9f3d2adffb2939c0b5096beacec4bdef165e5535d37578c69a"
    },
    {
      "name": "apicurio-registry-rhel8-operator-d1432e84747170b0d8195df23ba5f6cd983b7b5576783d0aee44a90fbace712a-annotation",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:d1432e84747170b0d8195df23ba5f6cd983b7b5576783d0aee44a90fbace712a"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:d1432e84747170b0d8195df23ba5f6cd983b7b5576783d0aee44a90fbace712a"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-sql-rhel8@sha256:13c2fd27a5050b99d3679c3fe9251951fdf8d1f485ccd195b598e06f15335e21"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.6.5-0.1730982111.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:11a6b59eea28e594ad0c55600942faf0bbf987a13032078959c04b08869e3bf8",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.6.5+0.1730982111.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:ea5095394b218381023341461f8ea967f4231c63033d85a4d21a6cd411eda6bf",
          "createdAt": "2024-10-04",
          "description": "Deploy and manage Red Hat build of Apicurio Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "olm.substitutesFor": "service-registry-operator.v2.6.5-0.1729511936.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.openshift.io/valid-subscription": "[\"Red Hat Application Foundations\", \"Red Hat Integration\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat build of Apicurio Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Red Hat build of Apicurio Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Red Hat build of Apicurio Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Red Hat build of Apicurio Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Red Hat build of Apicurio Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Red Hat build of Apicurio Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Red Hat build of Apicurio Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Red Hat build of Apicurio Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Red Hat build of Apicurio Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Red Hat build of Apicurio Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Red Hat build of Apicurio Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Red Hat build of Apicurio Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Red Hat build of Apicurio Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Red Hat build of Apicurio Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Red Hat build of Apicurio Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Red Hat build of Apicurio Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Red Hat build of Apicurio Registry image",
                  "description": "This configuration option is not supported by Red Hat build of Apicurio Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Red Hat build of Apicurio Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Red Hat build of Apicurio Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Red Hat build of Apicurio Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Red Hat build of Apicurio Registry pod template",
                  "description": "With some restrictions, the Red Hat build of Apicurio Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Red Hat build of Apicurio Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Red Hat build of Apicurio Registry\n\nRed Hat build of Apicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Red Hat build of Apicurio Registry Operator\n\nProvides a quick and easy way to deploy and manage Red Hat build of Apicurio Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Red Hat build of Apicurio Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Red Hat build of Apicurio Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat build of Apicurio Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat build of Apicurio Registry",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry",
          "apicurio",
          "apicurio-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-kafkasql-rhel8@sha256:ca5b92ca18533bf8f0b2c850c4c0876295c436141fe2e158dd8b97e2e68be7ac"
    },
    {
      "name": "",
      "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:11a6b59eea28e594ad0c55600942faf0bbf987a13032078959c04b08869e3bf8"
    },
    {
      "name": "apicurio-registry-rhel8-operator-ea5095394b218381023341461f8ea967f4231c63033d85a4d21a6cd411eda6bf-annotation",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:ea5095394b218381023341461f8ea967f4231c63033d85a4d21a6cd411eda6bf"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:ea5095394b218381023341461f8ea967f4231c63033d85a4d21a6cd411eda6bf"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-sql-rhel8@sha256:69b7ff84e6da3bdda085ac3f713826274d34a416c1f31e8bc0633ca8e484d381"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.6.5-0.1731946870.p",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:cc72c2611d8cf9f98f45f8795fe891c89d5d69b6884332df086726b3390c6bab",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.6.5+0.1731946870.p"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:ea5095394b218381023341461f8ea967f4231c63033d85a4d21a6cd411eda6bf",
          "createdAt": "2024-10-04",
          "description": "Deploy and manage Red Hat build of Apicurio Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "olm.substitutesFor": "service-registry-operator.v2.6.5-0.1730982111.p",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.openshift.io/valid-subscription": "[\"Red Hat Application Foundations\", \"Red Hat Integration\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat build of Apicurio Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Red Hat build of Apicurio Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Red Hat build of Apicurio Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Red Hat build of Apicurio Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Red Hat build of Apicurio Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Red Hat build of Apicurio Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Red Hat build of Apicurio Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Red Hat build of Apicurio Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Red Hat build of Apicurio Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Red Hat build of Apicurio Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Red Hat build of Apicurio Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Red Hat build of Apicurio Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Red Hat build of Apicurio Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Red Hat build of Apicurio Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Red Hat build of Apicurio Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Red Hat build of Apicurio Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Red Hat build of Apicurio Registry image",
                  "description": "This configuration option is not supported by Red Hat build of Apicurio Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Red Hat build of Apicurio Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Red Hat build of Apicurio Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Red Hat build of Apicurio Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Red Hat build of Apicurio Registry pod template",
                  "description": "With some restrictions, the Red Hat build of Apicurio Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Red Hat build of Apicurio Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Red Hat build of Apicurio Registry\n\nRed Hat build of Apicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Red Hat build of Apicurio Registry Operator\n\nProvides a quick and easy way to deploy and manage Red Hat build of Apicurio Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Red Hat build of Apicurio Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Red Hat build of Apicurio Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat build of Apicurio Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat build of Apicurio Registry",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry",
          "apicurio",
          "apicurio-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-kafkasql-rhel8@sha256:e856218abd8b4d4a9864807d997989accdec0acc1049664cd5de988388ded822"
    },
    {
      "name": "",
      "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:cc72c2611d8cf9f98f45f8795fe891c89d5d69b6884332df086726b3390c6bab"
    },
    {
      "name": "apicurio-registry-rhel8-operator-ea5095394b218381023341461f8ea967f4231c63033d85a4d21a6cd411eda6bf-annotation",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:ea5095394b218381023341461f8ea967f4231c63033d85a4d21a6cd411eda6bf"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:ea5095394b218381023341461f8ea967f4231c63033d85a4d21a6cd411eda6bf"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-sql-rhel8@sha256:0c8c7a549c6754fd93efd963088ac65a38d8d2c2a532105cc8589ef17df879be"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "service-registry-operator.v2.6.6",
  "package": "service-registry-operator",
  "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:5e0969df01ffeea73a12c0f2be82ac1eb799775109de09df71872daec6af3830",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "registry.apicur.io",
        "kind": "ApicurioRegistry",
        "version": "v1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "service-registry-operator",
        "version": "2.6.6"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-kafkasql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"kafkasql\": {\n          \"bootstrapServers\": \"\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:9092\"\n        },\n        \"persistence\": \"kafkasql\"\n      }\n    }\n  },\n  {\n    \"apiVersion\": \"registry.apicur.io/v1\",\n    \"kind\": \"ApicurioRegistry\",\n    \"metadata\": {\n      \"name\": \"example-apicurioregistry-sql\"\n    },\n    \"spec\": {\n      \"configuration\": {\n        \"persistence\": \"sql\",\n        \"sql\": {\n          \"dataSource\": {\n            \"password\": \"\\u003cpassword\\u003e\",\n            \"url\": \"jdbc:postgresql://\\u003cservice name\\u003e.\\u003cnamespace\\u003e.svc:5432/\\u003cdatabase name\\u003e\",\n            \"userName\": \"postgres\"\n          }\n        }\n      }\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "Streaming & Messaging",
          "certified": "false",
          "containerImage": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:5af0a099b5eb136bfe87773f04f45d979ecb1f52ca528e8cb62dcd6816e88c1b",
          "createdAt": "2024-12-11",
          "description": "Deploy and manage Red Hat build of Apicurio Registry on OpenShift.",
          "features.operators.openshift.io/cnf": "false",
          "features.operators.openshift.io/cni": "false",
          "features.operators.openshift.io/csi": "false",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "true",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.openshift.io/valid-subscription": "[\"Red Hat Application Foundations\", \"Red Hat Integration\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.13.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/Apicurio/apicurio-registry-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "apicurioregistries.registry.apicur.io",
              "version": "v1",
              "kind": "ApicurioRegistry",
              "displayName": "Apicurio Registry",
              "description": "ApicurioRegistry represents a Red Hat build of Apicurio Registry instance",
              "statusDescriptors": [
                {
                  "path": "info",
                  "displayName": "Information about the Red Hat build of Apicurio Registry application",
                  "description": " "
                },
                {
                  "path": "info.host",
                  "displayName": "Red Hat build of Apicurio Registry URL",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Red Hat build of Apicurio Registry application and Operator conditions.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "configuration",
                  "displayName": "Red Hat build of Apicurio Registry application configuration",
                  "description": " "
                },
                {
                  "path": "configuration.persistence",
                  "displayName": "Storage",
                  "description": "Type of storage used by Red Hat build of Apicurio Registry.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:sql",
                    "urn:alm:descriptor:com.tectonic.ui:select:kafkasql"
                  ]
                },
                {
                  "path": "configuration.sql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry SQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:sql"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource",
                  "displayName": "SQL data source",
                  "description": " "
                },
                {
                  "path": "configuration.sql.dataSource.url",
                  "displayName": "Data source URL",
                  "description": "URL of the PostgreSQL database, for example: `jdbc:postgresql://<service name>.<namespace>.svc:5432/<database name>`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.userName",
                  "displayName": "Data source username",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.sql.dataSource.password",
                  "displayName": "Data source password",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:password"
                  ]
                },
                {
                  "path": "configuration.kafkasql",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry KafkaSQL storage",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:fieldDependency:configuration.persistence:kafkasql"
                  ]
                },
                {
                  "path": "configuration.kafkasql.bootstrapServers",
                  "displayName": "Kafka bootstrap servers URL",
                  "description": "URL of one of the Kafka brokers, which provide initial metadata about the Kafka cluster,  for example: `<service name>.<namespace>.svc:9092`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security",
                  "displayName": "Kafka security configuration",
                  "description": "Provide the following configuration options if your Kafka cluster  is secured using TLS or SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.tls",
                  "displayName": "TLS",
                  "description": "Kafka is secured using TLS."
                },
                {
                  "path": "configuration.kafkasql.security.tls.truststoreSecretName",
                  "displayName": "Truststore Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.tls.keystoreSecretName",
                  "displayName": "Keystore Secret name",
                  "description": "Name of a Secret that contains TLS keystore (in PKCS12 format)  under the `user.p12` key, and keystore password under the `user.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram",
                  "displayName": "SCRAM",
                  "description": "Kafka is secured using SCRAM."
                },
                {
                  "path": "configuration.kafkasql.security.scram.truststoreSecretName",
                  "displayName": "Trust store Secret name",
                  "description": "Name of a Secret that contains TLS truststore (in PKCS12 format)  under the `ca.p12` key, and truststore password under the `ca.password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.user",
                  "displayName": "User name",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.mechanism",
                  "displayName": "Mechanism",
                  "description": "Name of the SCRAM mechanism, default value is SCRAM-SHA-512.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-512",
                    "urn:alm:descriptor:com.tectonic.ui:select:SCRAM-SHA-256"
                  ]
                },
                {
                  "path": "configuration.kafkasql.security.scram.passwordSecretName",
                  "displayName": "User password Secret name",
                  "description": "Name of a Secret that contains password of the SCRAM user under the `password` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.ui",
                  "displayName": "Configuration of Red Hat build of Apicurio Registry web console",
                  "description": " "
                },
                {
                  "path": "configuration.ui.readOnly",
                  "displayName": "Read-only",
                  "description": "Set the web console to read-only mode. WARNING: This does not affect access to the Apicurio REST API.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.registryLogLevel",
                  "displayName": "Red Hat build of Apicurio Registry application log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.logLevel",
                  "displayName": "Third-party (non-Apicurio) library log level",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:select:INFO",
                    "urn:alm:descriptor:com.tectonic.ui:select:DEBUG"
                  ]
                },
                {
                  "path": "configuration.security",
                  "displayName": "Security configuration",
                  "description": " "
                },
                {
                  "path": "configuration.security.keycloak",
                  "displayName": "Keycloak",
                  "description": "Configure Red Hat build of Apicurio Registry to use Keycloak for Identity and Access Management (IAM)."
                },
                {
                  "path": "configuration.security.keycloak.url",
                  "displayName": "Keycloak auth URL",
                  "description": "URL of the Keycloak auth endpoint, must end with `/auth`.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.realm",
                  "displayName": "Keycloak realm",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.apiClientId",
                  "displayName": "Client ID for the REST API",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.keycloak.uiClientId",
                  "displayName": "Client ID for the UI",
                  "description": " ",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https",
                  "displayName": "HTTPS",
                  "description": "Configure Red Hat build of Apicurio Registry to be accessible using HTTPS."
                },
                {
                  "path": "configuration.security.https.secretName",
                  "displayName": "HTTPS certificate and private key Secret name",
                  "description": "Name of a Secret that contains HTTPS certificate under the `tls.crt` key, and the private key under the `tls.key` key.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "configuration.security.https.disableHttp",
                  "displayName": "Disable HTTP",
                  "description": "Disable HTTP if HTTPS is enabled.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "configuration.env",
                  "displayName": "Environment variables",
                  "description": "List of additional environment variables that will be provided to the Red Hat build of Apicurio Registry application."
                },
                {
                  "path": "deployment",
                  "displayName": "Red Hat build of Apicurio Registry deployment configuration",
                  "description": " "
                },
                {
                  "path": "deployment.replicas",
                  "displayName": "Replicas",
                  "description": "The required number of Red Hat build of Apicurio Registry pods. Default value is 1.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podCount"
                  ]
                },
                {
                  "path": "deployment.host",
                  "displayName": "Hostname",
                  "description": "Red Hat build of Apicurio Registry application hostname (part of the URL without the protocol and path).",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "deployment.affinity",
                  "displayName": "Affinity",
                  "description": " "
                },
                {
                  "path": "deployment.affinity.podAffinity",
                  "displayName": "Pod affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.podAntiAffinity",
                  "displayName": "Pod anti-affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:podAntiAffinity"
                  ]
                },
                {
                  "path": "deployment.affinity.nodeAffinity",
                  "displayName": "Node affinity",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:nodeAffinity"
                  ]
                },
                {
                  "path": "deployment.tolerations",
                  "displayName": "Tolerations",
                  "description": " "
                },
                {
                  "path": "deployment.metadata",
                  "displayName": "Metadata of the Red Hat build of Apicurio Registry pod",
                  "description": " "
                },
                {
                  "path": "deployment.metadata.annotations",
                  "displayName": "Annotations",
                  "description": "Additional Red Hat build of Apicurio Registry Pod annotations."
                },
                {
                  "path": "deployment.metadata.labels",
                  "displayName": "Labels",
                  "description": "Additional Red Hat build of Apicurio Registry Pod labels."
                },
                {
                  "path": "deployment.image",
                  "displayName": "Red Hat build of Apicurio Registry image",
                  "description": "This configuration option is not supported by Red Hat build of Apicurio Registry Operator.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:hidden"
                  ]
                },
                {
                  "path": "deployment.imagePullSecrets",
                  "displayName": "Red Hat build of Apicurio Registry image pull secrets",
                  "description": "List of Secrets to use when pulling the Red Hat build of Apicurio Registry image."
                },
                {
                  "path": "deployment.managedResources",
                  "displayName": "Red Hat build of Apicurio Registry managed resources",
                  "description": "Configure how the Operator manages Kubernetes resources."
                },
                {
                  "path": "deployment.managedResources.disableIngress",
                  "displayName": "Disable Ingress",
                  "description": "Operator will not create or manage an Ingress for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disableNetworkPolicy",
                  "displayName": "Disable NetworkPolicy",
                  "description": "Operator will not create or manage a NetworkPolicy for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.managedResources.disablePodDisruptionBudget",
                  "displayName": "Disable PodDisruptionBudget",
                  "description": "Operator will not create or manage a PodDisruptionBudget for Red Hat build of Apicurio Registry, so it can be done manually.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:checkbox"
                  ]
                },
                {
                  "path": "deployment.podTemplateSpecPreview",
                  "displayName": "Configure Red Hat build of Apicurio Registry pod template",
                  "description": "With some restrictions, the Red Hat build of Apicurio Registry Operator forwards the data from this field to the corresponding  \"spec.template\" field in the Red Hat build of Apicurio Registry Deployment. This feature provides greater configuration flexibility,  without the need for the Operator to natively support each use case.  WARNING: This feature is a Technology Preview feature only.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:advanced"
                  ]
                }
              ]
            }
          ]
        },
        "description": "## Red Hat build of Apicurio Registry\n\nRed Hat build of Apicurio Registry stores and retrieves API designs and event schemas,\nand gives you control of their evolution.\n\n**Features**\n- Supports: Apache Avro, AsyncAPI, GraphQL, JSON Schema, Kafka Connect Schema, OpenAPI, Protobuf\n- Provides a REST API and web UI to manage the artifacts and artifact meta-data\n- Includes Serializers and Deserializers for Kafka client integration\n- Configurable rules to control schema validity and evolution (compatibility)\n- Storage options: Kafka, PostgreSQL\n- Compatible with Confluent and IBM APIs\n- Runs on a lightweight Quarkus platform\n- Includes Maven plugin to integrate with Maven based builds\n\n## Red Hat build of Apicurio Registry Operator\n\nProvides a quick and easy way to deploy and manage Red Hat build of Apicurio Registry on OpenShift.\n\n**Features**\n- Supports installation and configuration of the Registry for all storage options\n- Easily perform a rolling upgrade of Red Hat build of Apicurio Registry\n\n## Prerequisites\n\nThis operator does not deploy storage for Red Hat build of Apicurio Registry. Therefore, some storage options require that the chosen persistence service is already set up.\n\n## License\n\nRed Hat build of Apicurio Registry Operator is licensed under the [Apache 2.0 license](https://github.com/Apicurio/apicurio-registry-operator/blob/main/LICENSE)\n",
        "displayName": "Red Hat build of Apicurio Registry",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": true
          },
          {
            "type": "SingleNamespace",
            "supported": true
          },
          {
            "type": "MultiNamespace",
            "supported": true
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "integration",
          "streaming",
          "messaging",
          "api",
          "schemas",
          "registry",
          "service",
          "service-registry",
          "apicurio",
          "apicurio-registry"
        ],
        "links": [
          {
            "name": "Website",
            "url": "https://www.apicur.io/"
          },
          {
            "name": "GitHub",
            "url": "https://github.com/Apicurio/apicurio-registry/"
          },
          {
            "name": "Issues",
            "url": "https://github.com/Apicurio/apicurio-registry/issues"
          },
          {
            "name": "Twitter",
            "url": "https://twitter.com/Apicurio"
          }
        ],
        "maintainers": [
          {
            "name": "Apicurio",
            "email": "apicurio@lists.jboss.org"
          },
          {
            "name": "Jakub Senko",
            "email": "jsenko+apicurio@redhat.com"
          },
          {
            "name": "Eric Wittmann",
            "email": "ewittman+apicurio@redhat.com"
          }
        ],
        "provider": {
          "name": "Red Hat"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "registry_image_kafkasql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-kafkasql-rhel8@sha256:c045b28eca4c6cc9503baa2e489373a0886085e2bb300cfc55613a2475ee80af"
    },
    {
      "name": "",
      "image": "registry.redhat.io/apicurio/apicurio-registry-operator-bundle@sha256:5e0969df01ffeea73a12c0f2be82ac1eb799775109de09df71872daec6af3830"
    },
    {
      "name": "apicurio-registry-rhel8-operator-5af0a099b5eb136bfe87773f04f45d979ecb1f52ca528e8cb62dcd6816e88c1b-annotation",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:5af0a099b5eb136bfe87773f04f45d979ecb1f52ca528e8cb62dcd6816e88c1b"
    },
    {
      "name": "apicurio-registry-operator",
      "image": "registry.redhat.io/apicurio/apicurio-registry-rhel8-operator@sha256:5af0a099b5eb136bfe87773f04f45d979ecb1f52ca528e8cb62dcd6816e88c1b"
    },
    {
      "name": "registry_image_sql",
      "image": "registry.redhat.io/apicurio/apicurio-registry-sql-rhel8@sha256:bfba1ca75d9c7cef9be3dd7f08842907b68cc53c66cd663647b5362dd50b06d4"
    }
  ]
}
