{
  "schema": "olm.package",
  "name": "node-healthcheck-operator",
  "defaultChannel": "stable",
  "icon": {
    "base64data": "",
    "mediatype": "image/png"
  }
}
{
  "schema": "olm.channel",
  "name": "4.12-eus",
  "package": "node-healthcheck-operator",
  "entries": [
    {
      "name": "node-healthcheck-operator.v0.4.1",
      "skipRange": ">=0.3.0 <0.4.1"
    }
  ]
}
{
  "schema": "olm.channel",
  "name": "4.14-eus",
  "package": "node-healthcheck-operator",
  "entries": [
    {
      "name": "node-healthcheck-operator.v0.6.1",
      "skipRange": ">=0.4.0 <0.6.1"
    }
  ]
}
{
  "schema": "olm.channel",
  "name": "4.16-eus",
  "package": "node-healthcheck-operator",
  "entries": [
    {
      "name": "node-healthcheck-operator.v0.6.1",
      "skipRange": ">=0.4.0 <0.6.1"
    },
    {
      "name": "node-healthcheck-operator.v0.7.0",
      "replaces": "node-healthcheck-operator.v0.6.1",
      "skipRange": ">=0.6.0 <0.7.0"
    },
    {
      "name": "node-healthcheck-operator.v0.8.1",
      "replaces": "node-healthcheck-operator.v0.7.0",
      "skipRange": ">=0.6.0 <0.8.1"
    },
    {
      "name": "node-healthcheck-operator.v0.8.2",
      "replaces": "node-healthcheck-operator.v0.8.1",
      "skipRange": ">=0.6.0 <0.8.2"
    }
  ]
}
{
  "schema": "olm.channel",
  "name": "candidate",
  "package": "node-healthcheck-operator",
  "entries": [
    {
      "name": "node-healthcheck-operator.v0.3.1",
      "skipRange": ">=0.2.0 <0.3.1"
    }
  ]
}
{
  "schema": "olm.channel",
  "name": "stable",
  "package": "node-healthcheck-operator",
  "entries": [
    {
      "name": "node-healthcheck-operator.v0.6.1",
      "skipRange": ">=0.4.0 <0.6.1"
    },
    {
      "name": "node-healthcheck-operator.v0.7.0",
      "replaces": "node-healthcheck-operator.v0.6.1",
      "skipRange": ">=0.6.0 <0.7.0"
    },
    {
      "name": "node-healthcheck-operator.v0.8.1",
      "replaces": "node-healthcheck-operator.v0.7.0",
      "skipRange": ">=0.6.0 <0.8.1"
    },
    {
      "name": "node-healthcheck-operator.v0.8.2",
      "replaces": "node-healthcheck-operator.v0.8.1",
      "skipRange": ">=0.6.0 <0.8.2"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "node-healthcheck-operator.v0.3.1",
  "package": "node-healthcheck-operator",
  "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:8223bda16ac5ffac4b7407c849c4c30ee006ddafd34cad8a03d2af8314d56f58",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "remediation.medik8s.io",
        "kind": "NodeHealthCheck",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk.required",
      "value": {
        "group": "self-node-remediation.medik8s.io",
        "kind": "SelfNodeRemediation",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "node-healthcheck-operator",
        "version": "0.3.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"remediation.medik8s.io/v1alpha1\",\n    \"kind\": \"NodeHealthCheck\",\n    \"metadata\": {\n      \"name\": \"nodehealthcheck-sample\"\n    },\n    \"spec\": {\n      \"minHealthy\": \"51%\",\n      \"remediationTemplate\": {\n        \"apiVersion\": \"self-node-remediation.medik8s.io/v1alpha1\",\n        \"kind\": \"SelfNodeRemediationTemplate\",\n        \"name\": \"self-node-remediation-resource-deletion-template\",\n        \"namespace\": \"openshift-operators\"\n      },\n      \"selector\": {\n        \"matchExpressions\": [\n          {\n            \"key\": \"node-role.kubernetes.io/worker\",\n            \"operator\": \"Exists\"\n          }\n        ]\n      },\n      \"unhealthyConditions\": [\n        {\n          \"duration\": \"300s\",\n          \"status\": \"False\",\n          \"type\": \"Ready\"\n        },\n        {\n          \"duration\": \"300s\",\n          \"status\": \"Unknown\",\n          \"type\": \"Ready\"\n        }\n      ]\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "OpenShift Optional",
          "containerImage": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:8e1dbc35126101e1025bd4c0eac4f4c614eb779ccafbb55050541a27ba7e9706",
          "createdAt": "2022-08-15 12:34:34",
          "description": "Detect failed Nodes and trigger remediation with e.g. Self Node Remediation.",
          "olm.skipRange": ">=0.2.0 <0.3.1",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.18.0+git",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/medik8s/node-healthcheck-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "nodehealthchecks.remediation.medik8s.io",
              "version": "v1alpha1",
              "kind": "NodeHealthCheck",
              "displayName": "Node Health Check",
              "description": "NodeHealthCheck is the Schema for the nodehealthchecks API",
              "resources": [
                {
                  "name": "nodehealthchecks",
                  "kind": "NodeHealthCheck",
                  "version": "v1alpha1"
                }
              ],
              "statusDescriptors": [
                {
                  "path": "conditions",
                  "displayName": "conditions",
                  "description": "Represents the observations of a NodeHealthCheck's current state. Known .status.conditions.type are: \"Disabled\"",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:conditions"
                  ]
                },
                {
                  "path": "healthyNodes",
                  "displayName": "healthynodes",
                  "description": "HealthyNodes specified the number of healthy nodes observed",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:healthyNodes"
                  ]
                },
                {
                  "path": "inFlightRemediations",
                  "displayName": "inFlightRemediations",
                  "description": "InFlightRemediations records the timestamp when remediation triggered per node",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:inFlightRemediations"
                  ]
                },
                {
                  "path": "observedNodes",
                  "displayName": "observedNodes",
                  "description": "ObservedNodes specified the number of nodes observed by using the NHC spec.selecor",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:observedNodes"
                  ]
                },
                {
                  "path": "phase",
                  "displayName": "phase",
                  "description": "Phase represents the current phase of this Config. Known phases are Disabled, Paused, Remediating and Enabled, based on:\\n - the status of the Disabled condition\\n - the value of PauseRequests\\n - the value of InFlightRemediations",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "reason",
                  "displayName": "reason",
                  "description": "Reason explains the current phase in more detail.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "minHealthy",
                  "displayName": "Min Healthy",
                  "description": "Remediation is allowed if at least \"MinHealthy\" nodes selected by \"selector\" are healthy. Expects either a positive integer value or a percentage value. Percentage values must be positive whole numbers and are capped at 100%. 100% is valid and will block all remediation."
                },
                {
                  "path": "pauseRequests",
                  "displayName": "Pause Requests",
                  "description": "PauseRequests will prevent any new remdiation to start, while in-flight remediations keep running. Each entry is free form, and ideally represents the requested party reason for this pausing - i.e: \"imaginary-cluster-upgrade-manager-operator\""
                },
                {
                  "path": "remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider."
                },
                {
                  "path": "selector",
                  "displayName": "Selector",
                  "description": "Label selector to match nodes whose health will be exercised. Note: An empty selector will match all nodes."
                },
                {
                  "path": "unhealthyConditions",
                  "displayName": "Unhealthy Conditions",
                  "description": "UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy."
                }
              ]
            }
          ]
        },
        "description": "### Introduction\nHardware is imperfect, and software contains bugs. When node level failures such as kernel hangs or dead NICs\noccur, the work required from the cluster does not decrease - workloads from affected nodes need to be\nrestarted somewhere.\n\nHowever some workloads, such as RWO volumes and StatefulSets, may require at-most-one semantics.\nFailures affecting these kind of workloads risk data loss and/or corruption if nodes (and the workloads\nrunning on them) are assumed to be dead whenever we stop hearing from them. For this reason it is important\nto know that the node has reached a safe state before initiating recovery of the workload.\n\nUnfortunately it is not always practical to require admin intervention in order to confirm the node’s true status.\nIn order to automate the recovery of exclusive workloads, we provide operators for failure detection\nand remediation.\n\n### Failure detection: Node Health Check operator\nThe “Node Health Check” (NHC) operator checks each Node’s set of\nNodeConditions (eg. NotReady) against the criteria and thresholds defined in\nNodeHealthCheck configuration. If the Node is deemed to be in a failed\nstate, NHC will initiate recovery by using the SIG Cluster API's “External\nRemediation” API to instantiate the configured remediation template which\nspecifies the mechanism/controller to be used.\n\n### Failure handling: Self Node Remediation\nBy default NHC depends on the “Self Node Remediation” (SNR) operator, which\nis installed automatically.\nSNR uses watchdog timers and heuristics to ensure nodes enter a safe state\n(no longer hosting workloads) within a known and finite period of time,\nbefore signaling to the system that all Pods and VolumeAttachments on the\nfailed Node are no longer active and can be relocated elsewhere.\nIn the case of transient errors, the watchdog’s actions will also result in\nthe node rebooting and rejoining the cluster - restoring capacity.\n",
        "displayName": "Node Health Check Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "NHC",
          "Self Node Remediation",
          "SNR",
          "Remediation",
          "Fencing",
          "medik8s",
          "k8s"
        ],
        "links": [
          {
            "name": "Node Healthcheck Operator",
            "url": "https://docs.openshift.com/container-platform/4.11/nodes/nodes/eco-node-health-check-operator.html"
          },
          {
            "name": "Source Code",
            "url": "https://github.com/medik8s/node-healthcheck-operator"
          }
        ],
        "maintainers": [
          {
            "name": "Dragonfly Team",
            "email": "team-dragonfly@redhat.com"
          }
        ],
        "maturity": "alpha",
        "minKubeVersion": "1.20.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:b5786bbbef725badf3dfcc2c2c7a86ead5ebb584c978c47aae8b9a62e241b80d"
    },
    {
      "name": "",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:8223bda16ac5ffac4b7407c849c4c30ee006ddafd34cad8a03d2af8314d56f58"
    },
    {
      "name": "node-healthcheck-rhel8-operator-8e1dbc35126101e1025bd4c0eac4f4c614eb779ccafbb55050541a27ba7e9706-annotation",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:8e1dbc35126101e1025bd4c0eac4f4c614eb779ccafbb55050541a27ba7e9706"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:8e1dbc35126101e1025bd4c0eac4f4c614eb779ccafbb55050541a27ba7e9706"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "node-healthcheck-operator.v0.4.1",
  "package": "node-healthcheck-operator",
  "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:151e7d9bc500b7252af46d0856e3e16559ff310a1d0efedcc5d914164bbdef55",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "remediation.medik8s.io",
        "kind": "NodeHealthCheck",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk.required",
      "value": {
        "group": "self-node-remediation.medik8s.io",
        "kind": "SelfNodeRemediation",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "node-healthcheck-operator",
        "version": "0.4.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"remediation.medik8s.io/v1alpha1\",\n    \"kind\": \"NodeHealthCheck\",\n    \"metadata\": {\n      \"name\": \"nodehealthcheck-sample\"\n    },\n    \"spec\": {\n      \"minHealthy\": \"51%\",\n      \"remediationTemplate\": {\n        \"apiVersion\": \"self-node-remediation.medik8s.io/v1alpha1\",\n        \"kind\": \"SelfNodeRemediationTemplate\",\n        \"name\": \"self-node-remediation-resource-deletion-template\",\n        \"namespace\": \"openshift-operators\"\n      },\n      \"selector\": {\n        \"matchExpressions\": [\n          {\n            \"key\": \"node-role.kubernetes.io/worker\",\n            \"operator\": \"Exists\"\n          }\n        ]\n      },\n      \"unhealthyConditions\": [\n        {\n          \"duration\": \"300s\",\n          \"status\": \"False\",\n          \"type\": \"Ready\"\n        },\n        {\n          \"duration\": \"300s\",\n          \"status\": \"Unknown\",\n          \"type\": \"Ready\"\n        }\n      ]\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "OpenShift Optional",
          "console.openshift.io/plugins": "[\"node-remediation-console-plugin\"]",
          "containerImage": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:60d95ea8240ecf701ba974b6df3ee296a7fb3ef5393e0dcf43af15e782f2d153",
          "createdAt": "2023-11-02 11:44:50",
          "description": "Detect failed Nodes and trigger remediation with e.g. Self Node Remediation.",
          "olm.skipRange": ">=0.3.0 <0.4.1",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.23.0",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/medik8s/node-healthcheck-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "nodehealthchecks.remediation.medik8s.io",
              "version": "v1alpha1",
              "kind": "NodeHealthCheck",
              "displayName": "Node Health Check",
              "description": "NodeHealthCheck is the Schema for the nodehealthchecks API",
              "resources": [
                {
                  "name": "nodehealthchecks",
                  "kind": "NodeHealthCheck",
                  "version": "v1alpha1"
                }
              ],
              "statusDescriptors": [
                {
                  "path": "conditions",
                  "displayName": "conditions",
                  "description": "Represents the observations of a NodeHealthCheck's current state. Known .status.conditions.type are: \"Disabled\"",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:conditions"
                  ]
                },
                {
                  "path": "healthyNodes",
                  "displayName": "healthynodes",
                  "description": "HealthyNodes specified the number of healthy nodes observed",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:healthyNodes"
                  ]
                },
                {
                  "path": "inFlightRemediations",
                  "displayName": "inFlightRemediations",
                  "description": "InFlightRemediations records the timestamp when remediation triggered per node",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:inFlightRemediations"
                  ]
                },
                {
                  "path": "observedNodes",
                  "displayName": "observedNodes",
                  "description": "ObservedNodes specified the number of nodes observed by using the NHC spec.selector",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:observedNodes"
                  ]
                },
                {
                  "path": "phase",
                  "displayName": "phase",
                  "description": "Phase represents the current phase of this Config. Known phases are Disabled, Paused, Remediating and Enabled, based on:\\n - the status of the Disabled condition\\n - the value of PauseRequests\\n - the value of InFlightRemediations",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                },
                {
                  "path": "reason",
                  "displayName": "reason",
                  "description": "Reason explains the current phase in more detail.",
                  "x-descriptors": [
                    "urn:alm:descriptor:com.tectonic.ui:text"
                  ]
                }
              ],
              "specDescriptors": [
                {
                  "path": "minHealthy",
                  "displayName": "Min Healthy",
                  "description": "Remediation is allowed if at least \"MinHealthy\" nodes selected by \"selector\" are healthy. Expects either a positive integer value or a percentage value. Percentage values must be positive whole numbers and are capped at 100%. 100% is valid and will block all remediation."
                },
                {
                  "path": "pauseRequests",
                  "displayName": "Pause Requests",
                  "description": "PauseRequests will prevent any new remdiation to start, while in-flight remediations keep running. Each entry is free form, and ideally represents the requested party reason for this pausing - i.e: \"imaginary-cluster-upgrade-manager-operator\""
                },
                {
                  "path": "remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider."
                },
                {
                  "path": "selector",
                  "displayName": "Selector",
                  "description": "Label selector to match nodes whose health will be exercised. Note: An empty selector will match all nodes."
                },
                {
                  "path": "unhealthyConditions",
                  "displayName": "Unhealthy Conditions",
                  "description": "UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy."
                }
              ]
            }
          ]
        },
        "description": "### Introduction\nHardware is imperfect, and software contains bugs. When node level failures such as kernel hangs or dead NICs\noccur, the work required from the cluster does not decrease - workloads from affected nodes need to be\nrestarted somewhere.\n\nHowever some workloads, such as RWO volumes and StatefulSets, may require at-most-one semantics.\nFailures affecting these kind of workloads risk data loss and/or corruption if nodes (and the workloads\nrunning on them) are assumed to be dead whenever we stop hearing from them. For this reason it is important\nto know that the node has reached a safe state before initiating recovery of the workload.\n\nUnfortunately it is not always practical to require admin intervention in order to confirm the node’s true status.\nIn order to automate the recovery of exclusive workloads, we provide operators for failure detection\nand remediation.\n\n### Failure detection: Node Health Check operator\nThe “Node Health Check” (NHC) operator checks each Node’s set of\nNodeConditions (eg. NotReady) against the criteria and thresholds defined in\nNodeHealthCheck configuration. If the Node is deemed to be in a failed\nstate, NHC will initiate recovery by using the SIG Cluster API's “External\nRemediation” API to instantiate the configured remediation template which\nspecifies the mechanism/controller to be used.\n\n### Failure handling: Self Node Remediation\nBy default NHC depends on the “Self Node Remediation” (SNR) operator, which\nis installed automatically.\nSNR uses watchdog timers and heuristics to ensure nodes enter a safe state\n(no longer hosting workloads) within a known and finite period of time,\nbefore signaling to the system that all Pods and VolumeAttachments on the\nfailed Node are no longer active and can be relocated elsewhere.\nIn the case of transient errors, the watchdog’s actions will also result in\nthe node rebooting and rejoining the cluster - restoring capacity.\n",
        "displayName": "Node Health Check Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "NHC",
          "Self Node Remediation",
          "SNR",
          "Remediation",
          "Fencing",
          "medik8s",
          "k8s"
        ],
        "links": [
          {
            "name": "Node Healthcheck Operator",
            "url": "https://docs.openshift.com/container-platform/4.12/nodes/nodes/eco-node-health-check-operator.html"
          },
          {
            "name": "Source Code",
            "url": "https://github.com/medik8s/node-healthcheck-operator"
          }
        ],
        "maintainers": [
          {
            "name": "Dragonfly Team",
            "email": "team-dragonfly@redhat.com"
          }
        ],
        "maturity": "alpha",
        "minKubeVersion": "1.20.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:796753816645b35cd08da53d925df5e4fb12df8b2a14db98db361f0ff787a028"
    },
    {
      "name": "",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:151e7d9bc500b7252af46d0856e3e16559ff310a1d0efedcc5d914164bbdef55"
    },
    {
      "name": "node-healthcheck-rhel8-operator-60d95ea8240ecf701ba974b6df3ee296a7fb3ef5393e0dcf43af15e782f2d153-annotation",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:60d95ea8240ecf701ba974b6df3ee296a7fb3ef5393e0dcf43af15e782f2d153"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:60d95ea8240ecf701ba974b6df3ee296a7fb3ef5393e0dcf43af15e782f2d153"
    },
    {
      "name": "node-remediation-console-plugin",
      "image": "registry.redhat.io/workload-availability/node-remediation-console-rhel8@sha256:8d32dee5c72ec1c94e4e92f8d1da935a384e40e379f237c432086a2781f4ecb9"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "node-healthcheck-operator.v0.6.1",
  "package": "node-healthcheck-operator",
  "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:309ba89dece3ee9901ed66c40bd28d71f20c7d91a7feff552e28ea0c772b9178",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "remediation.medik8s.io",
        "kind": "NodeHealthCheck",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk.required",
      "value": {
        "group": "self-node-remediation.medik8s.io",
        "kind": "SelfNodeRemediation",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "node-healthcheck-operator",
        "version": "0.6.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"remediation.medik8s.io/v1alpha1\",\n    \"kind\": \"NodeHealthCheck\",\n    \"metadata\": {\n      \"name\": \"nodehealthcheck-sample\"\n    },\n    \"spec\": {\n      \"minHealthy\": \"51%\",\n      \"remediationTemplate\": {\n        \"apiVersion\": \"self-node-remediation.medik8s.io/v1alpha1\",\n        \"kind\": \"SelfNodeRemediationTemplate\",\n        \"name\": \"self-node-remediation-resource-deletion-template\",\n        \"namespace\": \"openshift-operators\"\n      },\n      \"selector\": {\n        \"matchExpressions\": [\n          {\n            \"key\": \"node-role.kubernetes.io/worker\",\n            \"operator\": \"Exists\"\n          }\n        ]\n      },\n      \"unhealthyConditions\": [\n        {\n          \"duration\": \"300s\",\n          \"status\": \"False\",\n          \"type\": \"Ready\"\n        },\n        {\n          \"duration\": \"300s\",\n          \"status\": \"Unknown\",\n          \"type\": \"Ready\"\n        }\n      ]\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "OpenShift Optional",
          "console.openshift.io/plugins": "[\"node-remediation-console-plugin\"]",
          "containerImage": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:90cceb176fa903cc8e9aa4c0f7316560a8a354a3138dc26abbfc9884c1c576b5",
          "createdAt": "2023-10-30 14:21:41",
          "description": "Detect failed Nodes and trigger remediation with e.g. Self Node Remediation.",
          "olm.skipRange": ">=0.4.0 <0.6.1",
          "operators.openshift.io/infrastructure-features": "[\"disconnected\"]",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.31.0",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/medik8s/node-healthcheck-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "nodehealthchecks.remediation.medik8s.io",
              "version": "v1alpha1",
              "kind": "NodeHealthCheck",
              "displayName": "Node Health Check",
              "description": "NodeHealthCheck is the Schema for the nodehealthchecks API",
              "resources": [
                {
                  "name": "nodehealthchecks",
                  "kind": "NodeHealthCheck",
                  "version": "v1alpha1"
                }
              ],
              "statusDescriptors": [
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Represents the observations of a NodeHealthCheck's current state. Known .status.conditions.type are: \"Disabled\"",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                },
                {
                  "path": "healthyNodes",
                  "displayName": "Healthy Nodes",
                  "description": "HealthyNodes specified the number of healthy nodes observed"
                },
                {
                  "path": "inFlightRemediations",
                  "displayName": "In Flight Remediations",
                  "description": "InFlightRemediations records the timestamp when remediation triggered per node. Deprecated in favour of UnhealthyNodes."
                },
                {
                  "path": "lastUpdateTime",
                  "displayName": "Last Update Time",
                  "description": "LastUpdateTime is the last time the status was updated."
                },
                {
                  "path": "observedNodes",
                  "displayName": "Observed Nodes",
                  "description": "ObservedNodes specified the number of nodes observed by using the NHC spec.selector"
                },
                {
                  "path": "phase",
                  "displayName": "Phase",
                  "description": "Phase represents the current phase of this Config. Known phases are Disabled, Paused, Remediating and Enabled, based on:\\n - the status of the Disabled condition\\n - the value of PauseRequests\\n - the value of InFlightRemediations",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.phase"
                  ]
                },
                {
                  "path": "reason",
                  "displayName": "Reason",
                  "description": "Reason explains the current phase in more detail.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.phase:reason"
                  ]
                },
                {
                  "path": "unhealthyNodes",
                  "displayName": "Unhealthy Nodes",
                  "description": "UnhealthyNodes tracks currently unhealthy nodes and their remediations."
                },
                {
                  "path": "unhealthyNodes[0].conditionsHealthyTimestamp",
                  "displayName": "Conditions Healthy Timestamp",
                  "description": "ConditionsHealthyTimestamp is RFC 3339 date and time at which the unhealthy conditions didn't match anymore. The remediation CR will be deleted at that time, but the node will still be tracked as unhealthy until all remediation CRs are actually deleted, when remediators finished cleanup and removed their finalizers."
                },
                {
                  "path": "unhealthyNodes[0].name",
                  "displayName": "Name",
                  "description": "Name is the name of the unhealthy node"
                },
                {
                  "path": "unhealthyNodes[0].remediations",
                  "displayName": "Remediations",
                  "description": "Remediations tracks the remediations created for this node"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].resource",
                  "displayName": "Resource",
                  "description": "Resource is the reference to the remediation CR which was created"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].started",
                  "displayName": "Started",
                  "description": "Started is the creation time of the remediation CR"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].timedOut",
                  "displayName": "Timed Out",
                  "description": "TimedOut is the time when the remediation timed out. Applicable for escalating remediations only."
                }
              ],
              "specDescriptors": [
                {
                  "path": "escalatingRemediations",
                  "displayName": "Escalating Remediations",
                  "description": "EscalatingRemediations contain a list of ordered remediation templates with a timeout. The remediation templates will be used one after another, until the unhealthy node gets healthy within the timeout of the currently processed remediation. The order of remediation is defined by the \"order\" field of each \"escalatingRemediation\". \n Mutually exclusive with RemediationTemplate"
                },
                {
                  "path": "escalatingRemediations[0].order",
                  "displayName": "Order",
                  "description": "Order defines the order for this remediation. Remediations with lower order will be used before remediations with higher order. Remediations must not have the same order."
                },
                {
                  "path": "escalatingRemediations[0].remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by a remediation provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider."
                },
                {
                  "path": "escalatingRemediations[0].timeout",
                  "displayName": "Timeout",
                  "description": "Timeout defines how long NHC will wait for the node getting healthy before the next remediation (if any) will be used. When the last remediation times out, the overall remediation is considered as failed. As a safeguard for preventing parallel remediations, a minimum of 60s is enforced. \n Expects a string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."
                },
                {
                  "path": "minHealthy",
                  "displayName": "Min Healthy",
                  "description": "Remediation is allowed if at least \"MinHealthy\" nodes selected by \"selector\" are healthy. Expects either a positive integer value or a percentage value. Percentage values must be positive whole numbers and are capped at 100%. 100% is valid and will block all remediation."
                },
                {
                  "path": "pauseRequests",
                  "displayName": "Pause Requests",
                  "description": "PauseRequests will prevent any new remediation to start, while in-flight remediations keep running. Each entry is free form, and ideally represents the requested party reason for this pausing - i.e: \"imaginary-cluster-upgrade-manager-operator\""
                },
                {
                  "path": "remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider. \n Mutually exclusive with EscalatingRemediations"
                },
                {
                  "path": "selector",
                  "displayName": "Selector",
                  "description": "Label selector to match nodes whose health will be exercised. \n Selecting both control-plane and worker nodes in one NHC CR is highly discouraged and can result in undesired behaviour. \n Note: mandatory now for above reason, but for backwards compatibility existing CRs will continue to work with an empty selector, which matches all nodes."
                },
                {
                  "path": "unhealthyConditions",
                  "displayName": "Unhealthy Conditions",
                  "description": "UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy."
                },
                {
                  "path": "unhealthyConditions[0].duration",
                  "displayName": "Duration",
                  "description": "Duration of the condition specified when a node is considered unhealthy. \n Expects a string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."
                },
                {
                  "path": "unhealthyConditions[0].status",
                  "displayName": "Status",
                  "description": "The condition status in the node's status to watch for. Typically False, True or Unknown."
                },
                {
                  "path": "unhealthyConditions[0].type",
                  "displayName": "Type",
                  "description": "The condition type in the node's status to watch for."
                }
              ]
            }
          ]
        },
        "description": "### Introduction\nHardware is imperfect, and software contains bugs. When node level failures such as kernel hangs or dead NICs\noccur, the work required from the cluster does not decrease - workloads from affected nodes need to be\nrestarted somewhere.\n\nHowever some workloads, such as RWO volumes and StatefulSets, may require at-most-one semantics.\nFailures affecting these kind of workloads risk data loss and/or corruption if nodes (and the workloads\nrunning on them) are assumed to be dead whenever we stop hearing from them. For this reason it is important\nto know that the node has reached a safe state before initiating recovery of the workload.\n\nUnfortunately it is not always practical to require admin intervention in order to confirm the node’s true status.\nIn order to automate the recovery of exclusive workloads, we provide operators for failure detection\nand remediation.\n\n### Failure detection: Node Health Check operator\nThe “Node Health Check” (NHC) operator checks each Node’s set of\nNodeConditions (eg. NotReady) against the criteria and thresholds defined in\nNodeHealthCheck configuration. If the Node is deemed to be in a failed\nstate, NHC will initiate recovery by using the SIG Cluster API's “External\nRemediation” API to instantiate the configured remediation template which\nspecifies the mechanism/controller to be used.\n\n### Failure handling: Self Node Remediation\nBy default NHC depends on the “Self Node Remediation” (SNR) operator, which\nis installed automatically.\nSNR uses watchdog timers and heuristics to ensure nodes enter a safe state\n(no longer hosting workloads) within a known and finite period of time,\nbefore signaling to the system that all Pods and VolumeAttachments on the\nfailed Node are no longer active and can be relocated elsewhere.\nIn the case of transient errors, the watchdog’s actions will also result in\nthe node rebooting and rejoining the cluster - restoring capacity.\n",
        "displayName": "Node Health Check Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "NHC",
          "Self Node Remediation",
          "SNR",
          "Remediation",
          "Fencing",
          "medik8s",
          "k8s"
        ],
        "links": [
          {
            "name": "Node Healthcheck Operator",
            "url": "https://access.redhat.com/documentation/en-us/workload_availability_for_red_hat_openshift/23.3/html/remediation_fencing_and_maintenance/node-health-check-operator"
          },
          {
            "name": "Source Code",
            "url": "https://github.com/medik8s/node-healthcheck-operator"
          }
        ],
        "maintainers": [
          {
            "name": "Dragonfly Team",
            "email": "team-dragonfly@redhat.com"
          }
        ],
        "maturity": "alpha",
        "minKubeVersion": "1.20.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:53d3620bb0490d83aaf6a356bb7d3b9e7147222d1a2017f8317f05fa90cd3de9"
    },
    {
      "name": "must_gather",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-must-gather-rhel8@sha256:85054b34e119c16cc95cda9dc3f5d63f2d7bfc70634f70973410b2a1b1fa58d4"
    },
    {
      "name": "",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:309ba89dece3ee9901ed66c40bd28d71f20c7d91a7feff552e28ea0c772b9178"
    },
    {
      "name": "node-healthcheck-rhel8-operator-90cceb176fa903cc8e9aa4c0f7316560a8a354a3138dc26abbfc9884c1c576b5-annotation",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:90cceb176fa903cc8e9aa4c0f7316560a8a354a3138dc26abbfc9884c1c576b5"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:90cceb176fa903cc8e9aa4c0f7316560a8a354a3138dc26abbfc9884c1c576b5"
    },
    {
      "name": "node-remediation-console-plugin",
      "image": "registry.redhat.io/workload-availability/node-remediation-console-rhel8@sha256:b8d5db068bfc81031c2eef86e8649e4fc008b7480e08c9cfab2ab4497098eecf"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "node-healthcheck-operator.v0.7.0",
  "package": "node-healthcheck-operator",
  "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:765e34146932010fb979bdf85e529e84cc772bb4e3af74733091c4a185459406",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "remediation.medik8s.io",
        "kind": "NodeHealthCheck",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk.required",
      "value": {
        "group": "self-node-remediation.medik8s.io",
        "kind": "SelfNodeRemediation",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "node-healthcheck-operator",
        "version": "0.7.0"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"remediation.medik8s.io/v1alpha1\",\n    \"kind\": \"NodeHealthCheck\",\n    \"metadata\": {\n      \"name\": \"nodehealthcheck-sample\"\n    },\n    \"spec\": {\n      \"minHealthy\": \"51%\",\n      \"remediationTemplate\": {\n        \"apiVersion\": \"self-node-remediation.medik8s.io/v1alpha1\",\n        \"kind\": \"SelfNodeRemediationTemplate\",\n        \"name\": \"self-node-remediation-automatic-strategy-template\",\n        \"namespace\": \"openshift-operators\"\n      },\n      \"selector\": {\n        \"matchExpressions\": [\n          {\n            \"key\": \"node-role.kubernetes.io/worker\",\n            \"operator\": \"Exists\"\n          }\n        ]\n      },\n      \"unhealthyConditions\": [\n        {\n          \"duration\": \"300s\",\n          \"status\": \"False\",\n          \"type\": \"Ready\"\n        },\n        {\n          \"duration\": \"300s\",\n          \"status\": \"Unknown\",\n          \"type\": \"Ready\"\n        }\n      ]\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "OpenShift Optional",
          "console.openshift.io/plugins": "[\"node-remediation-console-plugin\"]",
          "containerImage": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:f608f05c0bb9cde37768fbb7c4cbf661c9d7fed42b6f6cd5151d876c8ec948e9",
          "createdAt": "2024-02-08 16:14:03",
          "description": "Detect failed Nodes and trigger remediation with e.g. Self Node Remediation.",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "olm.skipRange": ">=0.6.0 <0.7.0",
          "operatorframework.io/suggested-namespace": "openshift-workload-availability",
          "operatorframework.io/suggested-namespace-template": "{\"kind\":\"Namespace\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"openshift-workload-availability\",\"annotations\":{\"openshift.io/node-selector\":\"\"}}}",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.33.0",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/medik8s/node-healthcheck-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "nodehealthchecks.remediation.medik8s.io",
              "version": "v1alpha1",
              "kind": "NodeHealthCheck",
              "displayName": "Node Health Check",
              "description": "NodeHealthCheck is the Schema for the nodehealthchecks API",
              "resources": [
                {
                  "name": "nodehealthchecks",
                  "kind": "NodeHealthCheck",
                  "version": "v1alpha1"
                }
              ],
              "statusDescriptors": [
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Represents the observations of a NodeHealthCheck's current state. Known .status.conditions.type are: \"Disabled\"",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                },
                {
                  "path": "healthyNodes",
                  "displayName": "Healthy Nodes",
                  "description": "HealthyNodes specified the number of healthy nodes observed"
                },
                {
                  "path": "inFlightRemediations",
                  "displayName": "In Flight Remediations",
                  "description": "InFlightRemediations records the timestamp when remediation triggered per node. Deprecated in favour of UnhealthyNodes."
                },
                {
                  "path": "lastUpdateTime",
                  "displayName": "Last Update Time",
                  "description": "LastUpdateTime is the last time the status was updated."
                },
                {
                  "path": "observedNodes",
                  "displayName": "Observed Nodes",
                  "description": "ObservedNodes specified the number of nodes observed by using the NHC spec.selector"
                },
                {
                  "path": "phase",
                  "displayName": "Phase",
                  "description": "Phase represents the current phase of this Config. Known phases are Disabled, Paused, Remediating and Enabled, based on:\\n - the status of the Disabled condition\\n - the value of PauseRequests\\n - the value of InFlightRemediations",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.phase"
                  ]
                },
                {
                  "path": "reason",
                  "displayName": "Reason",
                  "description": "Reason explains the current phase in more detail.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.phase:reason"
                  ]
                },
                {
                  "path": "unhealthyNodes",
                  "displayName": "Unhealthy Nodes",
                  "description": "UnhealthyNodes tracks currently unhealthy nodes and their remediations."
                },
                {
                  "path": "unhealthyNodes[0].conditionsHealthyTimestamp",
                  "displayName": "Conditions Healthy Timestamp",
                  "description": "ConditionsHealthyTimestamp is RFC 3339 date and time at which the unhealthy conditions didn't match anymore. The remediation CR will be deleted at that time, but the node will still be tracked as unhealthy until all remediation CRs are actually deleted, when remediators finished cleanup and removed their finalizers."
                },
                {
                  "path": "unhealthyNodes[0].name",
                  "displayName": "Name",
                  "description": "Name is the name of the unhealthy node"
                },
                {
                  "path": "unhealthyNodes[0].remediations",
                  "displayName": "Remediations",
                  "description": "Remediations tracks the remediations created for this node"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].resource",
                  "displayName": "Resource",
                  "description": "Resource is the reference to the remediation CR which was created"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].started",
                  "displayName": "Started",
                  "description": "Started is the creation time of the remediation CR"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].timedOut",
                  "displayName": "Timed Out",
                  "description": "TimedOut is the time when the remediation timed out. Applicable for escalating remediations only."
                }
              ],
              "specDescriptors": [
                {
                  "path": "escalatingRemediations",
                  "displayName": "Escalating Remediations",
                  "description": "EscalatingRemediations contain a list of ordered remediation templates with a timeout. The remediation templates will be used one after another, until the unhealthy node gets healthy within the timeout of the currently processed remediation. The order of remediation is defined by the \"order\" field of each \"escalatingRemediation\". \n Mutually exclusive with RemediationTemplate"
                },
                {
                  "path": "escalatingRemediations[0].order",
                  "displayName": "Order",
                  "description": "Order defines the order for this remediation. Remediations with lower order will be used before remediations with higher order. Remediations must not have the same order."
                },
                {
                  "path": "escalatingRemediations[0].remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by a remediation provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider."
                },
                {
                  "path": "escalatingRemediations[0].timeout",
                  "displayName": "Timeout",
                  "description": "Timeout defines how long NHC will wait for the node getting healthy before the next remediation (if any) will be used. When the last remediation times out, the overall remediation is considered as failed. As a safeguard for preventing parallel remediations, a minimum of 60s is enforced. \n Expects a string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."
                },
                {
                  "path": "minHealthy",
                  "displayName": "Min Healthy",
                  "description": "Remediation is allowed if at least \"MinHealthy\" nodes selected by \"selector\" are healthy. Expects either a positive integer value or a percentage value. Percentage values must be positive whole numbers and are capped at 100%. 100% is valid and will block all remediation."
                },
                {
                  "path": "pauseRequests",
                  "displayName": "Pause Requests",
                  "description": "PauseRequests will prevent any new remediation to start, while in-flight remediations keep running. Each entry is free form, and ideally represents the requested party reason for this pausing - i.e: \"imaginary-cluster-upgrade-manager-operator\""
                },
                {
                  "path": "remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider. \n Mutually exclusive with EscalatingRemediations"
                },
                {
                  "path": "selector",
                  "displayName": "Selector",
                  "description": "Label selector to match nodes whose health will be exercised. \n Selecting both control-plane and worker nodes in one NHC CR is highly discouraged and can result in undesired behaviour. \n Note: mandatory now for above reason, but for backwards compatibility existing CRs will continue to work with an empty selector, which matches all nodes."
                },
                {
                  "path": "unhealthyConditions",
                  "displayName": "Unhealthy Conditions",
                  "description": "UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy."
                },
                {
                  "path": "unhealthyConditions[0].duration",
                  "displayName": "Duration",
                  "description": "Duration of the condition specified when a node is considered unhealthy. \n Expects a string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."
                },
                {
                  "path": "unhealthyConditions[0].status",
                  "displayName": "Status",
                  "description": "The condition status in the node's status to watch for. Typically False, True or Unknown."
                },
                {
                  "path": "unhealthyConditions[0].type",
                  "displayName": "Type",
                  "description": "The condition type in the node's status to watch for."
                }
              ]
            }
          ]
        },
        "description": "### Introduction\nHardware is imperfect, and software contains bugs. When node level failures such as kernel hangs or dead NICs\noccur, the work required from the cluster does not decrease - workloads from affected nodes need to be\nrestarted somewhere.\n\nHowever some workloads, such as RWO volumes and StatefulSets, may require at-most-one semantics.\nFailures affecting these kind of workloads risk data loss and/or corruption if nodes (and the workloads\nrunning on them) are assumed to be dead whenever we stop hearing from them. For this reason it is important\nto know that the node has reached a safe state before initiating recovery of the workload.\n\nUnfortunately it is not always practical to require admin intervention in order to confirm the node’s true status.\nIn order to automate the recovery of exclusive workloads, we provide operators for failure detection\nand remediation.\n\n### Failure detection: Node Health Check operator\nThe “Node Health Check” (NHC) operator checks each Node’s set of\nNodeConditions (eg. NotReady) against the criteria and thresholds defined in\nNodeHealthCheck configuration. If the Node is deemed to be in a failed\nstate, NHC will initiate recovery by using the SIG Cluster API's “External\nRemediation” API to instantiate the configured remediation template which\nspecifies the mechanism/controller to be used.\n\n### Failure handling: External remediators\nThere are multiple remediators for handling node failure that we recommend:\n- Self Node Remediation (SNR)\n- Fence Agents Remediation (FAR)\n- Machine Deletion Remediation (MDR)\n\nSNR is installed automatically when installing NHC.\n\n#### Self Node Remediation (SNR)\nSNR uses watchdog timers and heuristics to ensure nodes enter a safe state\n(no longer hosting workloads) within a known and finite period of time,\nbefore signaling to the system that all Pods on the failed Node are no longer active\nand can be relocated elsewhere.\nIn the case of transient errors, the watchdog’s actions will also result in\nthe node rebooting and rejoining the cluster - restoring capacity.\n\n#### Fence Agents Remediation (FAR)\nFAR uses well-known agents to fence unhealthy nodes, and eventually FAR remediates the nodes.\nThe remediation includes rebooting the unhealthy node using a fence agent,\nand then evicting workloads from the unhealthy node.\n\n#### Machine Deletion Remediation (MDR)\nMDR is limited to OpenShift, and it uses Machine API for reprovisioning unhealthy nodes by deleting their machines.\n",
        "displayName": "Node Health Check Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "NHC",
          "Self Node Remediation",
          "SNR",
          "Remediation",
          "Fencing",
          "medik8s",
          "k8s"
        ],
        "links": [
          {
            "name": "Node Healthcheck Operator",
            "url": "https://access.redhat.com/documentation/en-us/workload_availability_for_red_hat_openshift/24.1/html/remediation_fencing_and_maintenance/node-health-check-operator"
          },
          {
            "name": "Source Code",
            "url": "https://github.com/medik8s/node-healthcheck-operator"
          }
        ],
        "maintainers": [
          {
            "name": "Dragonfly Team",
            "email": "team-dragonfly@redhat.com"
          }
        ],
        "maturity": "alpha",
        "minKubeVersion": "1.20.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:62c44057a27abd41cf3daf60b8736da59a82dadb65fa6c32bef65d19bd49ea49"
    },
    {
      "name": "must_gather",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-must-gather-rhel8@sha256:c958f26cc81a3e20f9537a6203ab53d9f7ca45be91185e29c622f52e59a2e53e"
    },
    {
      "name": "",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:765e34146932010fb979bdf85e529e84cc772bb4e3af74733091c4a185459406"
    },
    {
      "name": "node-healthcheck-rhel8-operator-f608f05c0bb9cde37768fbb7c4cbf661c9d7fed42b6f6cd5151d876c8ec948e9-annotation",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:f608f05c0bb9cde37768fbb7c4cbf661c9d7fed42b6f6cd5151d876c8ec948e9"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:f608f05c0bb9cde37768fbb7c4cbf661c9d7fed42b6f6cd5151d876c8ec948e9"
    },
    {
      "name": "node-remediation-console-plugin",
      "image": "registry.redhat.io/workload-availability/node-remediation-console-rhel8@sha256:12c5c665395780d28769ea8e65a32da7a3db32046cdd836716e556ed4462add4"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "node-healthcheck-operator.v0.8.1",
  "package": "node-healthcheck-operator",
  "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:3d4656c9dc0352e9884484e8b0439bdff140259298630a7ce3dd8946a9c6870a",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "remediation.medik8s.io",
        "kind": "NodeHealthCheck",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk.required",
      "value": {
        "group": "self-node-remediation.medik8s.io",
        "kind": "SelfNodeRemediation",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "node-healthcheck-operator",
        "version": "0.8.1"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"remediation.medik8s.io/v1alpha1\",\n    \"kind\": \"NodeHealthCheck\",\n    \"metadata\": {\n      \"name\": \"nodehealthcheck-sample\"\n    },\n    \"spec\": {\n      \"minHealthy\": \"51%\",\n      \"remediationTemplate\": {\n        \"apiVersion\": \"self-node-remediation.medik8s.io/v1alpha1\",\n        \"kind\": \"SelfNodeRemediationTemplate\",\n        \"name\": \"self-node-remediation-automatic-strategy-template\",\n        \"namespace\": \"openshift-operators\"\n      },\n      \"selector\": {\n        \"matchExpressions\": [\n          {\n            \"key\": \"node-role.kubernetes.io/worker\",\n            \"operator\": \"Exists\"\n          }\n        ]\n      },\n      \"unhealthyConditions\": [\n        {\n          \"duration\": \"300s\",\n          \"status\": \"False\",\n          \"type\": \"Ready\"\n        },\n        {\n          \"duration\": \"300s\",\n          \"status\": \"Unknown\",\n          \"type\": \"Ready\"\n        }\n      ]\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "OpenShift Optional",
          "console.openshift.io/plugins": "[\"node-remediation-console-plugin\"]",
          "containerImage": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:e96c12998f72478de446aeda193447aa483284cc4cbaaa563773bbde7fba603e",
          "createdAt": "2024-05-30T19:34:55Z",
          "description": "Detect failed Nodes and trigger remediation with e.g. Self Node Remediation.",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "olm.skipRange": ">=0.6.0 <0.8.1",
          "operatorframework.io/suggested-namespace": "openshift-workload-availability",
          "operatorframework.io/suggested-namespace-template": "{\"kind\":\"Namespace\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"openshift-workload-availability\",\"annotations\":{\"openshift.io/node-selector\":\"\"}}}",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.33.0",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/medik8s/node-healthcheck-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "nodehealthchecks.remediation.medik8s.io",
              "version": "v1alpha1",
              "kind": "NodeHealthCheck",
              "displayName": "Node Health Check",
              "description": "NodeHealthCheck is the Schema for the nodehealthchecks API",
              "resources": [
                {
                  "name": "nodehealthchecks",
                  "kind": "NodeHealthCheck",
                  "version": "v1alpha1"
                }
              ],
              "statusDescriptors": [
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Represents the observations of a NodeHealthCheck's current state. Known .status.conditions.type are: \"Disabled\"",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                },
                {
                  "path": "healthyNodes",
                  "displayName": "Healthy Nodes",
                  "description": "HealthyNodes specified the number of healthy nodes observed"
                },
                {
                  "path": "inFlightRemediations",
                  "displayName": "In Flight Remediations",
                  "description": "InFlightRemediations records the timestamp when remediation triggered per node. Deprecated in favour of UnhealthyNodes."
                },
                {
                  "path": "lastUpdateTime",
                  "displayName": "Last Update Time",
                  "description": "LastUpdateTime is the last time the status was updated."
                },
                {
                  "path": "observedNodes",
                  "displayName": "Observed Nodes",
                  "description": "ObservedNodes specified the number of nodes observed by using the NHC spec.selector"
                },
                {
                  "path": "phase",
                  "displayName": "Phase",
                  "description": "Phase represents the current phase of this Config. Known phases are Disabled, Paused, Remediating and Enabled, based on:\\n - the status of the Disabled condition\\n - the value of PauseRequests\\n - the value of InFlightRemediations",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.phase"
                  ]
                },
                {
                  "path": "reason",
                  "displayName": "Reason",
                  "description": "Reason explains the current phase in more detail.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.phase:reason"
                  ]
                },
                {
                  "path": "unhealthyNodes",
                  "displayName": "Unhealthy Nodes",
                  "description": "UnhealthyNodes tracks currently unhealthy nodes and their remediations."
                },
                {
                  "path": "unhealthyNodes[0].conditionsHealthyTimestamp",
                  "displayName": "Conditions Healthy Timestamp",
                  "description": "ConditionsHealthyTimestamp is RFC 3339 date and time at which the unhealthy conditions didn't match anymore. The remediation CR will be deleted at that time, but the node will still be tracked as unhealthy until all remediation CRs are actually deleted, when remediators finished cleanup and removed their finalizers."
                },
                {
                  "path": "unhealthyNodes[0].name",
                  "displayName": "Name",
                  "description": "Name is the name of the unhealthy node"
                },
                {
                  "path": "unhealthyNodes[0].remediations",
                  "displayName": "Remediations",
                  "description": "Remediations tracks the remediations created for this node"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].resource",
                  "displayName": "Resource",
                  "description": "Resource is the reference to the remediation CR which was created"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].started",
                  "displayName": "Started",
                  "description": "Started is the creation time of the remediation CR"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].templateName",
                  "displayName": "Template Name",
                  "description": "TemplateName is required when using several templates of the same kind"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].timedOut",
                  "displayName": "Timed Out",
                  "description": "TimedOut is the time when the remediation timed out. Applicable for escalating remediations only."
                }
              ],
              "specDescriptors": [
                {
                  "path": "escalatingRemediations",
                  "displayName": "Escalating Remediations",
                  "description": "EscalatingRemediations contain a list of ordered remediation templates with a timeout. The remediation templates will be used one after another, until the unhealthy node gets healthy within the timeout of the currently processed remediation. The order of remediation is defined by the \"order\" field of each \"escalatingRemediation\". \n Mutually exclusive with RemediationTemplate"
                },
                {
                  "path": "escalatingRemediations[0].order",
                  "displayName": "Order",
                  "description": "Order defines the order for this remediation. Remediations with lower order will be used before remediations with higher order. Remediations must not have the same order."
                },
                {
                  "path": "escalatingRemediations[0].remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by a remediation provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider."
                },
                {
                  "path": "escalatingRemediations[0].timeout",
                  "displayName": "Timeout",
                  "description": "Timeout defines how long NHC will wait for the node getting healthy before the next remediation (if any) will be used. When the last remediation times out, the overall remediation is considered as failed. As a safeguard for preventing parallel remediations, a minimum of 60s is enforced. \n Expects a string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."
                },
                {
                  "path": "minHealthy",
                  "displayName": "Min Healthy",
                  "description": "Remediation is allowed if at least \"MinHealthy\" nodes selected by \"selector\" are healthy. Expects either a positive integer value or a percentage value. Percentage values must be positive whole numbers and are capped at 100%. 100% is valid and will block all remediation."
                },
                {
                  "path": "pauseRequests",
                  "displayName": "Pause Requests",
                  "description": "PauseRequests will prevent any new remediation to start, while in-flight remediations keep running. Each entry is free form, and ideally represents the requested party reason for this pausing - i.e: \"imaginary-cluster-upgrade-manager-operator\""
                },
                {
                  "path": "remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider. \n Mutually exclusive with EscalatingRemediations"
                },
                {
                  "path": "selector",
                  "displayName": "Selector",
                  "description": "Label selector to match nodes whose health will be exercised. \n Selecting both control-plane and worker nodes in one NHC CR is highly discouraged and can result in undesired behaviour. \n Note: mandatory now for above reason, but for backwards compatibility existing CRs will continue to work with an empty selector, which matches all nodes."
                },
                {
                  "path": "unhealthyConditions",
                  "displayName": "Unhealthy Conditions",
                  "description": "UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy."
                },
                {
                  "path": "unhealthyConditions[0].duration",
                  "displayName": "Duration",
                  "description": "Duration of the condition specified when a node is considered unhealthy. \n Expects a string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."
                },
                {
                  "path": "unhealthyConditions[0].status",
                  "displayName": "Status",
                  "description": "The condition status in the node's status to watch for. Typically False, True or Unknown."
                },
                {
                  "path": "unhealthyConditions[0].type",
                  "displayName": "Type",
                  "description": "The condition type in the node's status to watch for."
                }
              ]
            }
          ]
        },
        "description": "### Introduction\nHardware is imperfect, and software contains bugs. When node level failures such as kernel hangs or dead NICs\noccur, the work required from the cluster does not decrease - workloads from affected nodes need to be\nrestarted somewhere.\n\nHowever some workloads, such as RWO volumes and StatefulSets, may require at-most-one semantics.\nFailures affecting these kind of workloads risk data loss and/or corruption if nodes (and the workloads\nrunning on them) are assumed to be dead whenever we stop hearing from them. For this reason it is important\nto know that the node has reached a safe state before initiating recovery of the workload.\n\nUnfortunately it is not always practical to require admin intervention in order to confirm the node’s true status.\nIn order to automate the recovery of exclusive workloads, we provide operators for failure detection\nand remediation.\n\n### Failure detection: Node Health Check operator\nThe “Node Health Check” (NHC) operator checks each Node’s set of\nNodeConditions (eg. NotReady) against the criteria and thresholds defined in\nNodeHealthCheck configuration. If the Node is deemed to be in a failed\nstate, NHC will initiate recovery by using the SIG Cluster API's “External\nRemediation” API to instantiate the configured remediation template which\nspecifies the mechanism/controller to be used.\n\n### Failure handling: External remediators\nThere are multiple remediators for handling node failure that we recommend:\n- Self Node Remediation (SNR)\n- Fence Agents Remediation (FAR)\n- Machine Deletion Remediation (MDR)\n\nSNR is installed automatically when installing NHC.\n\n#### Self Node Remediation (SNR)\nSNR uses watchdog timers and heuristics to ensure nodes enter a safe state\n(no longer hosting workloads) within a known and finite period of time,\nbefore signaling to the system that all Pods on the failed Node are no longer active\nand can be relocated elsewhere.\nIn the case of transient errors, the watchdog’s actions will also result in\nthe node rebooting and rejoining the cluster - restoring capacity.\n\n#### Fence Agents Remediation (FAR)\nFAR uses well-known agents to fence unhealthy nodes, and eventually FAR remediates the nodes.\nThe remediation includes rebooting the unhealthy node using a fence agent,\nand then evicting workloads from the unhealthy node.\n\n#### Machine Deletion Remediation (MDR)\nMDR is limited to OpenShift, and it uses Machine API for reprovisioning unhealthy nodes by deleting their machines.\n",
        "displayName": "Node Health Check Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "NHC",
          "Self Node Remediation",
          "SNR",
          "Remediation",
          "Fencing",
          "medik8s",
          "k8s"
        ],
        "links": [
          {
            "name": "Node Healthcheck Operator",
            "url": "https://access.redhat.com/documentation/en-us/workload_availability_for_red_hat_openshift/24.2/html/remediation_fencing_and_maintenance/node-health-check-operator"
          },
          {
            "name": "Source Code",
            "url": "https://github.com/medik8s/node-healthcheck-operator"
          }
        ],
        "maintainers": [
          {
            "name": "Dragonfly Team",
            "email": "team-dragonfly@redhat.com"
          }
        ],
        "maturity": "alpha",
        "minKubeVersion": "1.20.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:6b33793126e32e75f4fa02dbb014eaa7458f36c70f316a7383171a02c38509f1"
    },
    {
      "name": "must_gather",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-must-gather-rhel8@sha256:5222f5e7ababbb5f8f4cfff9853b1884836f2f59ffdba909ef3f3f4f6e21d967"
    },
    {
      "name": "",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:3d4656c9dc0352e9884484e8b0439bdff140259298630a7ce3dd8946a9c6870a"
    },
    {
      "name": "node-healthcheck-rhel8-operator-e96c12998f72478de446aeda193447aa483284cc4cbaaa563773bbde7fba603e-annotation",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:e96c12998f72478de446aeda193447aa483284cc4cbaaa563773bbde7fba603e"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:e96c12998f72478de446aeda193447aa483284cc4cbaaa563773bbde7fba603e"
    },
    {
      "name": "node-remediation-console-plugin",
      "image": "registry.redhat.io/workload-availability/node-remediation-console-rhel8@sha256:f8b1ce0d967c111c6a6967e071f2478d174bb52cd02baea1df08961c06c4b1d0"
    }
  ]
}
{
  "schema": "olm.bundle",
  "name": "node-healthcheck-operator.v0.8.2",
  "package": "node-healthcheck-operator",
  "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:63bd0faf0b64e4672014205f9dcfeec6c436edd7dc2aaf83cd053d6e4569d90a",
  "properties": [
    {
      "type": "olm.gvk",
      "value": {
        "group": "remediation.medik8s.io",
        "kind": "NodeHealthCheck",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.gvk.required",
      "value": {
        "group": "self-node-remediation.medik8s.io",
        "kind": "SelfNodeRemediation",
        "version": "v1alpha1"
      }
    },
    {
      "type": "olm.package",
      "value": {
        "packageName": "node-healthcheck-operator",
        "version": "0.8.2"
      }
    },
    {
      "type": "olm.csv.metadata",
      "value": {
        "annotations": {
          "alm-examples": "[\n  {\n    \"apiVersion\": \"remediation.medik8s.io/v1alpha1\",\n    \"kind\": \"NodeHealthCheck\",\n    \"metadata\": {\n      \"name\": \"nodehealthcheck-sample\"\n    },\n    \"spec\": {\n      \"minHealthy\": \"51%\",\n      \"remediationTemplate\": {\n        \"apiVersion\": \"self-node-remediation.medik8s.io/v1alpha1\",\n        \"kind\": \"SelfNodeRemediationTemplate\",\n        \"name\": \"self-node-remediation-automatic-strategy-template\",\n        \"namespace\": \"openshift-operators\"\n      },\n      \"selector\": {\n        \"matchExpressions\": [\n          {\n            \"key\": \"node-role.kubernetes.io/worker\",\n            \"operator\": \"Exists\"\n          }\n        ]\n      },\n      \"unhealthyConditions\": [\n        {\n          \"duration\": \"300s\",\n          \"status\": \"False\",\n          \"type\": \"Ready\"\n        },\n        {\n          \"duration\": \"300s\",\n          \"status\": \"Unknown\",\n          \"type\": \"Ready\"\n        }\n      ]\n    }\n  }\n]",
          "capabilities": "Basic Install",
          "categories": "OpenShift Optional",
          "console.openshift.io/plugins": "[\"node-remediation-console-plugin\"]",
          "containerImage": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:4811046e26846b1f12a3b20ddc6209980897c11b171ddd61d26b43630cc1d4b4",
          "createdAt": "2024-08-09T14:54:37Z",
          "description": "Detect failed Nodes and trigger remediation with e.g. Self Node Remediation.",
          "features.operators.openshift.io/disconnected": "true",
          "features.operators.openshift.io/fips-compliant": "false",
          "features.operators.openshift.io/proxy-aware": "false",
          "features.operators.openshift.io/tls-profiles": "false",
          "features.operators.openshift.io/token-auth-aws": "false",
          "features.operators.openshift.io/token-auth-azure": "false",
          "features.operators.openshift.io/token-auth-gcp": "false",
          "olm.skipRange": ">=0.6.0 <0.8.2",
          "operatorframework.io/suggested-namespace": "openshift-workload-availability",
          "operatorframework.io/suggested-namespace-template": "{\"kind\":\"Namespace\",\"apiVersion\":\"v1\",\"metadata\":{\"name\":\"openshift-workload-availability\",\"annotations\":{\"openshift.io/node-selector\":\"\"}}}",
          "operators.openshift.io/valid-subscription": "[\"OpenShift Kubernetes Engine\", \"OpenShift Container Platform\", \"OpenShift Platform Plus\"]",
          "operators.operatorframework.io/builder": "operator-sdk-v1.33.0",
          "operators.operatorframework.io/project_layout": "go.kubebuilder.io/v3",
          "repository": "https://github.com/medik8s/node-healthcheck-operator",
          "support": "Red Hat"
        },
        "apiServiceDefinitions": {},
        "crdDescriptions": {
          "owned": [
            {
              "name": "nodehealthchecks.remediation.medik8s.io",
              "version": "v1alpha1",
              "kind": "NodeHealthCheck",
              "displayName": "Node Health Check",
              "description": "NodeHealthCheck is the Schema for the nodehealthchecks API",
              "resources": [
                {
                  "name": "nodehealthchecks",
                  "kind": "NodeHealthCheck",
                  "version": "v1alpha1"
                }
              ],
              "statusDescriptors": [
                {
                  "path": "conditions",
                  "displayName": "Conditions",
                  "description": "Represents the observations of a NodeHealthCheck's current state. Known .status.conditions.type are: \"Disabled\"",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.conditions"
                  ]
                },
                {
                  "path": "healthyNodes",
                  "displayName": "Healthy Nodes",
                  "description": "HealthyNodes specified the number of healthy nodes observed"
                },
                {
                  "path": "inFlightRemediations",
                  "displayName": "In Flight Remediations",
                  "description": "InFlightRemediations records the timestamp when remediation triggered per node. Deprecated in favour of UnhealthyNodes."
                },
                {
                  "path": "lastUpdateTime",
                  "displayName": "Last Update Time",
                  "description": "LastUpdateTime is the last time the status was updated."
                },
                {
                  "path": "observedNodes",
                  "displayName": "Observed Nodes",
                  "description": "ObservedNodes specified the number of nodes observed by using the NHC spec.selector"
                },
                {
                  "path": "phase",
                  "displayName": "Phase",
                  "description": "Phase represents the current phase of this Config. Known phases are Disabled, Paused, Remediating and Enabled, based on:\\n - the status of the Disabled condition\\n - the value of PauseRequests\\n - the value of InFlightRemediations",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.phase"
                  ]
                },
                {
                  "path": "reason",
                  "displayName": "Reason",
                  "description": "Reason explains the current phase in more detail.",
                  "x-descriptors": [
                    "urn:alm:descriptor:io.kubernetes.phase:reason"
                  ]
                },
                {
                  "path": "unhealthyNodes",
                  "displayName": "Unhealthy Nodes",
                  "description": "UnhealthyNodes tracks currently unhealthy nodes and their remediations."
                },
                {
                  "path": "unhealthyNodes[0].conditionsHealthyTimestamp",
                  "displayName": "Conditions Healthy Timestamp",
                  "description": "ConditionsHealthyTimestamp is RFC 3339 date and time at which the unhealthy conditions didn't match anymore. The remediation CR will be deleted at that time, but the node will still be tracked as unhealthy until all remediation CRs are actually deleted, when remediators finished cleanup and removed their finalizers."
                },
                {
                  "path": "unhealthyNodes[0].name",
                  "displayName": "Name",
                  "description": "Name is the name of the unhealthy node"
                },
                {
                  "path": "unhealthyNodes[0].remediations",
                  "displayName": "Remediations",
                  "description": "Remediations tracks the remediations created for this node"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].resource",
                  "displayName": "Resource",
                  "description": "Resource is the reference to the remediation CR which was created"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].started",
                  "displayName": "Started",
                  "description": "Started is the creation time of the remediation CR"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].templateName",
                  "displayName": "Template Name",
                  "description": "TemplateName is required when using several templates of the same kind"
                },
                {
                  "path": "unhealthyNodes[0].remediations[0].timedOut",
                  "displayName": "Timed Out",
                  "description": "TimedOut is the time when the remediation timed out. Applicable for escalating remediations only."
                }
              ],
              "specDescriptors": [
                {
                  "path": "escalatingRemediations",
                  "displayName": "Escalating Remediations",
                  "description": "EscalatingRemediations contain a list of ordered remediation templates with a timeout. The remediation templates will be used one after another, until the unhealthy node gets healthy within the timeout of the currently processed remediation. The order of remediation is defined by the \"order\" field of each \"escalatingRemediation\". \n Mutually exclusive with RemediationTemplate"
                },
                {
                  "path": "escalatingRemediations[0].order",
                  "displayName": "Order",
                  "description": "Order defines the order for this remediation. Remediations with lower order will be used before remediations with higher order. Remediations must not have the same order."
                },
                {
                  "path": "escalatingRemediations[0].remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by a remediation provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider."
                },
                {
                  "path": "escalatingRemediations[0].timeout",
                  "displayName": "Timeout",
                  "description": "Timeout defines how long NHC will wait for the node getting healthy before the next remediation (if any) will be used. When the last remediation times out, the overall remediation is considered as failed. As a safeguard for preventing parallel remediations, a minimum of 60s is enforced. \n Expects a string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."
                },
                {
                  "path": "minHealthy",
                  "displayName": "Min Healthy",
                  "description": "Remediation is allowed if at least \"MinHealthy\" nodes selected by \"selector\" are healthy. Expects either a positive integer value or a percentage value. Percentage values must be positive whole numbers and are capped at 100%. 100% is valid and will block all remediation."
                },
                {
                  "path": "pauseRequests",
                  "displayName": "Pause Requests",
                  "description": "PauseRequests will prevent any new remediation to start, while in-flight remediations keep running. Each entry is free form, and ideally represents the requested party reason for this pausing - i.e: \"imaginary-cluster-upgrade-manager-operator\""
                },
                {
                  "path": "remediationTemplate",
                  "displayName": "Remediation Template",
                  "description": "RemediationTemplate is a reference to a remediation template provided by an infrastructure provider. \n If a node needs remediation the controller will create an object from this template and then it should be picked up by a remediation provider. \n Mutually exclusive with EscalatingRemediations"
                },
                {
                  "path": "selector",
                  "displayName": "Selector",
                  "description": "Label selector to match nodes whose health will be exercised. \n Selecting both control-plane and worker nodes in one NHC CR is highly discouraged and can result in undesired behaviour. \n Note: mandatory now for above reason, but for backwards compatibility existing CRs will continue to work with an empty selector, which matches all nodes."
                },
                {
                  "path": "unhealthyConditions",
                  "displayName": "Unhealthy Conditions",
                  "description": "UnhealthyConditions contains a list of the conditions that determine whether a node is considered unhealthy.  The conditions are combined in a logical OR, i.e. if any of the conditions is met, the node is unhealthy."
                },
                {
                  "path": "unhealthyConditions[0].duration",
                  "displayName": "Duration",
                  "description": "Duration of the condition specified when a node is considered unhealthy. \n Expects a string of decimal numbers each with optional fraction and a unit suffix, eg \"300ms\", \"1.5h\" or \"2h45m\". Valid time units are \"ns\", \"us\" (or \"µs\"), \"ms\", \"s\", \"m\", \"h\"."
                },
                {
                  "path": "unhealthyConditions[0].status",
                  "displayName": "Status",
                  "description": "The condition status in the node's status to watch for. Typically False, True or Unknown."
                },
                {
                  "path": "unhealthyConditions[0].type",
                  "displayName": "Type",
                  "description": "The condition type in the node's status to watch for."
                }
              ]
            }
          ]
        },
        "description": "### Introduction\nHardware is imperfect, and software contains bugs. When node level failures such as kernel hangs or dead NICs\noccur, the work required from the cluster does not decrease - workloads from affected nodes need to be\nrestarted somewhere.\n\nHowever some workloads, such as RWO volumes and StatefulSets, may require at-most-one semantics.\nFailures affecting these kind of workloads risk data loss and/or corruption if nodes (and the workloads\nrunning on them) are assumed to be dead whenever we stop hearing from them. For this reason it is important\nto know that the node has reached a safe state before initiating recovery of the workload.\n\nUnfortunately it is not always practical to require admin intervention in order to confirm the node’s true status.\nIn order to automate the recovery of exclusive workloads, we provide operators for failure detection\nand remediation.\n\n### Failure detection: Node Health Check operator\nThe “Node Health Check” (NHC) operator checks each Node’s set of\nNodeConditions (eg. NotReady) against the criteria and thresholds defined in\nNodeHealthCheck configuration. If the Node is deemed to be in a failed\nstate, NHC will initiate recovery by using the SIG Cluster API's “External\nRemediation” API to instantiate the configured remediation template which\nspecifies the mechanism/controller to be used.\n\n### Failure handling: External remediators\nThere are multiple remediators for handling node failure that we recommend:\n- Self Node Remediation (SNR)\n- Fence Agents Remediation (FAR)\n- Machine Deletion Remediation (MDR)\n\nSNR is installed automatically when installing NHC.\n\n#### Self Node Remediation (SNR)\nSNR uses watchdog timers and heuristics to ensure nodes enter a safe state\n(no longer hosting workloads) within a known and finite period of time,\nbefore signaling to the system that all Pods on the failed Node are no longer active\nand can be relocated elsewhere.\nIn the case of transient errors, the watchdog’s actions will also result in\nthe node rebooting and rejoining the cluster - restoring capacity.\n\n#### Fence Agents Remediation (FAR)\nFAR uses well-known agents to fence unhealthy nodes, and eventually FAR remediates the nodes.\nThe remediation includes rebooting the unhealthy node using a fence agent,\nand then evicting workloads from the unhealthy node.\n\n#### Machine Deletion Remediation (MDR)\nMDR is limited to OpenShift, and it uses Machine API for reprovisioning unhealthy nodes by deleting their machines.\n",
        "displayName": "Node Health Check Operator",
        "installModes": [
          {
            "type": "OwnNamespace",
            "supported": false
          },
          {
            "type": "SingleNamespace",
            "supported": false
          },
          {
            "type": "MultiNamespace",
            "supported": false
          },
          {
            "type": "AllNamespaces",
            "supported": true
          }
        ],
        "keywords": [
          "NHC",
          "Self Node Remediation",
          "SNR",
          "Remediation",
          "Fencing",
          "medik8s",
          "k8s"
        ],
        "links": [
          {
            "name": "Node Healthcheck Operator",
            "url": "https://access.redhat.com/documentation/en-us/workload_availability_for_red_hat_openshift/24.3/html/remediation_fencing_and_maintenance/node-health-check-operator"
          },
          {
            "name": "Source Code",
            "url": "https://github.com/medik8s/node-healthcheck-operator"
          }
        ],
        "maintainers": [
          {
            "name": "Dragonfly Team",
            "email": "team-dragonfly@redhat.com"
          }
        ],
        "maturity": "alpha",
        "minKubeVersion": "1.20.0",
        "provider": {
          "name": "Red Hat",
          "url": "https://www.redhat.com"
        }
      }
    }
  ],
  "relatedImages": [
    {
      "name": "kube-rbac-proxy",
      "image": "registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:77df668a9591bbaae675d0553f8dca5423c0f257317bc08fe821d965f44ed019"
    },
    {
      "name": "must_gather",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-must-gather-rhel8@sha256:062cd9def39a087ae3802cd5208e2f0d5bfca29ba76ebd5139d88348e8c9e923"
    },
    {
      "name": "",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-operator-bundle@sha256:63bd0faf0b64e4672014205f9dcfeec6c436edd7dc2aaf83cd053d6e4569d90a"
    },
    {
      "name": "node-healthcheck-rhel8-operator-4811046e26846b1f12a3b20ddc6209980897c11b171ddd61d26b43630cc1d4b4-annotation",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:4811046e26846b1f12a3b20ddc6209980897c11b171ddd61d26b43630cc1d4b4"
    },
    {
      "name": "manager",
      "image": "registry.redhat.io/workload-availability/node-healthcheck-rhel8-operator@sha256:4811046e26846b1f12a3b20ddc6209980897c11b171ddd61d26b43630cc1d4b4"
    },
    {
      "name": "node-remediation-console-plugin",
      "image": "registry.redhat.io/workload-availability/node-remediation-console-rhel8@sha256:942f69efc7ae05d6c4d9c33335e4be71bfae2e6f9ef062dcd7887eebfe02120e"
    }
  ]
}
