annotations:
  alm-examples: |-
    [
      {
        "apiVersion": "postgresql.cnpg.io/v1",
        "kind": "Backup",
        "metadata": {
          "name": "backup-sample"
        },
        "spec": {
          "cluster": {
            "name": "cluster-sample"
          }
        }
      },
      {
        "apiVersion": "postgresql.cnpg.io/v1",
        "kind": "Cluster",
        "metadata": {
          "name": "cluster-sample"
        },
        "spec": {
          "instances": 3,
          "logLevel": "info",
          "primaryUpdateStrategy": "unsupervised",
          "storage": {
            "size": "1Gi"
          },
          "walStorage": {
            "size": "1Gi"
          }
        }
      },
      {
        "apiVersion": "postgresql.cnpg.io/v1",
        "kind": "Pooler",
        "metadata": {
          "name": "pooler-sample-rw"
        },
        "spec": {
          "cluster": {
            "name": "cluster-sample"
          },
          "instances": 1,
          "pgbouncer": {
            "poolMode": "session"
          },
          "type": "rw"
        }
      },
      {
        "apiVersion": "postgresql.cnpg.io/v1",
        "kind": "ScheduledBackup",
        "metadata": {
          "name": "scheduledbackup-sample"
        },
        "spec": {
          "cluster": {
            "name": "cluster-sample"
          },
          "schedule": "0 0 0 * * *"
        }
      }
    ]
  capabilities: Auto Pilot
  categories: Database
  certified: "true"
  containerImage: ghcr.io/cloudnative-pg/cloudnative-pg@sha256:22fd4647a25a4a97bfa36f322b7188b7fdbce1db28f4197d4d2c84422bebdc08
  createdAt: "2024-10-16T16:15:22Z"
  description: CloudNativePG is an open source operator designed to manage highly
    available PostgreSQL databases with a primary/standby architecture on any supported
    Kubernetes cluster.
  features.operators.openshift.io/disconnected: "true"
  features.operators.openshift.io/fips-compliant: "false"
  features.operators.openshift.io/proxy-aware: "false"
  features.operators.openshift.io/tls-profiles: "false"
  features.operators.openshift.io/token-auth-aws: "false"
  features.operators.openshift.io/token-auth-azure: "false"
  features.operators.openshift.io/token-auth-gcp: "false"
  olm.skipRange: '>= 1.18.0 < 1.24.1'
  operators.operatorframework.io/builder: operator-sdk-v1.37.0
  operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
  repository: https://github.com/cloudnative-pg/cloudnative-pg
  support: Community
apiVersion: v2
description: |
  Main features:

  * Direct integration with Kubernetes API server for High Availability,
    without requiring an external tool
  * Self-Healing capability, through:
      * failover of the primary instance by promoting the most aligned replica
      * automated recreation of a replica
  * Planned switchover of the primary instance by promoting a selected replica
  * Scale up/down capabilities
  * Definition of an arbitrary number of instances (minimum 1 - one primary server)
  * Definition of the *read-write* service, to connect your applications to the only primary server of the cluster
  * Definition of the *read-only* service, to connect your applications to any of the instances for reading workloads
  * Declarative management of PostgreSQL configuration
  * Declarative management of Postgres roles, users and groups
  * Support for Local Persistent Volumes with PVC templates
  * Reuse of Persistent Volumes storage in Pods
  * Separate volume for WAL files
  * Rolling updates for PostgreSQL minor versions
  * In-place or rolling updates for operator upgrades
  * TLS connections and client certificate authentication
  * Support for custom TLS certificates (including integration with cert-manager)
  * Continuous WAL archiving to an object store (AWS S3 and S3-compatible, Azure Blob Storage, and Google Cloud Storage)
  * Backups on volume snapshots (where supported by the underlying storage classes)
  * Backups on object stores (AWS S3 and S3-compatible, Azure Blob Storage, and Google Cloud Storage)
  * Full recovery and Point-In-Time recovery from an existing backup on volume snapshots or object stores
  * Offline import of existing PostgreSQL databases, including major upgrades of PostgreSQL
  * Fencing of an entire PostgreSQL cluster, or a subset of the instances in a declarative way
  * Hibernation of a PostgreSQL cluster in a declarative way
  * Support for Synchronous Replicas
  * Support for HA physical replication slots at cluster level
  * Backup from a standby
  * Backup retention policies (based on recovery window, only on object stores)
  * Parallel WAL archiving and restore to allow the database to keep up with WAL
    generation on high write systems
  * Support tagging backup files uploaded to an object store to enable optional
    retention management at the object store layer Replica clusters for
  * PostgreSQL deployments across multiple Kubernetes
    clusters, enabling private, public, hybrid, and multi-cloud architectures
  * Connection pooling with PgBouncer
  * Support for node affinity via `nodeSelector`
  * Native customizable exporter of user defined metrics for Prometheus through the `metrics` port (9187)
  * Standard output logging of PostgreSQL error messages in JSON format
  * Automatically set `readOnlyRootFilesystem` security context for pods
  * `cnpg` plugin for `kubectl`
  * Simple bind and search+bind LDAP client authentication
  * Multi-arch format container images
keywords:
- postgresql
- postgres
- database
- sql
- cloudnativepg
- cloudnative-pg
- cnpg
kubeVersion: '>= 1.23.0'
maintainers:
- email: jonathan.gonzalez@enterprisedb.com
  name: Jonathan Gonzalez V.
- email: jonathan.battiato@enterprisedb.com
  name: Jonathan Battiato
- email: niccolo.fei@enterprisedb.com
  name: Niccolo Fei
- email: gabriele.bartolini@enterprisedb.com
  name: Gabriele Bartolini
name: cloudnative-pg
sources:
- https://cloudnative-pg.io/
- https://cloudnative-pg.io/docs/
version: 1.24.1
